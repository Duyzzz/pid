
encoderMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006a90  08006a90  00016a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d38  08006d38  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006d38  08006d38  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d38  08006d38  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001e0  08006f20  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08006f20  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d2  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d21  00000000  00000000  0002c9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  0002e700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  0002f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000182a5  00000000  00000000  0002fff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009ddb  00000000  00000000  0004829d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008afad  00000000  00000000  00052078  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  000dd0a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a74 	.word	0x08006a74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006a74 	.word	0x08006a74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	cb18      	ldmia	r3, {r3, r4}
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	cb18      	ldmia	r3, {r3, r4}
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001010:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001014:	461a      	mov	r2, r3
 8001016:	4623      	mov	r3, r4
 8001018:	f7ff fcee 	bl	80009f8 <__aeabi_dcmpgt>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <PID_Init+0x50>
	{
		uPID->OutputSum = uPID->OutMax;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001028:	e9d4 3400 	ldrd	r3, r4, [r4]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001032:	e017      	b.n	8001064 <PID_Init+0x80>
	else if (uPID->OutputSum < uPID->OutMin)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001040:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	f7ff fcb8 	bl	80009bc <__aeabi_dcmplt>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d100      	bne.n	8001054 <PID_Init+0x70>
}
 8001052:	e007      	b.n	8001064 <PID_Init+0x80>
		uPID->OutputSum = uPID->OutMin;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800105a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	0000      	movs	r0, r0
	...

08001070 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af06      	add	r7, sp, #24
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001096:	a418      	add	r4, pc, #96	; (adr r4, 80010f8 <PID+0x88>)
 8001098:	e9d4 3400 	ldrd	r3, r4, [r4]
 800109c:	e9cd 3400 	strd	r3, r4, [sp]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f952 	bl	8001352 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80010b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80010b8:	4619      	mov	r1, r3
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 fa80 	bl	80015c0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80010c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80010c4:	9304      	str	r3, [sp, #16]
 80010c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80010ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80010d2:	e9cd 3400 	strd	r3, r4, [sp]
 80010d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f9be 	bl	800145c <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80010e0:	f001 f9ea 	bl	80024b8 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	605a      	str	r2, [r3, #4]
	
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	00000000 	.word	0x00000000
 80010fc:	406fe000 	.word	0x406fe000

08001100 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	785b      	ldrb	r3, [r3, #1]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <PID_Compute+0x14>
	{
		return _FALSE;
 8001110:	2300      	movs	r3, #0
 8001112:	e0fc      	b.n	800130e <PID_Compute+0x20e>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001114:	f001 f9d0 	bl	80024b8 <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	6a3a      	ldr	r2, [r7, #32]
 800112a:	429a      	cmp	r2, r3
 800112c:	f0c0 80ee 	bcc.w	800130c <PID_Compute+0x20c>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	cb18      	ldmia	r3, {r3, r4}
 8001136:	e9c7 3406 	strd	r3, r4, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001146:	f7ff f80f 	bl	8000168 <__aeabi_dsub>
 800114a:	4603      	mov	r3, r0
 800114c:	460c      	mov	r4, r1
 800114e:	e9c7 3404 	strd	r3, r4, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001158:	e9d4 3400 	ldrd	r3, r4, [r4]
 800115c:	461a      	mov	r2, r3
 800115e:	4623      	mov	r3, r4
 8001160:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001164:	f7ff f800 	bl	8000168 <__aeabi_dsub>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800117c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001180:	f7ff f9aa 	bl	80004d8 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	f7fe ffee 	bl	800016c <__adddf3>
 8001190:	4603      	mov	r3, r0
 8001192:	460c      	mov	r4, r1
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d114      	bne.n	80011cc <PID_Compute+0xcc>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80011ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b2:	f7ff f991 	bl	80004d8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7fe ffd3 	bl	8000168 <__aeabi_dsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80011d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011dc:	461a      	mov	r2, r3
 80011de:	4623      	mov	r3, r4
 80011e0:	f7ff fc0a 	bl	80009f8 <__aeabi_dcmpgt>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <PID_Compute+0xfc>
		{
			uPID->OutputSum = uPID->OutMax;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80011f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 80011fa:	e016      	b.n	800122a <PID_Compute+0x12a>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001208:	e9d4 3400 	ldrd	r3, r4, [r4]
 800120c:	461a      	mov	r2, r3
 800120e:	4623      	mov	r3, r4
 8001210:	f7ff fbd4 	bl	80009bc <__aeabi_dcmplt>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <PID_Compute+0x12a>
		{
			uPID->OutputSum = uPID->OutMin;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001220:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00f      	beq.n	8001252 <PID_Compute+0x152>
		{
			output = uPID->Kp * error;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001238:	e9d4 3400 	ldrd	r3, r4, [r4]
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001244:	f7ff f948 	bl	80004d8 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001250:	e005      	b.n	800125e <PID_Compute+0x15e>
		}
		else
		{
			output = 0;
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800126a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126e:	f7ff f933 	bl	80004d8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7fe ff75 	bl	8000168 <__aeabi_dsub>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	461a      	mov	r2, r3
 8001284:	4623      	mov	r3, r4
 8001286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800128a:	f7fe ff6f 	bl	800016c <__adddf3>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800129c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012a8:	f7ff fba6 	bl	80009f8 <__aeabi_dcmpgt>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <PID_Compute+0x1c2>
		{
			output = uPID->OutMax;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80012b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80012c0:	e014      	b.n	80012ec <PID_Compute+0x1ec>
		}
		else if (output < uPID->OutMin)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80012c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012d4:	f7ff fb72 	bl	80009bc <__aeabi_dcmplt>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <PID_Compute+0x1ec>
		{
			output = uPID->OutMin;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80012e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012e8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80012f4:	e9c2 3400 	strd	r3, r4, [r2]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012fe:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		uPID->LastTime = now;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001306:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <PID_Compute+0x20e>
		
	}
	else
	{
		return _FALSE;
 800130c:	2300      	movs	r3, #0
	}
	
}
 800130e:	4618      	mov	r0, r3
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bdb0      	pop	{r4, r5, r7, pc}

08001316 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	2b01      	cmp	r3, #1
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <PID_SetMode+0x2e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	785b      	ldrb	r3, [r3, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fe50 	bl	8000fe4 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	705a      	strb	r2, [r3, #1]
	
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800135e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001366:	f7ff fb3d 	bl	80009e4 <__aeabi_dcmpge>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d170      	bne.n	8001452 <PID_SetOutputLimits+0x100>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001376:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	uPID->OutMax = Max;
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001380:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d063      	beq.n	8001454 <PID_SetOutputLimits+0x102>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800139a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800139e:	461a      	mov	r2, r3
 80013a0:	4623      	mov	r3, r4
 80013a2:	f7ff fb29 	bl	80009f8 <__aeabi_dcmpgt>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <PID_SetOutputLimits+0x6e>
		{
			*uPID->MyOutput = uPID->OutMax;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80013b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013ba:	e9c2 3400 	strd	r3, r4, [r2]
 80013be:	e018      	b.n	80013f2 <PID_SetOutputLimits+0xa0>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4623      	mov	r3, r4
 80013d6:	f7ff faf1 	bl	80009bc <__aeabi_dcmplt>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <PID_SetOutputLimits+0xa0>
		{
			*uPID->MyOutput = uPID->OutMin;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013ee:	e9c2 3400 	strd	r3, r4, [r2]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80013fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001402:	461a      	mov	r2, r3
 8001404:	4623      	mov	r3, r4
 8001406:	f7ff faf7 	bl	80009f8 <__aeabi_dcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <PID_SetOutputLimits+0xd0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001416:	e9d4 3400 	ldrd	r3, r4, [r4]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 8001420:	e018      	b.n	8001454 <PID_SetOutputLimits+0x102>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800142e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001432:	461a      	mov	r2, r3
 8001434:	4623      	mov	r3, r4
 8001436:	f7ff fac1 	bl	80009bc <__aeabi_dcmplt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <PID_SetOutputLimits+0x102>
		{
			uPID->OutputSum = uPID->OutMin;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001446:	e9d4 3400 	ldrd	r3, r4, [r4]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 8001450:	e000      	b.n	8001454 <PID_SetOutputLimits+0x102>
		return;
 8001452:	bf00      	nop
		}
		else { }
		
	}
	
}
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bd90      	pop	{r4, r7, pc}
	...

0800145c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001474:	f7ff faa2 	bl	80009bc <__aeabi_dcmplt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8099 	bne.w	80015b2 <PID_SetTunings2+0x156>
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800148c:	f7ff fa96 	bl	80009bc <__aeabi_dcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 808d 	bne.w	80015b2 <PID_SetTunings2+0x156>
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014a4:	f7ff fa8a 	bl	80009bc <__aeabi_dcmplt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f040 8081 	bne.w	80015b2 <PID_SetTunings2+0x156>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80014b6:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80014b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80014bc:	2b01      	cmp	r3, #1
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014d2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	uPID->DispKi = Ki;
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80014dc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	uPID->DispKd = Kd;
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80014e6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff78 	bl	80003e4 <__aeabi_ui2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b30      	ldr	r3, [pc, #192]	; (80015bc <PID_SetTunings2+0x160>)
 80014fa:	f7ff f917 	bl	800072c <__aeabi_ddiv>
 80014fe:	4603      	mov	r3, r0
 8001500:	460c      	mov	r4, r1
 8001502:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	uPID->Kp = Kp;
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	e9d7 3400 	ldrd	r3, r4, [r7]
 800150c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001510:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001514:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001518:	f7fe ffde 	bl	80004d8 <__aeabi_dmul>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800152a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800152e:	f7ff f8fd 	bl	800072c <__aeabi_ddiv>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d137      	bne.n	80015b4 <PID_SetTunings2+0x158>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800154a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800154e:	461a      	mov	r2, r3
 8001550:	4623      	mov	r3, r4
 8001552:	f04f 0000 	mov.w	r0, #0
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	f7fe fe05 	bl	8000168 <__aeabi_dsub>
 800155e:	4603      	mov	r3, r0
 8001560:	460c      	mov	r4, r1
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800156e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001572:	461a      	mov	r2, r3
 8001574:	4623      	mov	r3, r4
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 0100 	mov.w	r1, #0
 800157e:	f7fe fdf3 	bl	8000168 <__aeabi_dsub>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001592:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001596:	461a      	mov	r2, r3
 8001598:	4623      	mov	r3, r4
 800159a:	f04f 0000 	mov.w	r0, #0
 800159e:	f04f 0100 	mov.w	r1, #0
 80015a2:	f7fe fde1 	bl	8000168 <__aeabi_dsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	460c      	mov	r4, r1
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80015b0:	e000      	b.n	80015b4 <PID_SetTunings2+0x158>
		return;
 80015b2:	bf00      	nop
		
	}
	
}
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	408f4000 	.word	0x408f4000

080015c0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03a      	beq.n	800164a <PID_SetControllerDirection+0x8a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d035      	beq.n	800164a <PID_SetControllerDirection+0x8a>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80015e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	f7fe fdb8 	bl	8000168 <__aeabi_dsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	460c      	mov	r4, r1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001608:	e9d4 3400 	ldrd	r3, r4, [r4]
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	f04f 0000 	mov.w	r0, #0
 8001614:	f04f 0100 	mov.w	r1, #0
 8001618:	f7fe fda6 	bl	8000168 <__aeabi_dsub>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800162c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	f7fe fd94 	bl	8000168 <__aeabi_dsub>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	70da      	strb	r2, [r3, #3]
	
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bd90      	pop	{r4, r7, pc}

08001658 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dd2e      	ble.n	80016c6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7fe fecb 	bl	8000404 <__aeabi_i2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe feb4 	bl	80003e4 <__aeabi_ui2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7ff f852 	bl	800072c <__aeabi_ddiv>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		
		uPID->Ki *= ratio;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800169a:	f7fe ff1d 	bl	80004d8 <__aeabi_dmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd /= ratio;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016b2:	f7ff f83b 	bl	800072c <__aeabi_ddiv>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016d0 <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <DWT_Init+0x24>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <DWT_Init+0x24>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <DWT_Init+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <DWT_Init+0x28>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	e000edf0 	.word	0xe000edf0
 80016f8:	e0001000 	.word	0xe0001000

080016fc <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <micros+0x20>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <micros+0x24>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <micros+0x28>)
 800170a:	fba1 1303 	umull	r1, r3, r1, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e0001000 	.word	0xe0001000
 8001720:	20000004 	.word	0x20000004
 8001724:	431bde83 	.word	0x431bde83

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f000 fe6b 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 f909 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 fad9 	bl	8001cec <MX_GPIO_Init>
  MX_DMA_Init();
 800173a:	f000 fab9 	bl	8001cb0 <MX_DMA_Init>
  MX_TIM1_Init();
 800173e:	f000 f949 	bl	80019d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001742:	f000 f99f 	bl	8001a84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001746:	f000 f9e9 	bl	8001b1c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800174a:	f000 fa87 	bl	8001c5c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800174e:	f000 fa5b 	bl	8001c08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initPwm();
 8001752:	f000 fc1b 	bl	8001f8c <initPwm>
  DWT_Init();
 8001756:	f7ff ffbb 	bl	80016d0 <DWT_Init>
  cmdHBridge(0);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 fbd2 	bl	8001f04 <cmdHBridge>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	4866      	ldr	r0, [pc, #408]	; (8001900 <main+0x1d8>)
 8001768:	f001 fa8f 	bl	8002c8a <HAL_GPIO_WritePin>
  //PID(&speedPID, &inputSpeed, &outputPWM, &setPoint, 130, 73, 0.186, _PID_P_ON_E, _PID_CD_DIRECT); // 70
  PID(&speedPID, &inputSpeed, &outputPWM, &setPoint, 42.08, 509.23, 0.5, _PID_P_ON_E, _PID_CD_DIRECT);//70
 800176c:	2300      	movs	r3, #0
 800176e:	9307      	str	r3, [sp, #28]
 8001770:	2301      	movs	r3, #1
 8001772:	9306      	str	r3, [sp, #24]
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	4c62      	ldr	r4, [pc, #392]	; (8001904 <main+0x1dc>)
 800177a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800177e:	a45a      	add	r4, pc, #360	; (adr r4, 80018e8 <main+0x1c0>)
 8001780:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001784:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001788:	a459      	add	r4, pc, #356	; (adr r4, 80018f0 <main+0x1c8>)
 800178a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800178e:	e9cd 3400 	strd	r3, r4, [sp]
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <main+0x1e0>)
 8001794:	4a5d      	ldr	r2, [pc, #372]	; (800190c <main+0x1e4>)
 8001796:	495e      	ldr	r1, [pc, #376]	; (8001910 <main+0x1e8>)
 8001798:	485e      	ldr	r0, [pc, #376]	; (8001914 <main+0x1ec>)
 800179a:	f7ff fc69 	bl	8001070 <PID>
  //PID(&speedPID, &inputSpeed, &outputPWM, &setPoint, 0.000144, 0.201598, 0, _PID_P_ON_E, _PID_CD_DIRECT);
  //PID(&speedPID, &inputSpeed, &outputPWM, &setPoint, 80, 35, 0.834, _PID_P_ON_E, _PID_CD_DIRECT); //70
  PID_SetMode(&speedPID, _PID_MODE_AUTOMATIC);
 800179e:	2101      	movs	r1, #1
 80017a0:	485c      	ldr	r0, [pc, #368]	; (8001914 <main+0x1ec>)
 80017a2:	f7ff fdb8 	bl	8001316 <PID_SetMode>
  PID_SetSampleTime(&speedPID, 10);
 80017a6:	210a      	movs	r1, #10
 80017a8:	485a      	ldr	r0, [pc, #360]	; (8001914 <main+0x1ec>)
 80017aa:	f7ff ff55 	bl	8001658 <PID_SetSampleTime>
  PID_SetOutputLimits(&speedPID, -980, 980);
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	4c59      	ldr	r4, [pc, #356]	; (8001918 <main+0x1f0>)
 80017b4:	e9cd 3400 	strd	r3, r4, [sp]
 80017b8:	a34f      	add	r3, pc, #316	; (adr r3, 80018f8 <main+0x1d0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	4855      	ldr	r0, [pc, #340]	; (8001914 <main+0x1ec>)
 80017c0:	f7ff fdc7 	bl	8001352 <PID_SetOutputLimits>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80017c4:	213c      	movs	r1, #60	; 0x3c
 80017c6:	4855      	ldr	r0, [pc, #340]	; (800191c <main+0x1f4>)
 80017c8:	f002 f8ea 	bl	80039a0 <HAL_TIM_Encoder_Start>
  setPoint = 100;
 80017cc:	4a4e      	ldr	r2, [pc, #312]	; (8001908 <main+0x1e0>)
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	4c53      	ldr	r4, [pc, #332]	; (8001920 <main+0x1f8>)
 80017d4:	e9c2 3400 	strd	r3, r4, [r2]

  sprintf(mes, "%d,%d,%d\n", 0, inputSpeed, outputPWM);
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <main+0x1e8>)
 80017da:	cb18      	ldmia	r3, {r3, r4}
 80017dc:	4a4b      	ldr	r2, [pc, #300]	; (800190c <main+0x1e4>)
 80017de:	e9d2 1200 	ldrd	r1, r2, [r2]
 80017e2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80017e6:	e9cd 3400 	strd	r3, r4, [sp]
 80017ea:	2200      	movs	r2, #0
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <main+0x1fc>)
 80017ee:	484e      	ldr	r0, [pc, #312]	; (8001928 <main+0x200>)
 80017f0:	f003 fd54 	bl	800529c <siprintf>
  HAL_UART_Transmit(&huart3, mes, strlen(mes), 10);
 80017f4:	484c      	ldr	r0, [pc, #304]	; (8001928 <main+0x200>)
 80017f6:	f7fe fcab 	bl	8000150 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	230a      	movs	r3, #10
 8001800:	4949      	ldr	r1, [pc, #292]	; (8001928 <main+0x200>)
 8001802:	484a      	ldr	r0, [pc, #296]	; (800192c <main+0x204>)
 8001804:	f002 ff5d 	bl	80046c2 <HAL_UART_Transmit>
  timeMeasure = micros()/1000000;
 8001808:	f7ff ff78 	bl	80016fc <micros>
 800180c:	4602      	mov	r2, r0
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <main+0x208>)
 8001810:	fba3 2302 	umull	r2, r3, r3, r2
 8001814:	0c9b      	lsrs	r3, r3, #18
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fde4 	bl	80003e4 <__aeabi_ui2d>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	4a44      	ldr	r2, [pc, #272]	; (8001934 <main+0x20c>)
 8001822:	e9c2 3400 	strd	r3, r4, [r2]
	  //sprintf(mes, "%d\n", 25);
	  //HAL_UART_Transmit(&huart3, (uint8_t*)mes, sizeof(mes), 10);
	  //HAL_Delay(1000);
	  //PID_Compute(&speedPID);
	  //cmdHBridge(outputPWM);
	  if(motorState){
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <main+0x210>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d012      	beq.n	8001854 <main+0x12c>
	  		  PID_Compute(&speedPID);
 800182e:	4839      	ldr	r0, [pc, #228]	; (8001914 <main+0x1ec>)
 8001830:	f7ff fc66 	bl	8001100 <PID_Compute>
	  		  cmdHBridge(outputPWM);
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <main+0x1e4>)
 8001836:	cb18      	ldmia	r3, {r3, r4}
 8001838:	4618      	mov	r0, r3
 800183a:	4621      	mov	r1, r4
 800183c:	f7ff f8fc 	bl	8000a38 <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	b21b      	sxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fb5d 	bl	8001f04 <cmdHBridge>
	  		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	482c      	ldr	r0, [pc, #176]	; (8001900 <main+0x1d8>)
 8001850:	f001 fa33 	bl	8002cba <HAL_GPIO_TogglePin>
	  		  //cmdHBridge(500);
	  		  //float temp = (float)micros()/1000000 - timeMeasure;
	  		  //sprintf(mes, "%.2f\n", inputSpeed);
	  		  //HAL_UART_Transmit(&huart3, mes, strlen(mes), 10);
	  	  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0 && buttonState == 0 && micros() - buttonTime > 20000){
 8001854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001858:	4838      	ldr	r0, [pc, #224]	; (800193c <main+0x214>)
 800185a:	f001 f9ff 	bl	8002c5c <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d129      	bne.n	80018b8 <main+0x190>
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <main+0x218>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d022      	beq.n	80018b8 <main+0x190>
 8001872:	f7ff ff43 	bl	80016fc <micros>
 8001876:	4602      	mov	r2, r0
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <main+0x21c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001882:	4293      	cmp	r3, r2
 8001884:	d918      	bls.n	80018b8 <main+0x190>
	  		  buttonState = 1;
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <main+0x218>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
	  		  motorState = !motorState;
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <main+0x210>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <main+0x210>)
 80018a8:	701a      	strb	r2, [r3, #0]
	  		  if(motorState){
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <main+0x210>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <main+0x190>
	  			  //cmdHBridge(1, 980);
	  		  }else {
	  			  cmdHBridge(0);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 fb26 	bl	8001f04 <cmdHBridge>
	  		  }
	  		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	  	  }
	  	  if(buttonState == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <main+0x218>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0b2      	beq.n	8001826 <main+0xfe>
 80018c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <main+0x214>)
 80018c6:	f001 f9c9 	bl	8002c5c <HAL_GPIO_ReadPin>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d1aa      	bne.n	8001826 <main+0xfe>
	  		  buttonState = 0;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <main+0x218>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	  		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
	  		  buttonTime =  micros();
 80018d6:	f7ff ff11 	bl	80016fc <micros>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <main+0x21c>)
 80018de:	601a      	str	r2, [r3, #0]
	  if(motorState){
 80018e0:	e7a1      	b.n	8001826 <main+0xfe>
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	147ae148 	.word	0x147ae148
 80018ec:	407fd3ae 	.word	0x407fd3ae
 80018f0:	70a3d70a 	.word	0x70a3d70a
 80018f4:	40450a3d 	.word	0x40450a3d
 80018f8:	00000000 	.word	0x00000000
 80018fc:	c08ea000 	.word	0xc08ea000
 8001900:	40011000 	.word	0x40011000
 8001904:	3fe00000 	.word	0x3fe00000
 8001908:	200003f0 	.word	0x200003f0
 800190c:	20000228 	.word	0x20000228
 8001910:	20000358 	.word	0x20000358
 8001914:	200003f8 	.word	0x200003f8
 8001918:	408ea000 	.word	0x408ea000
 800191c:	20000310 	.word	0x20000310
 8001920:	40590000 	.word	0x40590000
 8001924:	08006a90 	.word	0x08006a90
 8001928:	20000210 	.word	0x20000210
 800192c:	20000284 	.word	0x20000284
 8001930:	431bde83 	.word	0x431bde83
 8001934:	20000208 	.word	0x20000208
 8001938:	20000000 	.word	0x20000000
 800193c:	40010c00 	.word	0x40010c00
 8001940:	20000202 	.word	0x20000202
 8001944:	20000230 	.word	0x20000230

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b090      	sub	sp, #64	; 0x40
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	2228      	movs	r2, #40	; 0x28
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f848 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800196a:	2301      	movs	r3, #1
 800196c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001972:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001978:	2301      	movs	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001980:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001986:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	4618      	mov	r0, r3
 8001992:	f001 f9ab 	bl	8002cec <HAL_RCC_OscConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800199c:	f000 fb06 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a0:	230f      	movs	r3, #15
 80019a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a4:	2302      	movs	r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2101      	movs	r1, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fc16 	bl	80031ec <HAL_RCC_ClockConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019c6:	f000 faf1 	bl	8001fac <Error_Handler>
  }
}
 80019ca:	bf00      	nop
 80019cc:	3740      	adds	r7, #64	; 0x40
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f802 	bl	80049ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_TIM1_Init+0xa8>)
 80019f2:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <MX_TIM1_Init+0xac>)
 80019f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <MX_TIM1_Init+0xa8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <MX_TIM1_Init+0xa8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a24:	2301      	movs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a30:	2302      	movs	r3, #2
 8001a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a34:	2301      	movs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a48:	f001 ff08 	bl	800385c <HAL_TIM_Encoder_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a52:	f000 faab 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_TIM1_Init+0xa8>)
 8001a64:	f002 fd70 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a6e:	f000 fa9d 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	; 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000310 	.word	0x20000310
 8001a80:	40012c00 	.word	0x40012c00

08001a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001aaa:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001ab8:	2263      	movs	r2, #99	; 0x63
 8001aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001aca:	f001 fd2b 	bl	8003524 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ad4:	f000 fa6a 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001ae6:	f002 f9af 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001af0:	f000 fa5c 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_TIM2_Init+0x94>)
 8001b02:	f002 fd21 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b0c:	f000 fa4e 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000360 	.word	0x20000360

08001b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08e      	sub	sp, #56	; 0x38
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	; (8001c04 <MX_TIM3_Init+0xe8>)
 8001b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8001b52:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b72:	4823      	ldr	r0, [pc, #140]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b74:	f001 fcd6 	bl	8003524 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b7e:	f000 fa15 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001b90:	f002 f95a 	bl	8003e48 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b9a:	f000 fa07 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b9e:	4818      	ldr	r0, [pc, #96]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001ba0:	f001 fd62 	bl	8003668 <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001baa:	f000 f9ff 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4810      	ldr	r0, [pc, #64]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001bbe:	f002 fcc3 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001bc8:	f000 f9f0 	bl	8001fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	2360      	movs	r3, #96	; 0x60
 8001bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	2200      	movs	r2, #0
 8001be0:	4619      	mov	r1, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001be4:	f002 f872 	bl	8003ccc <HAL_TIM_PWM_ConfigChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001bee:	f000 f9dd 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <MX_TIM3_Init+0xe4>)
 8001bf4:	f000 fa88 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001bf8:	bf00      	nop
 8001bfa:	3738      	adds	r7, #56	; 0x38
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200002c8 	.word	0x200002c8
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART2_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART2_UART_Init+0x4c>)
 8001c40:	f002 fcf2 	bl	8004628 <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c4a:	f000 f9af 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200003a8 	.word	0x200003a8
 8001c58:	40004400 	.word	0x40004400

08001c5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <MX_USART3_UART_Init+0x50>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_USART3_UART_Init+0x4c>)
 8001c94:	f002 fcc8 	bl	8004628 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c9e:	f000 f985 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000284 	.word	0x20000284
 8001cac:	40004800 	.word	0x40004800

08001cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_DMA_Init+0x38>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <MX_DMA_Init+0x38>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6153      	str	r3, [r2, #20]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_DMA_Init+0x38>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2010      	movs	r0, #16
 8001cd4:	f000 fcd1 	bl	800267a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cd8:	2010      	movs	r0, #16
 8001cda:	f000 fcea 	bl	80026b2 <HAL_NVIC_EnableIRQ>

}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d06:	f043 0310 	orr.w	r3, r3, #16
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b31      	ldr	r3, [pc, #196]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_GPIO_Init+0xe8>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d66:	481c      	ldr	r0, [pc, #112]	; (8001dd8 <MX_GPIO_Init+0xec>)
 8001d68:	f000 ff8f 	bl	8002c8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2130      	movs	r1, #48	; 0x30
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <MX_GPIO_Init+0xf0>)
 8001d72:	f000 ff8a 	bl	8002c8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4812      	ldr	r0, [pc, #72]	; (8001dd8 <MX_GPIO_Init+0xec>)
 8001d90:	f000 fe0a 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 8001d94:	2330      	movs	r3, #48	; 0x30
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	; (8001ddc <MX_GPIO_Init+0xf0>)
 8001dac:	f000 fdfc 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_GPIO_Init+0xf4>)
 8001dc6:	f000 fdef 	bl	80029a8 <HAL_GPIO_Init>

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // PID apply
 8001de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af04      	add	r7, sp, #16
 8001dea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df4:	d168      	bne.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0xe4>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df6:	b672      	cpsid	i
	  	__disable_irq();
	  	counter = (int)__HAL_TIM_GET_COUNTER(&htim1);
 8001df8:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e02:	801a      	strh	r2, [r3, #0]
	  	speed = counter;
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff46 	bl	8000c9c <__aeabi_i2f>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001e14:	601a      	str	r2, [r3, #0]
	  	inputSpeed = speed;
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb04 	bl	8000428 <__aeabi_f2d>
 8001e20:	4603      	mov	r3, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001e26:	e9c2 3400 	strd	r3, r4, [r2]
	  	oldCounter = counter;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e34:	601a      	str	r2, [r3, #0]
	  	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
	  	if(motorState){
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03a      	beq.n	8001ebc <HAL_TIM_PeriodElapsedCallback+0xd8>
	  		float temp = (float)micros()/1000000 - timeMeasure;
 8001e46:	f7ff fc59 	bl	80016fc <micros>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff21 	bl	8000c94 <__aeabi_ui2f>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4924      	ldr	r1, [pc, #144]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f828 	bl	8000eac <__aeabi_fdiv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fae2 	bl	8000428 <__aeabi_f2d>
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e66:	cb18      	ldmia	r3, {r3, r4}
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7fe f97c 	bl	8000168 <__aeabi_dsub>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	4618      	mov	r0, r3
 8001e76:	4621      	mov	r1, r4
 8001e78:	f7fe fe06 	bl	8000a88 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
	  		sprintf(mes, "%.2f,%.2f,%.2f\n", temp, inputSpeed, outputPWM);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7fe fad1 	bl	8000428 <__aeabi_f2d>
 8001e86:	4605      	mov	r5, r0
 8001e88:	460e      	mov	r6, r1
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001e8c:	cb18      	ldmia	r3, {r3, r4}
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e90:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001e94:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001e98:	e9cd 3400 	strd	r3, r4, [sp]
 8001e9c:	462a      	mov	r2, r5
 8001e9e:	4633      	mov	r3, r6
 8001ea0:	4914      	ldr	r1, [pc, #80]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ea4:	f003 f9fa 	bl	800529c <siprintf>
	  		HAL_UART_Transmit(&huart3, mes, strlen(mes), 10);
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001eaa:	f7fe f951 	bl	8000150 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	4910      	ldr	r1, [pc, #64]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001eb8:	f002 fc03 	bl	80046c2 <HAL_UART_Transmit>
	  	}

	  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec0:	480f      	ldr	r0, [pc, #60]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001ec2:	f000 fefa 	bl	8002cba <HAL_GPIO_TogglePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec6:	b662      	cpsie	i
		__enable_irq();
  }
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	20000310 	.word	0x20000310
 8001ed4:	20000200 	.word	0x20000200
 8001ed8:	20000204 	.word	0x20000204
 8001edc:	20000358 	.word	0x20000358
 8001ee0:	200001fc 	.word	0x200001fc
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	49742400 	.word	0x49742400
 8001eec:	20000208 	.word	0x20000208
 8001ef0:	20000228 	.word	0x20000228
 8001ef4:	08006a9c 	.word	0x08006a9c
 8001ef8:	20000210 	.word	0x20000210
 8001efc:	20000284 	.word	0x20000284
 8001f00:	40011000 	.word	0x40011000

08001f04 <cmdHBridge>:
void cmdHBridge(short pwmVal){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]

	if(pwmVal < 0){
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da10      	bge.n	8001f38 <cmdHBridge+0x34>
		HAL_GPIO_WritePin(GPIOA, IN1_Pin, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2120      	movs	r1, #32
 8001f1a:	481a      	ldr	r0, [pc, #104]	; (8001f84 <cmdHBridge+0x80>)
 8001f1c:	f000 feb5 	bl	8002c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN2_Pin, 1);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2110      	movs	r1, #16
 8001f24:	4817      	ldr	r0, [pc, #92]	; (8001f84 <cmdHBridge+0x80>)
 8001f26:	f000 feb0 	bl	8002c8a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, -pwmVal);
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	425a      	negs	r2, r3
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <cmdHBridge+0x84>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
	else {
		HAL_GPIO_WritePin(GPIOA, IN1_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, IN2_Pin, 0);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
	}
}
 8001f36:	e021      	b.n	8001f7c <cmdHBridge+0x78>
	}else if(pwmVal > 0){
 8001f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dd0f      	ble.n	8001f60 <cmdHBridge+0x5c>
		HAL_GPIO_WritePin(GPIOA, IN1_Pin, 1);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2120      	movs	r1, #32
 8001f44:	480f      	ldr	r0, [pc, #60]	; (8001f84 <cmdHBridge+0x80>)
 8001f46:	f000 fea0 	bl	8002c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN2_Pin, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <cmdHBridge+0x80>)
 8001f50:	f000 fe9b 	bl	8002c8a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwmVal);
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <cmdHBridge+0x84>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f5e:	e00d      	b.n	8001f7c <cmdHBridge+0x78>
		HAL_GPIO_WritePin(GPIOA, IN1_Pin, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2120      	movs	r1, #32
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <cmdHBridge+0x80>)
 8001f66:	f000 fe90 	bl	8002c8a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, IN2_Pin, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <cmdHBridge+0x80>)
 8001f70:	f000 fe8b 	bl	8002c8a <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <cmdHBridge+0x84>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40010800 	.word	0x40010800
 8001f88:	200002c8 	.word	0x200002c8

08001f8c <initPwm>:
void initPwm(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001f90:	2100      	movs	r1, #0
 8001f92:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <initPwm+0x18>)
 8001f94:	f001 fbc0 	bl	8003718 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001f98:	4803      	ldr	r0, [pc, #12]	; (8001fa8 <initPwm+0x1c>)
 8001f9a:	f001 fb13 	bl	80035c4 <HAL_TIM_Base_Start_IT>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200002c8 	.word	0x200002c8
 8001fa8:	20000360 	.word	0x20000360

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb2:	e7fe      	b.n	8001fb2 <Error_Handler+0x6>

08001fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_MspInit+0x5c>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4a14      	ldr	r2, [pc, #80]	; (8002010 <HAL_MspInit+0x5c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6193      	str	r3, [r2, #24]
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_MspInit+0x5c>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_MspInit+0x5c>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_MspInit+0x5c>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_MspInit+0x5c>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_MspInit+0x60>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_MspInit+0x60>)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000

08002018 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_TIM_Encoder_MspInit+0x74>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d124      	bne.n	8002082 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 800203e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6193      	str	r3, [r2, #24]
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_TIM_Encoder_MspInit+0x78>)
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002068:	f44f 7340 	mov.w	r3, #768	; 0x300
 800206c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	4619      	mov	r1, r3
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_TIM_Encoder_MspInit+0x7c>)
 800207e:	f000 fc93 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40012c00 	.word	0x40012c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40010800 	.word	0x40010800

08002098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d114      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	201c      	movs	r0, #28
 80020c8:	f000 fad7 	bl	800267a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020cc:	201c      	movs	r0, #28
 80020ce:	f000 faf0 	bl	80026b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020d2:	e010      	b.n	80020f6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_TIM_Base_MspInit+0x6c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10b      	bne.n	80020f6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_TIM_Base_MspInit+0x68>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40000400 	.word	0x40000400

08002108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <HAL_TIM_MspPostInit+0x58>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d117      	bne.n	8002158 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_TIM_MspPostInit+0x5c>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_TIM_MspPostInit+0x5c>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_TIM_MspPostInit+0x5c>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = pwm_Pin;
 8002140:	2340      	movs	r3, #64	; 0x40
 8002142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2302      	movs	r3, #2
 800214a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pwm_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4619      	mov	r1, r3
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <HAL_TIM_MspPostInit+0x60>)
 8002154:	f000 fc28 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40000400 	.word	0x40000400
 8002164:	40021000 	.word	0x40021000
 8002168:	40010800 	.word	0x40010800

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0318 	add.w	r3, r7, #24
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <HAL_UART_MspInit+0x144>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d156      	bne.n	800223a <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218c:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <HAL_UART_MspInit+0x148>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_UART_MspInit+0x148>)
 8002192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002196:	61d3      	str	r3, [r2, #28]
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_UART_MspInit+0x148>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <HAL_UART_MspInit+0x148>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4a42      	ldr	r2, [pc, #264]	; (80022b4 <HAL_UART_MspInit+0x148>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	6193      	str	r3, [r2, #24]
 80021b0:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_UART_MspInit+0x148>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021bc:	2304      	movs	r3, #4
 80021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	4619      	mov	r1, r3
 80021ce:	483a      	ldr	r0, [pc, #232]	; (80022b8 <HAL_UART_MspInit+0x14c>)
 80021d0:	f000 fbea 	bl	80029a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021d4:	2308      	movs	r3, #8
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0318 	add.w	r3, r7, #24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4834      	ldr	r0, [pc, #208]	; (80022b8 <HAL_UART_MspInit+0x14c>)
 80021e8:	f000 fbde 	bl	80029a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80021ec:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_UART_MspInit+0x150>)
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_UART_MspInit+0x154>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_UART_MspInit+0x150>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_UART_MspInit+0x150>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002200:	2280      	movs	r2, #128	; 0x80
 8002202:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_UART_MspInit+0x150>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800221c:	4827      	ldr	r0, [pc, #156]	; (80022bc <HAL_UART_MspInit+0x150>)
 800221e:	f000 fa63 	bl	80026e8 <HAL_DMA_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002228:	f7ff fec0 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_UART_MspInit+0x150>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002238:	e036      	b.n	80022a8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_UART_MspInit+0x158>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d131      	bne.n	80022a8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0x148>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_UART_MspInit+0x148>)
 800224a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224e:	61d3      	str	r3, [r2, #28]
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_UART_MspInit+0x148>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_UART_MspInit+0x148>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_UART_MspInit+0x148>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_UART_MspInit+0x148>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	4619      	mov	r1, r3
 8002288:	480f      	ldr	r0, [pc, #60]	; (80022c8 <HAL_UART_MspInit+0x15c>)
 800228a:	f000 fb8d 	bl	80029a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800228e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	4619      	mov	r1, r3
 80022a2:	4809      	ldr	r0, [pc, #36]	; (80022c8 <HAL_UART_MspInit+0x15c>)
 80022a4:	f000 fb80 	bl	80029a8 <HAL_GPIO_Init>
}
 80022a8:	bf00      	nop
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40004400 	.word	0x40004400
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	20000240 	.word	0x20000240
 80022c0:	4002006c 	.word	0x4002006c
 80022c4:	40004800 	.word	0x40004800
 80022c8:	40010c00 	.word	0x40010c00

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002312:	f000 f8bf 	bl	8002494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA1_Channel6_IRQHandler+0x10>)
 8002322:	f000 fa3b 	bl	800279c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000240 	.word	0x20000240

08002330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM2_IRQHandler+0x10>)
 8002336:	f001 fbc0 	bl	8003aba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000360 	.word	0x20000360

08002344 <_sbrk>:
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
 8002374:	f002 fb10 	bl	8004998 <__errno>
 8002378:	4602      	mov	r2, r0
 800237a:	230c      	movs	r3, #12
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20005000 	.word	0x20005000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	20000234 	.word	0x20000234
 80023ac:	20000470 	.word	0x20000470

080023b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023e2:	f7ff ffe5 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f002 fadd 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7ff f99d 	bl	8001728 <main>
  bx lr
 80023ee:	4770      	bx	lr
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023f8:	08006d40 	.word	0x08006d40
  ldr r2, =_sbss
 80023fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002400:	20000470 	.word	0x20000470

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_Init+0x28>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_Init+0x28>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 f923 	bl	8002664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	2000      	movs	r0, #0
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fdc6 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f93b 	bl	80026ce <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 f903 	bl	800267a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000004 	.word	0x20000004
 800248c:	2000000c 	.word	0x2000000c
 8002490:	20000008 	.word	0x20000008

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_IncTick+0x1c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_IncTick+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <HAL_IncTick+0x20>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	20000468 	.word	0x20000468

080024b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <HAL_GetTick+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000468 	.word	0x20000468

080024cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4906      	ldr	r1, [pc, #24]	; (8002564 <__NVIC_EnableIRQ+0x34>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002630:	d301      	bcc.n	8002636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002632:	2301      	movs	r3, #1
 8002634:	e00f      	b.n	8002656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <SysTick_Config+0x40>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3b01      	subs	r3, #1
 800263c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800263e:	210f      	movs	r1, #15
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	f7ff ff90 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <SysTick_Config+0x40>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <SysTick_Config+0x40>)
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff2d 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800268c:	f7ff ff42 	bl	8002514 <__NVIC_GetPriorityGrouping>
 8002690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	6978      	ldr	r0, [r7, #20]
 8002698:	f7ff ff90 	bl	80025bc <NVIC_EncodePriority>
 800269c:	4602      	mov	r2, r0
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff5f 	bl	8002568 <__NVIC_SetPriority>
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff35 	bl	8002530 <__NVIC_EnableIRQ>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ffa2 	bl	8002620 <SysTick_Config>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e043      	b.n	8002786 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_DMA_Init+0xa8>)
 8002706:	4413      	add	r3, r2
 8002708:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_DMA_Init+0xac>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	009a      	lsls	r2, r3, #2
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMA_Init+0xb0>)
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002732:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	bffdfff8 	.word	0xbffdfff8
 8002794:	cccccccd 	.word	0xcccccccd
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2204      	movs	r2, #4
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d04f      	beq.n	8002864 <HAL_DMA_IRQHandler+0xc8>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d04a      	beq.n	8002864 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d107      	bne.n	80027ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0204 	bic.w	r2, r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a66      	ldr	r2, [pc, #408]	; (800298c <HAL_DMA_IRQHandler+0x1f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d029      	beq.n	800284a <HAL_DMA_IRQHandler+0xae>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a65      	ldr	r2, [pc, #404]	; (8002990 <HAL_DMA_IRQHandler+0x1f4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d022      	beq.n	8002846 <HAL_DMA_IRQHandler+0xaa>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a63      	ldr	r2, [pc, #396]	; (8002994 <HAL_DMA_IRQHandler+0x1f8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d01a      	beq.n	8002840 <HAL_DMA_IRQHandler+0xa4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_DMA_IRQHandler+0x1fc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d012      	beq.n	800283a <HAL_DMA_IRQHandler+0x9e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a60      	ldr	r2, [pc, #384]	; (800299c <HAL_DMA_IRQHandler+0x200>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x98>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_DMA_IRQHandler+0x204>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d102      	bne.n	800282e <HAL_DMA_IRQHandler+0x92>
 8002828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800282c:	e00e      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800282e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002832:	e00b      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002838:	e008      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800283a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283e:	e005      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002844:	e002      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 8002846:	2340      	movs	r3, #64	; 0x40
 8002848:	e000      	b.n	800284c <HAL_DMA_IRQHandler+0xb0>
 800284a:	2304      	movs	r3, #4
 800284c:	4a55      	ldr	r2, [pc, #340]	; (80029a4 <HAL_DMA_IRQHandler+0x208>)
 800284e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8094 	beq.w	8002982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002862:	e08e      	b.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2202      	movs	r2, #2
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d056      	beq.n	8002922 <HAL_DMA_IRQHandler+0x186>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d051      	beq.n	8002922 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 020a 	bic.w	r2, r2, #10
 800289a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a38      	ldr	r2, [pc, #224]	; (800298c <HAL_DMA_IRQHandler+0x1f0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d029      	beq.n	8002902 <HAL_DMA_IRQHandler+0x166>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a37      	ldr	r2, [pc, #220]	; (8002990 <HAL_DMA_IRQHandler+0x1f4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d022      	beq.n	80028fe <HAL_DMA_IRQHandler+0x162>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <HAL_DMA_IRQHandler+0x1f8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01a      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x15c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_DMA_IRQHandler+0x1fc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d012      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x156>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_DMA_IRQHandler+0x200>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x150>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_DMA_IRQHandler+0x204>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d102      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x14a>
 80028e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e4:	e00e      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ea:	e00b      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028f0:	e008      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028f6:	e005      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028fc:	e002      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 80028fe:	2320      	movs	r3, #32
 8002900:	e000      	b.n	8002904 <HAL_DMA_IRQHandler+0x168>
 8002902:	2302      	movs	r3, #2
 8002904:	4a27      	ldr	r2, [pc, #156]	; (80029a4 <HAL_DMA_IRQHandler+0x208>)
 8002906:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d034      	beq.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002920:	e02f      	b.n	8002982 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2208      	movs	r2, #8
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d023      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020e 	bic.w	r2, r2, #14
 800294a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d004      	beq.n	8002984 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
    }
  }
  return;
 8002982:	bf00      	nop
 8002984:	bf00      	nop
}
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40020008 	.word	0x40020008
 8002990:	4002001c 	.word	0x4002001c
 8002994:	40020030 	.word	0x40020030
 8002998:	40020044 	.word	0x40020044
 800299c:	40020058 	.word	0x40020058
 80029a0:	4002006c 	.word	0x4002006c
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b08b      	sub	sp, #44	; 0x2c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ba:	e127      	b.n	8002c0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029bc:	2201      	movs	r2, #1
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8116 	bne.w	8002c06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b12      	cmp	r3, #18
 80029e0:	d034      	beq.n	8002a4c <HAL_GPIO_Init+0xa4>
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d80d      	bhi.n	8002a02 <HAL_GPIO_Init+0x5a>
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d02b      	beq.n	8002a42 <HAL_GPIO_Init+0x9a>
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d804      	bhi.n	80029f8 <HAL_GPIO_Init+0x50>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d01c      	beq.n	8002a30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029f6:	e048      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d043      	beq.n	8002a84 <HAL_GPIO_Init+0xdc>
 80029fc:	2b11      	cmp	r3, #17
 80029fe:	d01b      	beq.n	8002a38 <HAL_GPIO_Init+0x90>
          break;
 8002a00:	e043      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a02:	4a89      	ldr	r2, [pc, #548]	; (8002c28 <HAL_GPIO_Init+0x280>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d026      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
 8002a08:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <HAL_GPIO_Init+0x280>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d806      	bhi.n	8002a1c <HAL_GPIO_Init+0x74>
 8002a0e:	4a87      	ldr	r2, [pc, #540]	; (8002c2c <HAL_GPIO_Init+0x284>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d020      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
 8002a14:	4a86      	ldr	r2, [pc, #536]	; (8002c30 <HAL_GPIO_Init+0x288>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
          break;
 8002a1a:	e036      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a1c:	4a85      	ldr	r2, [pc, #532]	; (8002c34 <HAL_GPIO_Init+0x28c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d019      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
 8002a22:	4a85      	ldr	r2, [pc, #532]	; (8002c38 <HAL_GPIO_Init+0x290>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d016      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
 8002a28:	4a84      	ldr	r2, [pc, #528]	; (8002c3c <HAL_GPIO_Init+0x294>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0xae>
          break;
 8002a2e:	e02c      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	623b      	str	r3, [r7, #32]
          break;
 8002a36:	e028      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e023      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	3308      	adds	r3, #8
 8002a48:	623b      	str	r3, [r7, #32]
          break;
 8002a4a:	e01e      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	330c      	adds	r3, #12
 8002a52:	623b      	str	r3, [r7, #32]
          break;
 8002a54:	e019      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	623b      	str	r3, [r7, #32]
          break;
 8002a62:	e012      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a6c:	2308      	movs	r3, #8
 8002a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	611a      	str	r2, [r3, #16]
          break;
 8002a76:	e008      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	615a      	str	r2, [r3, #20]
          break;
 8002a82:	e002      	b.n	8002a8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
          break;
 8002a88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2bff      	cmp	r3, #255	; 0xff
 8002a8e:	d801      	bhi.n	8002a94 <HAL_GPIO_Init+0xec>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	e001      	b.n	8002a98 <HAL_GPIO_Init+0xf0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2bff      	cmp	r3, #255	; 0xff
 8002a9e:	d802      	bhi.n	8002aa6 <HAL_GPIO_Init+0xfe>
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x104>
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	3b08      	subs	r3, #8
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	401a      	ands	r2, r3
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8096 	beq.w	8002c06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ada:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_GPIO_Init+0x298>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_GPIO_Init+0x298>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6193      	str	r3, [r2, #24]
 8002ae6:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_GPIO_Init+0x298>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002af2:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <HAL_GPIO_Init+0x29c>)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	220f      	movs	r2, #15
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <HAL_GPIO_Init+0x2a0>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x19e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <HAL_GPIO_Init+0x2a4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x19a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <HAL_GPIO_Init+0x2a8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x196>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x2ac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x192>
 8002b36:	2303      	movs	r3, #3
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x1a0>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x1a0>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x1a0>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x1a0>
 8002b46:	2300      	movs	r3, #0
 8002b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b58:	493a      	ldr	r1, [pc, #232]	; (8002c44 <HAL_GPIO_Init+0x29c>)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4938      	ldr	r1, [pc, #224]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
 8002b7e:	e006      	b.n	8002b8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b80:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	4933      	ldr	r1, [pc, #204]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	492e      	ldr	r1, [pc, #184]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	e006      	b.n	8002bb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	4929      	ldr	r1, [pc, #164]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	4924      	ldr	r1, [pc, #144]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd0:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	491f      	ldr	r1, [pc, #124]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	491a      	ldr	r1, [pc, #104]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4915      	ldr	r1, [pc, #84]	; (8002c58 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f47f aed0 	bne.w	80029bc <HAL_GPIO_Init+0x14>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	372c      	adds	r7, #44	; 0x2c
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	10210000 	.word	0x10210000
 8002c2c:	10110000 	.word	0x10110000
 8002c30:	10120000 	.word	0x10120000
 8002c34:	10310000 	.word	0x10310000
 8002c38:	10320000 	.word	0x10320000
 8002c3c:	10220000 	.word	0x10220000
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010800 	.word	0x40010800
 8002c4c:	40010c00 	.word	0x40010c00
 8002c50:	40011000 	.word	0x40011000
 8002c54:	40011400 	.word	0x40011400
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e001      	b.n	8002c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	807b      	strh	r3, [r7, #2]
 8002c96:	4613      	mov	r3, r2
 8002c98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c9a:	787b      	ldrb	r3, [r7, #1]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ca6:	e003      	b.n	8002cb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	041a      	lsls	r2, r3, #16
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	611a      	str	r2, [r3, #16]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ccc:	887a      	ldrh	r2, [r7, #2]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	041a      	lsls	r2, r3, #16
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	400b      	ands	r3, r1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	611a      	str	r2, [r3, #16]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e26c      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
 8002d24:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d06c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x12c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e246      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x76>
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7f      	ldr	r2, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbc>
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fb76 	bl	80024b8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7ff fb72 	bl	80024b8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1fa      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe4>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fb62 	bl	80024b8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fb5e 	bl	80024b8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1e6      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x10c>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1ba      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff fb17 	bl	80024b8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7ff fb13 	bl	80024b8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e19b      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4927      	ldr	r1, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7ff faf6 	bl	80024b8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7ff faf2 	bl	80024b8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e17a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7ff fad6 	bl	80024b8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7ff fad2 	bl	80024b8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e15a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 fada 	bl	80034e8 <RCC_Delay>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fabc 	bl	80024b8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7ff fab8 	bl	80024b8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e140      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	42420000 	.word	0x42420000
 8002f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b9e      	ldr	r3, [pc, #632]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a93      	ldr	r2, [pc, #588]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b91      	ldr	r3, [pc, #580]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7ff fa79 	bl	80024b8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7ff fa75 	bl	80024b8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0fd      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x356>
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a6c      	ldr	r2, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a69      	ldr	r2, [pc, #420]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7ff fa29 	bl	80024b8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff fa25 	bl	80024b8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0ab      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x37e>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7ff fa13 	bl	80024b8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7ff fa0f 	bl	80024b8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e095      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8081 	beq.w	80031d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d061      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d146      	bne.n	8003176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff f9e3 	bl	80024b8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7ff f9df 	bl	80024b8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e067      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	492d      	ldr	r1, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a19      	ldr	r1, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	4927      	ldr	r1, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7ff f9b3 	bl	80024b8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7ff f9af 	bl	80024b8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e037      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
 8003174:	e02f      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff f99c 	bl	80024b8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7ff f998 	bl	80024b8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e020      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x498>
 80031a2:	e018      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e013      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420060 	.word	0x42420060

080031ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0d0      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4965      	ldr	r1, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800326a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d040      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e073      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4936      	ldr	r1, [pc, #216]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7ff f8ec 	bl	80024b8 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7ff f8e8 	bl	80024b8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e053      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4601      	mov	r1, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	5cd3      	ldrb	r3, [r2, r3]
 800338e:	fa21 f303 	lsr.w	r3, r1, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1d0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f84a 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	08006ac0 	.word	0x08006ac0
 80033b8:	20000004 	.word	0x20000004
 80033bc:	20000008 	.word	0x20000008

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b490      	push	{r4, r7}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c8:	1d3c      	adds	r4, r7, #4
 80033ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x46>
 80033fe:	e02d      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e02d      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003412:	4413      	add	r3, r2
 8003414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c5b      	lsrs	r3, r3, #17
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003432:	4413      	add	r3, r2
 8003434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 800343e:	fb02 f203 	mul.w	r2, r2, r3
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e004      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	623b      	str	r3, [r7, #32]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 800345e:	623b      	str	r3, [r7, #32]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6a3b      	ldr	r3, [r7, #32]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc90      	pop	{r4, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	08006aac 	.word	0x08006aac
 8003474:	08006abc 	.word	0x08006abc
 8003478:	40021000 	.word	0x40021000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	003d0900 	.word	0x003d0900

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b02      	ldr	r3, [pc, #8]	; (8003494 <HAL_RCC_GetHCLKFreq+0x10>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800349c:	f7ff fff2 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034a0:	4601      	mov	r1, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4a03      	ldr	r2, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ae:	5cd3      	ldrb	r3, [r2, r3]
 80034b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08006ad0 	.word	0x08006ad0

080034c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c4:	f7ff ffde 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034c8:	4601      	mov	r1, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0adb      	lsrs	r3, r3, #11
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08006ad0 	.word	0x08006ad0

080034e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <RCC_Delay+0x34>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <RCC_Delay+0x38>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	0a5b      	lsrs	r3, r3, #9
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003504:	bf00      	nop
  }
  while (Delay --);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	60fa      	str	r2, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f9      	bne.n	8003504 <RCC_Delay+0x1c>
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000004 	.word	0x20000004
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fda4 	bl	8002098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fd4c 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e03a      	b.n	8003652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <HAL_TIM_Base_Start_IT+0x98>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <HAL_TIM_Base_Start_IT+0x9c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Start_IT+0x58>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_TIM_Base_Start_IT+0xa0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d111      	bne.n	8003640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d010      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	e007      	b.n	8003650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800

08003668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e041      	b.n	80036fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f839 	bl	8003706 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fcaa 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_TIM_PWM_Start+0x24>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e022      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d109      	bne.n	8003756 <HAL_TIM_PWM_Start+0x3e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	e015      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d109      	bne.n	8003770 <HAL_TIM_PWM_Start+0x58>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e008      	b.n	8003782 <HAL_TIM_PWM_Start+0x6a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e05e      	b.n	8003848 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d104      	bne.n	800379a <HAL_TIM_PWM_Start+0x82>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	e013      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d104      	bne.n	80037aa <HAL_TIM_PWM_Start+0x92>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a8:	e00b      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d104      	bne.n	80037ba <HAL_TIM_PWM_Start+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037b8:	e003      	b.n	80037c2 <HAL_TIM_PWM_Start+0xaa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2201      	movs	r2, #1
 80037c8:	6839      	ldr	r1, [r7, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fe98 	bl	8004500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <HAL_TIM_PWM_Start+0x138>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d107      	bne.n	80037ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_PWM_Start+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIM_PWM_Start+0xfa>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d009      	beq.n	8003812 <HAL_TIM_PWM_Start+0xfa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a14      	ldr	r2, [pc, #80]	; (8003854 <HAL_TIM_PWM_Start+0x13c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIM_PWM_Start+0xfa>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_TIM_PWM_Start+0x140>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d010      	beq.n	8003846 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	e007      	b.n	8003846 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800

0800385c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e093      	b.n	8003998 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fe fbc7 	bl	8002018 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a0:	f023 0307 	bic.w	r3, r3, #7
 80038a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fba5 	bl	8004000 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	4313      	orrs	r3, r2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038fc:	f023 030c 	bic.w	r3, r3, #12
 8003900:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4313      	orrs	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	011a      	lsls	r2, r3, #4
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	031b      	lsls	r3, r3, #12
 800392c:	4313      	orrs	r3, r2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	4313      	orrs	r3, r2
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d110      	bne.n	80039f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d6:	7b7b      	ldrb	r3, [r7, #13]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e068      	b.n	8003ab2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f0:	e031      	b.n	8003a56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d110      	bne.n	8003a1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f8:	7bbb      	ldrb	r3, [r7, #14]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039fe:	7b3b      	ldrb	r3, [r7, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e054      	b.n	8003ab2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	e01d      	b.n	8003a56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d108      	bne.n	8003a32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a20:	7bbb      	ldrb	r3, [r7, #14]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a26:	7b7b      	ldrb	r3, [r7, #13]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d102      	bne.n	8003a32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a2c:	7b3b      	ldrb	r3, [r7, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d001      	beq.n	8003a36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e03d      	b.n	8003ab2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_TIM_Encoder_Start+0xc2>
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d008      	beq.n	8003a72 <HAL_TIM_Encoder_Start+0xd2>
 8003a60:	e00f      	b.n	8003a82 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fd48 	bl	8004500 <TIM_CCxChannelCmd>
      break;
 8003a70:	e016      	b.n	8003aa0 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fd40 	bl	8004500 <TIM_CCxChannelCmd>
      break;
 8003a80:	e00e      	b.n	8003aa0 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fd38 	bl	8004500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	2104      	movs	r1, #4
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fd31 	bl	8004500 <TIM_CCxChannelCmd>
      break;
 8003a9e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d122      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d11b      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0202 	mvn.w	r2, #2
 8003ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa63 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003b02:	e005      	b.n	8003b10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa56 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa65 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d122      	bne.n	8003b6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d11b      	bne.n	8003b6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0204 	mvn.w	r2, #4
 8003b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fa39 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003b56:	e005      	b.n	8003b64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa2c 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa3b 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d122      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d11b      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0208 	mvn.w	r2, #8
 8003b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa0f 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003baa:	e005      	b.n	8003bb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fa02 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa11 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d122      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b10      	cmp	r3, #16
 8003bd8:	d11b      	bne.n	8003c12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0210 	mvn.w	r2, #16
 8003be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2208      	movs	r2, #8
 8003be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9e5 	bl	8003fc8 <HAL_TIM_IC_CaptureCallback>
 8003bfe:	e005      	b.n	8003c0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f9d8 	bl	8003fb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f9e7 	bl	8003fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10e      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d107      	bne.n	8003c3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f06f 0201 	mvn.w	r2, #1
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fe f8d3 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d10e      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	2b80      	cmp	r3, #128	; 0x80
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fcd6 	bl	8004616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f9ab 	bl	8003fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0220 	mvn.w	r2, #32
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fca1 	bl	8004604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0ac      	b.n	8003e40 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	f200 809f 	bhi.w	8003e34 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e35 	.word	0x08003e35
 8003d04:	08003e35 	.word	0x08003e35
 8003d08:	08003e35 	.word	0x08003e35
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003e35 	.word	0x08003e35
 8003d14:	08003e35 	.word	0x08003e35
 8003d18:	08003e35 	.word	0x08003e35
 8003d1c:	08003db3 	.word	0x08003db3
 8003d20:	08003e35 	.word	0x08003e35
 8003d24:	08003e35 	.word	0x08003e35
 8003d28:	08003e35 	.word	0x08003e35
 8003d2c:	08003df3 	.word	0x08003df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f9c4 	bl	80040c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e062      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa0a 	bl	8004190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e041      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa53 	bl	8004264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e021      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fa9d 	bl	8004338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x18>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0a6      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x166>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d067      	beq.n	8003f68 <HAL_TIM_ConfigClockSource+0x120>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d80b      	bhi.n	8003eb4 <HAL_TIM_ConfigClockSource+0x6c>
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d073      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0x140>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d802      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0x62>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d06f      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ea8:	e078      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d06c      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0x140>
 8003eae:	2b30      	cmp	r3, #48	; 0x30
 8003eb0:	d06a      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003eb2:	e073      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0x8c>
 8003eb8:	2b70      	cmp	r3, #112	; 0x70
 8003eba:	d804      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x7e>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d033      	beq.n	8003f28 <HAL_TIM_ConfigClockSource+0xe0>
 8003ec0:	2b60      	cmp	r3, #96	; 0x60
 8003ec2:	d041      	beq.n	8003f48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ec4:	e06a      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	d066      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x152>
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed0:	d017      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ed2:	e063      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f000 faed 	bl	80044c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ef6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
      break;
 8003f00:	e04c      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f000 fad6 	bl	80044c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f24:	609a      	str	r2, [r3, #8]
      break;
 8003f26:	e039      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f000 fa4d 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2150      	movs	r1, #80	; 0x50
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 faa4 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f46:	e029      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f000 fa6b 	bl	8004430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2160      	movs	r1, #96	; 0x60
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fa94 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f66:	e019      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	461a      	mov	r2, r3
 8003f76:	f000 fa2d 	bl	80043d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2140      	movs	r1, #64	; 0x40
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fa84 	bl	800448e <TIM_ITRx_SetConfig>
      break;
 8003f86:	e009      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fa7b 	bl	800448e <TIM_ITRx_SetConfig>
        break;
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
	...

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a26      	ldr	r2, [pc, #152]	; (80040bc <TIM_Base_SetConfig+0xbc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x30>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <TIM_Base_SetConfig+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00b      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d007      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <TIM_Base_SetConfig+0xbc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_Base_SetConfig+0x62>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <TIM_Base_SetConfig+0xc0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d108      	bne.n	8004074 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <TIM_Base_SetConfig+0xb8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	615a      	str	r2, [r3, #20]
}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800

080040c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d111      	bne.n	8004166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40012c00 	.word	0x40012c00

08004190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <TIM_OC2_SetConfig+0xd0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10d      	bne.n	800420c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a14      	ldr	r2, [pc, #80]	; (8004260 <TIM_OC2_SetConfig+0xd0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr
 8004260:	40012c00 	.word	0x40012c00

08004264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <TIM_OC3_SetConfig+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10d      	bne.n	80042de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a14      	ldr	r2, [pc, #80]	; (8004334 <TIM_OC3_SetConfig+0xd0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d113      	bne.n	800430e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	621a      	str	r2, [r3, #32]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00

08004338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	021b      	lsls	r3, r3, #8
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	031b      	lsls	r3, r3, #12
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <TIM_OC4_SetConfig+0x98>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d109      	bne.n	80043ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800439e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr
 80043d0:	40012c00 	.word	0x40012c00

080043d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0201 	bic.w	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f023 030a 	bic.w	r3, r3, #10
 8004410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 0210 	bic.w	r2, r3, #16
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800446c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f043 0307 	orr.w	r3, r3, #7
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b087      	sub	sp, #28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
 80044ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2201      	movs	r2, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	43db      	mvns	r3, r3
 8004522:	401a      	ands	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1a      	ldr	r2, [r3, #32]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	fa01 f303 	lsl.w	r3, r1, r3
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800455c:	2302      	movs	r3, #2
 800455e:	e046      	b.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d009      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800

08004604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e03f      	b.n	80046ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fd fd8c 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	; 0x24
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800466a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f905 	bl	800487c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b08a      	sub	sp, #40	; 0x28
 80046c6:	af02      	add	r7, sp, #8
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d17c      	bne.n	80047dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_UART_Transmit+0x2c>
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e075      	b.n	80047de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_UART_Transmit+0x3e>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e06e      	b.n	80047de <HAL_UART_Transmit+0x11c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2221      	movs	r2, #33	; 0x21
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004716:	f7fd fecf 	bl	80024b8 <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d108      	bne.n	8004744 <HAL_UART_Transmit+0x82>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e003      	b.n	800474c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004754:	e02a      	b.n	80047ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2200      	movs	r2, #0
 800475e:	2180      	movs	r1, #128	; 0x80
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f840 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e036      	b.n	80047de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3302      	adds	r3, #2
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e007      	b.n	800479e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3301      	adds	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1cf      	bne.n	8004756 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f810 	bl	80047e6 <UART_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e006      	b.n	80047de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4613      	mov	r3, r2
 80047f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f6:	e02c      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d028      	beq.n	8004852 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0x30>
 8004806:	f7fd fe57 	bl	80024b8 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	429a      	cmp	r2, r3
 8004814:	d21d      	bcs.n	8004852 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004824:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e00f      	b.n	8004872 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d0c3      	beq.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048b6:	f023 030c 	bic.w	r3, r3, #12
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	; (8004990 <UART_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe fdec 	bl	80034c0 <HAL_RCC_GetPCLK2Freq>
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe fdd4 	bl	8003498 <HAL_RCC_GetPCLK1Freq>
 80048f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4a22      	ldr	r2, [pc, #136]	; (8004994 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	0119      	lsls	r1, r3, #4
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <UART_SetConfig+0x118>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a15      	ldr	r2, [pc, #84]	; (8004994 <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004948:	4419      	add	r1, r3
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	; 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	; 0x32
 8004974:	4a07      	ldr	r2, [pc, #28]	; (8004994 <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	440a      	add	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40013800 	.word	0x40013800
 8004994:	51eb851f 	.word	0x51eb851f

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000010 	.word	0x20000010

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	2500      	movs	r5, #0
 80049a8:	4e0c      	ldr	r6, [pc, #48]	; (80049dc <__libc_init_array+0x38>)
 80049aa:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049ac:	1ba4      	subs	r4, r4, r6
 80049ae:	10a4      	asrs	r4, r4, #2
 80049b0:	42a5      	cmp	r5, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	f002 f85e 	bl	8006a74 <_init>
 80049b8:	2500      	movs	r5, #0
 80049ba:	4e0a      	ldr	r6, [pc, #40]	; (80049e4 <__libc_init_array+0x40>)
 80049bc:	4c0a      	ldr	r4, [pc, #40]	; (80049e8 <__libc_init_array+0x44>)
 80049be:	1ba4      	subs	r4, r4, r6
 80049c0:	10a4      	asrs	r4, r4, #2
 80049c2:	42a5      	cmp	r5, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049cc:	4798      	blx	r3
 80049ce:	3501      	adds	r5, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049d6:	4798      	blx	r3
 80049d8:	3501      	adds	r5, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08006d38 	.word	0x08006d38
 80049e0:	08006d38 	.word	0x08006d38
 80049e4:	08006d38 	.word	0x08006d38
 80049e8:	08006d3c 	.word	0x08006d3c

080049ec <memset>:
 80049ec:	4603      	mov	r3, r0
 80049ee:	4402      	add	r2, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <__cvt>:
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a02:	461e      	mov	r6, r3
 8004a04:	bfbb      	ittet	lt
 8004a06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a0a:	461e      	movlt	r6, r3
 8004a0c:	2300      	movge	r3, #0
 8004a0e:	232d      	movlt	r3, #45	; 0x2d
 8004a10:	b088      	sub	sp, #32
 8004a12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a14:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a18:	f027 0720 	bic.w	r7, r7, #32
 8004a1c:	2f46      	cmp	r7, #70	; 0x46
 8004a1e:	4614      	mov	r4, r2
 8004a20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a22:	700b      	strb	r3, [r1, #0]
 8004a24:	d004      	beq.n	8004a30 <__cvt+0x34>
 8004a26:	2f45      	cmp	r7, #69	; 0x45
 8004a28:	d100      	bne.n	8004a2c <__cvt+0x30>
 8004a2a:	3501      	adds	r5, #1
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e000      	b.n	8004a32 <__cvt+0x36>
 8004a30:	2303      	movs	r3, #3
 8004a32:	aa07      	add	r2, sp, #28
 8004a34:	9204      	str	r2, [sp, #16]
 8004a36:	aa06      	add	r2, sp, #24
 8004a38:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a3c:	e9cd 3500 	strd	r3, r5, [sp]
 8004a40:	4622      	mov	r2, r4
 8004a42:	4633      	mov	r3, r6
 8004a44:	f000 fcd8 	bl	80053f8 <_dtoa_r>
 8004a48:	2f47      	cmp	r7, #71	; 0x47
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	d102      	bne.n	8004a54 <__cvt+0x58>
 8004a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a50:	07db      	lsls	r3, r3, #31
 8004a52:	d526      	bpl.n	8004aa2 <__cvt+0xa6>
 8004a54:	2f46      	cmp	r7, #70	; 0x46
 8004a56:	eb08 0905 	add.w	r9, r8, r5
 8004a5a:	d111      	bne.n	8004a80 <__cvt+0x84>
 8004a5c:	f898 3000 	ldrb.w	r3, [r8]
 8004a60:	2b30      	cmp	r3, #48	; 0x30
 8004a62:	d10a      	bne.n	8004a7a <__cvt+0x7e>
 8004a64:	2200      	movs	r2, #0
 8004a66:	2300      	movs	r3, #0
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	f7fb ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004a70:	b918      	cbnz	r0, 8004a7a <__cvt+0x7e>
 8004a72:	f1c5 0501 	rsb	r5, r5, #1
 8004a76:	f8ca 5000 	str.w	r5, [sl]
 8004a7a:	f8da 3000 	ldr.w	r3, [sl]
 8004a7e:	4499      	add	r9, r3
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4620      	mov	r0, r4
 8004a86:	4631      	mov	r1, r6
 8004a88:	f7fb ff8e 	bl	80009a8 <__aeabi_dcmpeq>
 8004a8c:	b938      	cbnz	r0, 8004a9e <__cvt+0xa2>
 8004a8e:	2230      	movs	r2, #48	; 0x30
 8004a90:	9b07      	ldr	r3, [sp, #28]
 8004a92:	454b      	cmp	r3, r9
 8004a94:	d205      	bcs.n	8004aa2 <__cvt+0xa6>
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	9107      	str	r1, [sp, #28]
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e7f8      	b.n	8004a90 <__cvt+0x94>
 8004a9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	9b07      	ldr	r3, [sp, #28]
 8004aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004aa8:	eba3 0308 	sub.w	r3, r3, r8
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	b008      	add	sp, #32
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ab4 <__exponent>:
 8004ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	bfb4      	ite	lt
 8004aba:	232d      	movlt	r3, #45	; 0x2d
 8004abc:	232b      	movge	r3, #43	; 0x2b
 8004abe:	4604      	mov	r4, r0
 8004ac0:	bfb8      	it	lt
 8004ac2:	4249      	neglt	r1, r1
 8004ac4:	2909      	cmp	r1, #9
 8004ac6:	f804 2b02 	strb.w	r2, [r4], #2
 8004aca:	7043      	strb	r3, [r0, #1]
 8004acc:	dd21      	ble.n	8004b12 <__exponent+0x5e>
 8004ace:	f10d 0307 	add.w	r3, sp, #7
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	260a      	movs	r6, #10
 8004ad6:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ada:	fb06 1115 	mls	r1, r6, r5, r1
 8004ade:	2d09      	cmp	r5, #9
 8004ae0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ae4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ae8:	f103 32ff 	add.w	r2, r3, #4294967295
 8004aec:	4629      	mov	r1, r5
 8004aee:	dc09      	bgt.n	8004b04 <__exponent+0x50>
 8004af0:	3130      	adds	r1, #48	; 0x30
 8004af2:	3b02      	subs	r3, #2
 8004af4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004af8:	42bb      	cmp	r3, r7
 8004afa:	4622      	mov	r2, r4
 8004afc:	d304      	bcc.n	8004b08 <__exponent+0x54>
 8004afe:	1a10      	subs	r0, r2, r0
 8004b00:	b003      	add	sp, #12
 8004b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b04:	4613      	mov	r3, r2
 8004b06:	e7e6      	b.n	8004ad6 <__exponent+0x22>
 8004b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b0c:	f804 2b01 	strb.w	r2, [r4], #1
 8004b10:	e7f2      	b.n	8004af8 <__exponent+0x44>
 8004b12:	2330      	movs	r3, #48	; 0x30
 8004b14:	4419      	add	r1, r3
 8004b16:	7083      	strb	r3, [r0, #2]
 8004b18:	1d02      	adds	r2, r0, #4
 8004b1a:	70c1      	strb	r1, [r0, #3]
 8004b1c:	e7ef      	b.n	8004afe <__exponent+0x4a>
	...

08004b20 <_printf_float>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	b091      	sub	sp, #68	; 0x44
 8004b26:	460c      	mov	r4, r1
 8004b28:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b2a:	4693      	mov	fp, r2
 8004b2c:	461e      	mov	r6, r3
 8004b2e:	4605      	mov	r5, r0
 8004b30:	f001 fa16 	bl	8005f60 <_localeconv_r>
 8004b34:	6803      	ldr	r3, [r0, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3a:	f7fb fb09 	bl	8000150 <strlen>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	930e      	str	r3, [sp, #56]	; 0x38
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	900a      	str	r0, [sp, #40]	; 0x28
 8004b46:	3307      	adds	r3, #7
 8004b48:	f023 0307 	bic.w	r3, r3, #7
 8004b4c:	f103 0208 	add.w	r2, r3, #8
 8004b50:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b54:	f8d4 a000 	ldr.w	sl, [r4]
 8004b58:	603a      	str	r2, [r7, #0]
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b62:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b70:	4ba6      	ldr	r3, [pc, #664]	; (8004e0c <_printf_float+0x2ec>)
 8004b72:	4638      	mov	r0, r7
 8004b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b76:	f7fb ff49 	bl	8000a0c <__aeabi_dcmpun>
 8004b7a:	bb68      	cbnz	r0, 8004bd8 <_printf_float+0xb8>
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b80:	4ba2      	ldr	r3, [pc, #648]	; (8004e0c <_printf_float+0x2ec>)
 8004b82:	4638      	mov	r0, r7
 8004b84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b86:	f7fb ff23 	bl	80009d0 <__aeabi_dcmple>
 8004b8a:	bb28      	cbnz	r0, 8004bd8 <_printf_float+0xb8>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4638      	mov	r0, r7
 8004b92:	4649      	mov	r1, r9
 8004b94:	f7fb ff12 	bl	80009bc <__aeabi_dcmplt>
 8004b98:	b110      	cbz	r0, 8004ba0 <_printf_float+0x80>
 8004b9a:	232d      	movs	r3, #45	; 0x2d
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba0:	4f9b      	ldr	r7, [pc, #620]	; (8004e10 <_printf_float+0x2f0>)
 8004ba2:	4b9c      	ldr	r3, [pc, #624]	; (8004e14 <_printf_float+0x2f4>)
 8004ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ba8:	bf98      	it	ls
 8004baa:	461f      	movls	r7, r3
 8004bac:	2303      	movs	r3, #3
 8004bae:	f04f 0900 	mov.w	r9, #0
 8004bb2:	6123      	str	r3, [r4, #16]
 8004bb4:	f02a 0304 	bic.w	r3, sl, #4
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	9600      	str	r6, [sp, #0]
 8004bbc:	465b      	mov	r3, fp
 8004bbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	f000 f9e2 	bl	8004f8c <_printf_common>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	f040 8090 	bne.w	8004cee <_printf_float+0x1ce>
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	b011      	add	sp, #68	; 0x44
 8004bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd8:	463a      	mov	r2, r7
 8004bda:	464b      	mov	r3, r9
 8004bdc:	4638      	mov	r0, r7
 8004bde:	4649      	mov	r1, r9
 8004be0:	f7fb ff14 	bl	8000a0c <__aeabi_dcmpun>
 8004be4:	b110      	cbz	r0, 8004bec <_printf_float+0xcc>
 8004be6:	4f8c      	ldr	r7, [pc, #560]	; (8004e18 <_printf_float+0x2f8>)
 8004be8:	4b8c      	ldr	r3, [pc, #560]	; (8004e1c <_printf_float+0x2fc>)
 8004bea:	e7db      	b.n	8004ba4 <_printf_float+0x84>
 8004bec:	6863      	ldr	r3, [r4, #4]
 8004bee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	a80d      	add	r0, sp, #52	; 0x34
 8004bf6:	a90e      	add	r1, sp, #56	; 0x38
 8004bf8:	d140      	bne.n	8004c7c <_printf_float+0x15c>
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	f04f 0c00 	mov.w	ip, #0
 8004c02:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004c06:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	6022      	str	r2, [r4, #0]
 8004c0e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	463a      	mov	r2, r7
 8004c16:	464b      	mov	r3, r9
 8004c18:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7ff feed 	bl	80049fc <__cvt>
 8004c22:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c26:	2b47      	cmp	r3, #71	; 0x47
 8004c28:	4607      	mov	r7, r0
 8004c2a:	d109      	bne.n	8004c40 <_printf_float+0x120>
 8004c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c2e:	1cd8      	adds	r0, r3, #3
 8004c30:	db02      	blt.n	8004c38 <_printf_float+0x118>
 8004c32:	6862      	ldr	r2, [r4, #4]
 8004c34:	4293      	cmp	r3, r2
 8004c36:	dd47      	ble.n	8004cc8 <_printf_float+0x1a8>
 8004c38:	f1a8 0802 	sub.w	r8, r8, #2
 8004c3c:	fa5f f888 	uxtb.w	r8, r8
 8004c40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c46:	d824      	bhi.n	8004c92 <_printf_float+0x172>
 8004c48:	3901      	subs	r1, #1
 8004c4a:	4642      	mov	r2, r8
 8004c4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c50:	910d      	str	r1, [sp, #52]	; 0x34
 8004c52:	f7ff ff2f 	bl	8004ab4 <__exponent>
 8004c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c58:	4681      	mov	r9, r0
 8004c5a:	1813      	adds	r3, r2, r0
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	6123      	str	r3, [r4, #16]
 8004c60:	dc02      	bgt.n	8004c68 <_printf_float+0x148>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	07d1      	lsls	r1, r2, #31
 8004c66:	d501      	bpl.n	8004c6c <_printf_float+0x14c>
 8004c68:	3301      	adds	r3, #1
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0a2      	beq.n	8004bba <_printf_float+0x9a>
 8004c74:	232d      	movs	r3, #45	; 0x2d
 8004c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7a:	e79e      	b.n	8004bba <_printf_float+0x9a>
 8004c7c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c80:	f000 816e 	beq.w	8004f60 <_printf_float+0x440>
 8004c84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c88:	d1b9      	bne.n	8004bfe <_printf_float+0xde>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1b7      	bne.n	8004bfe <_printf_float+0xde>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7b4      	b.n	8004bfc <_printf_float+0xdc>
 8004c92:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c96:	d119      	bne.n	8004ccc <_printf_float+0x1ac>
 8004c98:	2900      	cmp	r1, #0
 8004c9a:	6863      	ldr	r3, [r4, #4]
 8004c9c:	dd0c      	ble.n	8004cb8 <_printf_float+0x198>
 8004c9e:	6121      	str	r1, [r4, #16]
 8004ca0:	b913      	cbnz	r3, 8004ca8 <_printf_float+0x188>
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	07d2      	lsls	r2, r2, #31
 8004ca6:	d502      	bpl.n	8004cae <_printf_float+0x18e>
 8004ca8:	3301      	adds	r3, #1
 8004caa:	440b      	add	r3, r1
 8004cac:	6123      	str	r3, [r4, #16]
 8004cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb0:	f04f 0900 	mov.w	r9, #0
 8004cb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cb6:	e7d9      	b.n	8004c6c <_printf_float+0x14c>
 8004cb8:	b913      	cbnz	r3, 8004cc0 <_printf_float+0x1a0>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	07d0      	lsls	r0, r2, #31
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_float+0x1a4>
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	e7f3      	b.n	8004cac <_printf_float+0x18c>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e7f1      	b.n	8004cac <_printf_float+0x18c>
 8004cc8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ccc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	db05      	blt.n	8004ce0 <_printf_float+0x1c0>
 8004cd4:	6822      	ldr	r2, [r4, #0]
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	07d1      	lsls	r1, r2, #31
 8004cda:	d5e8      	bpl.n	8004cae <_printf_float+0x18e>
 8004cdc:	3301      	adds	r3, #1
 8004cde:	e7e5      	b.n	8004cac <_printf_float+0x18c>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bfcc      	ite	gt
 8004ce4:	2301      	movgt	r3, #1
 8004ce6:	f1c3 0302 	rsble	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	e7de      	b.n	8004cac <_printf_float+0x18c>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	055a      	lsls	r2, r3, #21
 8004cf2:	d407      	bmi.n	8004d04 <_printf_float+0x1e4>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	463a      	mov	r2, r7
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b0      	blx	r6
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d129      	bne.n	8004d56 <_printf_float+0x236>
 8004d02:	e764      	b.n	8004bce <_printf_float+0xae>
 8004d04:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d08:	f240 80d7 	bls.w	8004eba <_printf_float+0x39a>
 8004d0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	f7fb fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8004d18:	b388      	cbz	r0, 8004d7e <_printf_float+0x25e>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <_printf_float+0x300>)
 8004d1e:	4659      	mov	r1, fp
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b0      	blx	r6
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f af52 	beq.w	8004bce <_printf_float+0xae>
 8004d2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	db02      	blt.n	8004d38 <_printf_float+0x218>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	07d8      	lsls	r0, r3, #31
 8004d36:	d50e      	bpl.n	8004d56 <_printf_float+0x236>
 8004d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b0      	blx	r6
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af43 	beq.w	8004bce <_printf_float+0xae>
 8004d48:	2700      	movs	r7, #0
 8004d4a:	f104 081a 	add.w	r8, r4, #26
 8004d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d50:	3b01      	subs	r3, #1
 8004d52:	42bb      	cmp	r3, r7
 8004d54:	dc09      	bgt.n	8004d6a <_printf_float+0x24a>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	079f      	lsls	r7, r3, #30
 8004d5a:	f100 80fd 	bmi.w	8004f58 <_printf_float+0x438>
 8004d5e:	68e0      	ldr	r0, [r4, #12]
 8004d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d62:	4298      	cmp	r0, r3
 8004d64:	bfb8      	it	lt
 8004d66:	4618      	movlt	r0, r3
 8004d68:	e733      	b.n	8004bd2 <_printf_float+0xb2>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	4659      	mov	r1, fp
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b0      	blx	r6
 8004d74:	3001      	adds	r0, #1
 8004d76:	f43f af2a 	beq.w	8004bce <_printf_float+0xae>
 8004d7a:	3701      	adds	r7, #1
 8004d7c:	e7e7      	b.n	8004d4e <_printf_float+0x22e>
 8004d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dc2b      	bgt.n	8004ddc <_printf_float+0x2bc>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4a26      	ldr	r2, [pc, #152]	; (8004e20 <_printf_float+0x300>)
 8004d88:	4659      	mov	r1, fp
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b0      	blx	r6
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f af1d 	beq.w	8004bce <_printf_float+0xae>
 8004d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d96:	b923      	cbnz	r3, 8004da2 <_printf_float+0x282>
 8004d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9a:	b913      	cbnz	r3, 8004da2 <_printf_float+0x282>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07d9      	lsls	r1, r3, #31
 8004da0:	d5d9      	bpl.n	8004d56 <_printf_float+0x236>
 8004da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da6:	4659      	mov	r1, fp
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b0      	blx	r6
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f af0e 	beq.w	8004bce <_printf_float+0xae>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 091a 	add.w	r9, r4, #26
 8004dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dbc:	425b      	negs	r3, r3
 8004dbe:	4543      	cmp	r3, r8
 8004dc0:	dc01      	bgt.n	8004dc6 <_printf_float+0x2a6>
 8004dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc4:	e797      	b.n	8004cf6 <_printf_float+0x1d6>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4659      	mov	r1, fp
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b0      	blx	r6
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f aefc 	beq.w	8004bce <_printf_float+0xae>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	e7ee      	b.n	8004dba <_printf_float+0x29a>
 8004ddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bfa8      	it	ge
 8004de4:	461a      	movge	r2, r3
 8004de6:	2a00      	cmp	r2, #0
 8004de8:	4690      	mov	r8, r2
 8004dea:	dd07      	ble.n	8004dfc <_printf_float+0x2dc>
 8004dec:	4613      	mov	r3, r2
 8004dee:	4659      	mov	r1, fp
 8004df0:	463a      	mov	r2, r7
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b0      	blx	r6
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f aee9 	beq.w	8004bce <_printf_float+0xae>
 8004dfc:	f104 031a 	add.w	r3, r4, #26
 8004e00:	f04f 0a00 	mov.w	sl, #0
 8004e04:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e0a:	e015      	b.n	8004e38 <_printf_float+0x318>
 8004e0c:	7fefffff 	.word	0x7fefffff
 8004e10:	08006adc 	.word	0x08006adc
 8004e14:	08006ad8 	.word	0x08006ad8
 8004e18:	08006ae4 	.word	0x08006ae4
 8004e1c:	08006ae0 	.word	0x08006ae0
 8004e20:	08006ae8 	.word	0x08006ae8
 8004e24:	2301      	movs	r3, #1
 8004e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e28:	4659      	mov	r1, fp
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b0      	blx	r6
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f aecd 	beq.w	8004bce <_printf_float+0xae>
 8004e34:	f10a 0a01 	add.w	sl, sl, #1
 8004e38:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e3c:	eba9 0308 	sub.w	r3, r9, r8
 8004e40:	4553      	cmp	r3, sl
 8004e42:	dcef      	bgt.n	8004e24 <_printf_float+0x304>
 8004e44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	444f      	add	r7, r9
 8004e4c:	db14      	blt.n	8004e78 <_printf_float+0x358>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	07da      	lsls	r2, r3, #31
 8004e52:	d411      	bmi.n	8004e78 <_printf_float+0x358>
 8004e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e56:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e58:	eba3 0209 	sub.w	r2, r3, r9
 8004e5c:	eba3 0901 	sub.w	r9, r3, r1
 8004e60:	4591      	cmp	r9, r2
 8004e62:	bfa8      	it	ge
 8004e64:	4691      	movge	r9, r2
 8004e66:	f1b9 0f00 	cmp.w	r9, #0
 8004e6a:	dc0d      	bgt.n	8004e88 <_printf_float+0x368>
 8004e6c:	2700      	movs	r7, #0
 8004e6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e72:	f104 081a 	add.w	r8, r4, #26
 8004e76:	e018      	b.n	8004eaa <_printf_float+0x38a>
 8004e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b0      	blx	r6
 8004e82:	3001      	adds	r0, #1
 8004e84:	d1e6      	bne.n	8004e54 <_printf_float+0x334>
 8004e86:	e6a2      	b.n	8004bce <_printf_float+0xae>
 8004e88:	464b      	mov	r3, r9
 8004e8a:	463a      	mov	r2, r7
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	3001      	adds	r0, #1
 8004e94:	d1ea      	bne.n	8004e6c <_printf_float+0x34c>
 8004e96:	e69a      	b.n	8004bce <_printf_float+0xae>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	47b0      	blx	r6
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	f43f ae93 	beq.w	8004bce <_printf_float+0xae>
 8004ea8:	3701      	adds	r7, #1
 8004eaa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	eba3 0309 	sub.w	r3, r3, r9
 8004eb4:	42bb      	cmp	r3, r7
 8004eb6:	dcef      	bgt.n	8004e98 <_printf_float+0x378>
 8004eb8:	e74d      	b.n	8004d56 <_printf_float+0x236>
 8004eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ebc:	2a01      	cmp	r2, #1
 8004ebe:	dc01      	bgt.n	8004ec4 <_printf_float+0x3a4>
 8004ec0:	07db      	lsls	r3, r3, #31
 8004ec2:	d538      	bpl.n	8004f36 <_printf_float+0x416>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	463a      	mov	r2, r7
 8004ec8:	4659      	mov	r1, fp
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b0      	blx	r6
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f43f ae7d 	beq.w	8004bce <_printf_float+0xae>
 8004ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ed8:	4659      	mov	r1, fp
 8004eda:	4628      	mov	r0, r5
 8004edc:	47b0      	blx	r6
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f107 0701 	add.w	r7, r7, #1
 8004ee4:	f43f ae73 	beq.w	8004bce <_printf_float+0xae>
 8004ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f103 38ff 	add.w	r8, r3, #4294967295
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f7fb fd57 	bl	80009a8 <__aeabi_dcmpeq>
 8004efa:	b9c0      	cbnz	r0, 8004f2e <_printf_float+0x40e>
 8004efc:	4643      	mov	r3, r8
 8004efe:	463a      	mov	r2, r7
 8004f00:	4659      	mov	r1, fp
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b0      	blx	r6
 8004f06:	3001      	adds	r0, #1
 8004f08:	d10d      	bne.n	8004f26 <_printf_float+0x406>
 8004f0a:	e660      	b.n	8004bce <_printf_float+0xae>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	4642      	mov	r2, r8
 8004f10:	4659      	mov	r1, fp
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b0      	blx	r6
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f ae59 	beq.w	8004bce <_printf_float+0xae>
 8004f1c:	3701      	adds	r7, #1
 8004f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f20:	3b01      	subs	r3, #1
 8004f22:	42bb      	cmp	r3, r7
 8004f24:	dcf2      	bgt.n	8004f0c <_printf_float+0x3ec>
 8004f26:	464b      	mov	r3, r9
 8004f28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f2c:	e6e4      	b.n	8004cf8 <_printf_float+0x1d8>
 8004f2e:	2700      	movs	r7, #0
 8004f30:	f104 081a 	add.w	r8, r4, #26
 8004f34:	e7f3      	b.n	8004f1e <_printf_float+0x3fe>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e7e1      	b.n	8004efe <_printf_float+0x3de>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	4659      	mov	r1, fp
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b0      	blx	r6
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae42 	beq.w	8004bce <_printf_float+0xae>
 8004f4a:	3701      	adds	r7, #1
 8004f4c:	68e3      	ldr	r3, [r4, #12]
 8004f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	42bb      	cmp	r3, r7
 8004f54:	dcf1      	bgt.n	8004f3a <_printf_float+0x41a>
 8004f56:	e702      	b.n	8004d5e <_printf_float+0x23e>
 8004f58:	2700      	movs	r7, #0
 8004f5a:	f104 0819 	add.w	r8, r4, #25
 8004f5e:	e7f5      	b.n	8004f4c <_printf_float+0x42c>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f43f ae94 	beq.w	8004c8e <_printf_float+0x16e>
 8004f66:	f04f 0c00 	mov.w	ip, #0
 8004f6a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f6e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f72:	6022      	str	r2, [r4, #0]
 8004f74:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f78:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	463a      	mov	r2, r7
 8004f80:	464b      	mov	r3, r9
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7ff fd3a 	bl	80049fc <__cvt>
 8004f88:	4607      	mov	r7, r0
 8004f8a:	e64f      	b.n	8004c2c <_printf_float+0x10c>

08004f8c <_printf_common>:
 8004f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	4691      	mov	r9, r2
 8004f92:	461f      	mov	r7, r3
 8004f94:	688a      	ldr	r2, [r1, #8]
 8004f96:	690b      	ldr	r3, [r1, #16]
 8004f98:	4606      	mov	r6, r0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfb8      	it	lt
 8004f9e:	4613      	movlt	r3, r2
 8004fa0:	f8c9 3000 	str.w	r3, [r9]
 8004fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa8:	460c      	mov	r4, r1
 8004faa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fae:	b112      	cbz	r2, 8004fb6 <_printf_common+0x2a>
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f8c9 3000 	str.w	r3, [r9]
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	0699      	lsls	r1, r3, #26
 8004fba:	bf42      	ittt	mi
 8004fbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fc0:	3302      	addmi	r3, #2
 8004fc2:	f8c9 3000 	strmi.w	r3, [r9]
 8004fc6:	6825      	ldr	r5, [r4, #0]
 8004fc8:	f015 0506 	ands.w	r5, r5, #6
 8004fcc:	d107      	bne.n	8004fde <_printf_common+0x52>
 8004fce:	f104 0a19 	add.w	sl, r4, #25
 8004fd2:	68e3      	ldr	r3, [r4, #12]
 8004fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fd8:	1a9b      	subs	r3, r3, r2
 8004fda:	42ab      	cmp	r3, r5
 8004fdc:	dc29      	bgt.n	8005032 <_printf_common+0xa6>
 8004fde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	3300      	adds	r3, #0
 8004fe6:	bf18      	it	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	0692      	lsls	r2, r2, #26
 8004fec:	d42e      	bmi.n	800504c <_printf_common+0xc0>
 8004fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	47c0      	blx	r8
 8004ff8:	3001      	adds	r0, #1
 8004ffa:	d021      	beq.n	8005040 <_printf_common+0xb4>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	68e5      	ldr	r5, [r4, #12]
 8005000:	f003 0306 	and.w	r3, r3, #6
 8005004:	2b04      	cmp	r3, #4
 8005006:	bf18      	it	ne
 8005008:	2500      	movne	r5, #0
 800500a:	f8d9 2000 	ldr.w	r2, [r9]
 800500e:	f04f 0900 	mov.w	r9, #0
 8005012:	bf08      	it	eq
 8005014:	1aad      	subeq	r5, r5, r2
 8005016:	68a3      	ldr	r3, [r4, #8]
 8005018:	6922      	ldr	r2, [r4, #16]
 800501a:	bf08      	it	eq
 800501c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005020:	4293      	cmp	r3, r2
 8005022:	bfc4      	itt	gt
 8005024:	1a9b      	subgt	r3, r3, r2
 8005026:	18ed      	addgt	r5, r5, r3
 8005028:	341a      	adds	r4, #26
 800502a:	454d      	cmp	r5, r9
 800502c:	d11a      	bne.n	8005064 <_printf_common+0xd8>
 800502e:	2000      	movs	r0, #0
 8005030:	e008      	b.n	8005044 <_printf_common+0xb8>
 8005032:	2301      	movs	r3, #1
 8005034:	4652      	mov	r2, sl
 8005036:	4639      	mov	r1, r7
 8005038:	4630      	mov	r0, r6
 800503a:	47c0      	blx	r8
 800503c:	3001      	adds	r0, #1
 800503e:	d103      	bne.n	8005048 <_printf_common+0xbc>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	3501      	adds	r5, #1
 800504a:	e7c2      	b.n	8004fd2 <_printf_common+0x46>
 800504c:	2030      	movs	r0, #48	; 0x30
 800504e:	18e1      	adds	r1, r4, r3
 8005050:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800505a:	4422      	add	r2, r4
 800505c:	3302      	adds	r3, #2
 800505e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005062:	e7c4      	b.n	8004fee <_printf_common+0x62>
 8005064:	2301      	movs	r3, #1
 8005066:	4622      	mov	r2, r4
 8005068:	4639      	mov	r1, r7
 800506a:	4630      	mov	r0, r6
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d0e6      	beq.n	8005040 <_printf_common+0xb4>
 8005072:	f109 0901 	add.w	r9, r9, #1
 8005076:	e7d8      	b.n	800502a <_printf_common+0x9e>

08005078 <_printf_i>:
 8005078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800507c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005080:	460c      	mov	r4, r1
 8005082:	7e09      	ldrb	r1, [r1, #24]
 8005084:	b085      	sub	sp, #20
 8005086:	296e      	cmp	r1, #110	; 0x6e
 8005088:	4617      	mov	r7, r2
 800508a:	4606      	mov	r6, r0
 800508c:	4698      	mov	r8, r3
 800508e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005090:	f000 80b3 	beq.w	80051fa <_printf_i+0x182>
 8005094:	d822      	bhi.n	80050dc <_printf_i+0x64>
 8005096:	2963      	cmp	r1, #99	; 0x63
 8005098:	d036      	beq.n	8005108 <_printf_i+0x90>
 800509a:	d80a      	bhi.n	80050b2 <_printf_i+0x3a>
 800509c:	2900      	cmp	r1, #0
 800509e:	f000 80b9 	beq.w	8005214 <_printf_i+0x19c>
 80050a2:	2958      	cmp	r1, #88	; 0x58
 80050a4:	f000 8083 	beq.w	80051ae <_printf_i+0x136>
 80050a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050b0:	e032      	b.n	8005118 <_printf_i+0xa0>
 80050b2:	2964      	cmp	r1, #100	; 0x64
 80050b4:	d001      	beq.n	80050ba <_printf_i+0x42>
 80050b6:	2969      	cmp	r1, #105	; 0x69
 80050b8:	d1f6      	bne.n	80050a8 <_printf_i+0x30>
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	0605      	lsls	r5, r0, #24
 80050c0:	f103 0104 	add.w	r1, r3, #4
 80050c4:	d52a      	bpl.n	800511c <_printf_i+0xa4>
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6011      	str	r1, [r2, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da03      	bge.n	80050d6 <_printf_i+0x5e>
 80050ce:	222d      	movs	r2, #45	; 0x2d
 80050d0:	425b      	negs	r3, r3
 80050d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050d6:	486f      	ldr	r0, [pc, #444]	; (8005294 <_printf_i+0x21c>)
 80050d8:	220a      	movs	r2, #10
 80050da:	e039      	b.n	8005150 <_printf_i+0xd8>
 80050dc:	2973      	cmp	r1, #115	; 0x73
 80050de:	f000 809d 	beq.w	800521c <_printf_i+0x1a4>
 80050e2:	d808      	bhi.n	80050f6 <_printf_i+0x7e>
 80050e4:	296f      	cmp	r1, #111	; 0x6f
 80050e6:	d020      	beq.n	800512a <_printf_i+0xb2>
 80050e8:	2970      	cmp	r1, #112	; 0x70
 80050ea:	d1dd      	bne.n	80050a8 <_printf_i+0x30>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	f043 0320 	orr.w	r3, r3, #32
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	e003      	b.n	80050fe <_printf_i+0x86>
 80050f6:	2975      	cmp	r1, #117	; 0x75
 80050f8:	d017      	beq.n	800512a <_printf_i+0xb2>
 80050fa:	2978      	cmp	r1, #120	; 0x78
 80050fc:	d1d4      	bne.n	80050a8 <_printf_i+0x30>
 80050fe:	2378      	movs	r3, #120	; 0x78
 8005100:	4865      	ldr	r0, [pc, #404]	; (8005298 <_printf_i+0x220>)
 8005102:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005106:	e055      	b.n	80051b4 <_printf_i+0x13c>
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800510e:	1d19      	adds	r1, r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6011      	str	r1, [r2, #0]
 8005114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005118:	2301      	movs	r3, #1
 800511a:	e08c      	b.n	8005236 <_printf_i+0x1be>
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005122:	6011      	str	r1, [r2, #0]
 8005124:	bf18      	it	ne
 8005126:	b21b      	sxthne	r3, r3
 8005128:	e7cf      	b.n	80050ca <_printf_i+0x52>
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	6825      	ldr	r5, [r4, #0]
 800512e:	1d18      	adds	r0, r3, #4
 8005130:	6010      	str	r0, [r2, #0]
 8005132:	0628      	lsls	r0, r5, #24
 8005134:	d501      	bpl.n	800513a <_printf_i+0xc2>
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	e002      	b.n	8005140 <_printf_i+0xc8>
 800513a:	0668      	lsls	r0, r5, #25
 800513c:	d5fb      	bpl.n	8005136 <_printf_i+0xbe>
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	296f      	cmp	r1, #111	; 0x6f
 8005142:	bf14      	ite	ne
 8005144:	220a      	movne	r2, #10
 8005146:	2208      	moveq	r2, #8
 8005148:	4852      	ldr	r0, [pc, #328]	; (8005294 <_printf_i+0x21c>)
 800514a:	2100      	movs	r1, #0
 800514c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005150:	6865      	ldr	r5, [r4, #4]
 8005152:	2d00      	cmp	r5, #0
 8005154:	60a5      	str	r5, [r4, #8]
 8005156:	f2c0 8095 	blt.w	8005284 <_printf_i+0x20c>
 800515a:	6821      	ldr	r1, [r4, #0]
 800515c:	f021 0104 	bic.w	r1, r1, #4
 8005160:	6021      	str	r1, [r4, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d13d      	bne.n	80051e2 <_printf_i+0x16a>
 8005166:	2d00      	cmp	r5, #0
 8005168:	f040 808e 	bne.w	8005288 <_printf_i+0x210>
 800516c:	4665      	mov	r5, ip
 800516e:	2a08      	cmp	r2, #8
 8005170:	d10b      	bne.n	800518a <_printf_i+0x112>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	07db      	lsls	r3, r3, #31
 8005176:	d508      	bpl.n	800518a <_printf_i+0x112>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	bfde      	ittt	le
 8005180:	2330      	movle	r3, #48	; 0x30
 8005182:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005186:	f105 35ff 	addle.w	r5, r5, #4294967295
 800518a:	ebac 0305 	sub.w	r3, ip, r5
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	f8cd 8000 	str.w	r8, [sp]
 8005194:	463b      	mov	r3, r7
 8005196:	aa03      	add	r2, sp, #12
 8005198:	4621      	mov	r1, r4
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff fef6 	bl	8004f8c <_printf_common>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d14d      	bne.n	8005240 <_printf_i+0x1c8>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	b005      	add	sp, #20
 80051aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ae:	4839      	ldr	r0, [pc, #228]	; (8005294 <_printf_i+0x21c>)
 80051b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	1d1d      	adds	r5, r3, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6015      	str	r5, [r2, #0]
 80051be:	060a      	lsls	r2, r1, #24
 80051c0:	d50b      	bpl.n	80051da <_printf_i+0x162>
 80051c2:	07ca      	lsls	r2, r1, #31
 80051c4:	bf44      	itt	mi
 80051c6:	f041 0120 	orrmi.w	r1, r1, #32
 80051ca:	6021      	strmi	r1, [r4, #0]
 80051cc:	b91b      	cbnz	r3, 80051d6 <_printf_i+0x15e>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	f022 0220 	bic.w	r2, r2, #32
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	2210      	movs	r2, #16
 80051d8:	e7b7      	b.n	800514a <_printf_i+0xd2>
 80051da:	064d      	lsls	r5, r1, #25
 80051dc:	bf48      	it	mi
 80051de:	b29b      	uxthmi	r3, r3
 80051e0:	e7ef      	b.n	80051c2 <_printf_i+0x14a>
 80051e2:	4665      	mov	r5, ip
 80051e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e8:	fb02 3311 	mls	r3, r2, r1, r3
 80051ec:	5cc3      	ldrb	r3, [r0, r3]
 80051ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051f2:	460b      	mov	r3, r1
 80051f4:	2900      	cmp	r1, #0
 80051f6:	d1f5      	bne.n	80051e4 <_printf_i+0x16c>
 80051f8:	e7b9      	b.n	800516e <_printf_i+0xf6>
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	6825      	ldr	r5, [r4, #0]
 80051fe:	1d18      	adds	r0, r3, #4
 8005200:	6961      	ldr	r1, [r4, #20]
 8005202:	6010      	str	r0, [r2, #0]
 8005204:	0628      	lsls	r0, r5, #24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	d501      	bpl.n	800520e <_printf_i+0x196>
 800520a:	6019      	str	r1, [r3, #0]
 800520c:	e002      	b.n	8005214 <_printf_i+0x19c>
 800520e:	066a      	lsls	r2, r5, #25
 8005210:	d5fb      	bpl.n	800520a <_printf_i+0x192>
 8005212:	8019      	strh	r1, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	4665      	mov	r5, ip
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	e7b9      	b.n	8005190 <_printf_i+0x118>
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	1d19      	adds	r1, r3, #4
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	681d      	ldr	r5, [r3, #0]
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	2100      	movs	r1, #0
 8005228:	4628      	mov	r0, r5
 800522a:	f000 feaf 	bl	8005f8c <memchr>
 800522e:	b108      	cbz	r0, 8005234 <_printf_i+0x1bc>
 8005230:	1b40      	subs	r0, r0, r5
 8005232:	6060      	str	r0, [r4, #4]
 8005234:	6863      	ldr	r3, [r4, #4]
 8005236:	6123      	str	r3, [r4, #16]
 8005238:	2300      	movs	r3, #0
 800523a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523e:	e7a7      	b.n	8005190 <_printf_i+0x118>
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	462a      	mov	r2, r5
 8005244:	4639      	mov	r1, r7
 8005246:	4630      	mov	r0, r6
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d0aa      	beq.n	80051a4 <_printf_i+0x12c>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	079b      	lsls	r3, r3, #30
 8005252:	d413      	bmi.n	800527c <_printf_i+0x204>
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	9b03      	ldr	r3, [sp, #12]
 8005258:	4298      	cmp	r0, r3
 800525a:	bfb8      	it	lt
 800525c:	4618      	movlt	r0, r3
 800525e:	e7a3      	b.n	80051a8 <_printf_i+0x130>
 8005260:	2301      	movs	r3, #1
 8005262:	464a      	mov	r2, r9
 8005264:	4639      	mov	r1, r7
 8005266:	4630      	mov	r0, r6
 8005268:	47c0      	blx	r8
 800526a:	3001      	adds	r0, #1
 800526c:	d09a      	beq.n	80051a4 <_printf_i+0x12c>
 800526e:	3501      	adds	r5, #1
 8005270:	68e3      	ldr	r3, [r4, #12]
 8005272:	9a03      	ldr	r2, [sp, #12]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	42ab      	cmp	r3, r5
 8005278:	dcf2      	bgt.n	8005260 <_printf_i+0x1e8>
 800527a:	e7eb      	b.n	8005254 <_printf_i+0x1dc>
 800527c:	2500      	movs	r5, #0
 800527e:	f104 0919 	add.w	r9, r4, #25
 8005282:	e7f5      	b.n	8005270 <_printf_i+0x1f8>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ac      	bne.n	80051e2 <_printf_i+0x16a>
 8005288:	7803      	ldrb	r3, [r0, #0]
 800528a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800528e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005292:	e76c      	b.n	800516e <_printf_i+0xf6>
 8005294:	08006aea 	.word	0x08006aea
 8005298:	08006afb 	.word	0x08006afb

0800529c <siprintf>:
 800529c:	b40e      	push	{r1, r2, r3}
 800529e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052a2:	b500      	push	{lr}
 80052a4:	b09c      	sub	sp, #112	; 0x70
 80052a6:	ab1d      	add	r3, sp, #116	; 0x74
 80052a8:	9002      	str	r0, [sp, #8]
 80052aa:	9006      	str	r0, [sp, #24]
 80052ac:	9107      	str	r1, [sp, #28]
 80052ae:	9104      	str	r1, [sp, #16]
 80052b0:	4808      	ldr	r0, [pc, #32]	; (80052d4 <siprintf+0x38>)
 80052b2:	4909      	ldr	r1, [pc, #36]	; (80052d8 <siprintf+0x3c>)
 80052b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	a902      	add	r1, sp, #8
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	f001 fa68 	bl	8006794 <_svfiprintf_r>
 80052c4:	2200      	movs	r2, #0
 80052c6:	9b02      	ldr	r3, [sp, #8]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	b01c      	add	sp, #112	; 0x70
 80052cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80052d0:	b003      	add	sp, #12
 80052d2:	4770      	bx	lr
 80052d4:	20000010 	.word	0x20000010
 80052d8:	ffff0208 	.word	0xffff0208

080052dc <quorem>:
 80052dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	6903      	ldr	r3, [r0, #16]
 80052e2:	690c      	ldr	r4, [r1, #16]
 80052e4:	4680      	mov	r8, r0
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	f2c0 8084 	blt.w	80053f4 <quorem+0x118>
 80052ec:	3c01      	subs	r4, #1
 80052ee:	f101 0714 	add.w	r7, r1, #20
 80052f2:	f100 0614 	add.w	r6, r0, #20
 80052f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052fe:	3501      	adds	r5, #1
 8005300:	fbb0 f5f5 	udiv	r5, r0, r5
 8005304:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005308:	eb06 030c 	add.w	r3, r6, ip
 800530c:	eb07 090c 	add.w	r9, r7, ip
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	b39d      	cbz	r5, 800537c <quorem+0xa0>
 8005314:	f04f 0a00 	mov.w	sl, #0
 8005318:	4638      	mov	r0, r7
 800531a:	46b6      	mov	lr, r6
 800531c:	46d3      	mov	fp, sl
 800531e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005322:	b293      	uxth	r3, r2
 8005324:	fb05 a303 	mla	r3, r5, r3, sl
 8005328:	0c12      	lsrs	r2, r2, #16
 800532a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800532e:	fb05 a202 	mla	r2, r5, r2, sl
 8005332:	b29b      	uxth	r3, r3
 8005334:	ebab 0303 	sub.w	r3, fp, r3
 8005338:	f8de b000 	ldr.w	fp, [lr]
 800533c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005340:	fa1f fb8b 	uxth.w	fp, fp
 8005344:	445b      	add	r3, fp
 8005346:	fa1f fb82 	uxth.w	fp, r2
 800534a:	f8de 2000 	ldr.w	r2, [lr]
 800534e:	4581      	cmp	r9, r0
 8005350:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005362:	f84e 3b04 	str.w	r3, [lr], #4
 8005366:	d2da      	bcs.n	800531e <quorem+0x42>
 8005368:	f856 300c 	ldr.w	r3, [r6, ip]
 800536c:	b933      	cbnz	r3, 800537c <quorem+0xa0>
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	3b04      	subs	r3, #4
 8005372:	429e      	cmp	r6, r3
 8005374:	461a      	mov	r2, r3
 8005376:	d331      	bcc.n	80053dc <quorem+0x100>
 8005378:	f8c8 4010 	str.w	r4, [r8, #16]
 800537c:	4640      	mov	r0, r8
 800537e:	f001 f833 	bl	80063e8 <__mcmp>
 8005382:	2800      	cmp	r0, #0
 8005384:	db26      	blt.n	80053d4 <quorem+0xf8>
 8005386:	4630      	mov	r0, r6
 8005388:	f04f 0c00 	mov.w	ip, #0
 800538c:	3501      	adds	r5, #1
 800538e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005392:	f8d0 e000 	ldr.w	lr, [r0]
 8005396:	b28b      	uxth	r3, r1
 8005398:	ebac 0303 	sub.w	r3, ip, r3
 800539c:	fa1f f28e 	uxth.w	r2, lr
 80053a0:	4413      	add	r3, r2
 80053a2:	0c0a      	lsrs	r2, r1, #16
 80053a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b2:	45b9      	cmp	r9, r7
 80053b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053b8:	f840 3b04 	str.w	r3, [r0], #4
 80053bc:	d2e7      	bcs.n	800538e <quorem+0xb2>
 80053be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053c6:	b92a      	cbnz	r2, 80053d4 <quorem+0xf8>
 80053c8:	3b04      	subs	r3, #4
 80053ca:	429e      	cmp	r6, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	d30b      	bcc.n	80053e8 <quorem+0x10c>
 80053d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80053d4:	4628      	mov	r0, r5
 80053d6:	b003      	add	sp, #12
 80053d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	3b04      	subs	r3, #4
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d1c9      	bne.n	8005378 <quorem+0x9c>
 80053e4:	3c01      	subs	r4, #1
 80053e6:	e7c4      	b.n	8005372 <quorem+0x96>
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	3b04      	subs	r3, #4
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d1ef      	bne.n	80053d0 <quorem+0xf4>
 80053f0:	3c01      	subs	r4, #1
 80053f2:	e7ea      	b.n	80053ca <quorem+0xee>
 80053f4:	2000      	movs	r0, #0
 80053f6:	e7ee      	b.n	80053d6 <quorem+0xfa>

080053f8 <_dtoa_r>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005402:	b095      	sub	sp, #84	; 0x54
 8005404:	4604      	mov	r4, r0
 8005406:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800540a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800540e:	b93d      	cbnz	r5, 8005420 <_dtoa_r+0x28>
 8005410:	2010      	movs	r0, #16
 8005412:	f000 fdb3 	bl	8005f7c <malloc>
 8005416:	6260      	str	r0, [r4, #36]	; 0x24
 8005418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800541c:	6005      	str	r5, [r0, #0]
 800541e:	60c5      	str	r5, [r0, #12]
 8005420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	b151      	cbz	r1, 800543c <_dtoa_r+0x44>
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	2301      	movs	r3, #1
 800542a:	4093      	lsls	r3, r2
 800542c:	604a      	str	r2, [r1, #4]
 800542e:	608b      	str	r3, [r1, #8]
 8005430:	4620      	mov	r0, r4
 8005432:	f000 fdf8 	bl	8006026 <_Bfree>
 8005436:	2200      	movs	r2, #0
 8005438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	1e3b      	subs	r3, r7, #0
 800543e:	bfaf      	iteee	ge
 8005440:	2300      	movge	r3, #0
 8005442:	2201      	movlt	r2, #1
 8005444:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005448:	9303      	strlt	r3, [sp, #12]
 800544a:	bfac      	ite	ge
 800544c:	f8c8 3000 	strge.w	r3, [r8]
 8005450:	f8c8 2000 	strlt.w	r2, [r8]
 8005454:	4bae      	ldr	r3, [pc, #696]	; (8005710 <_dtoa_r+0x318>)
 8005456:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800545a:	ea33 0308 	bics.w	r3, r3, r8
 800545e:	d11b      	bne.n	8005498 <_dtoa_r+0xa0>
 8005460:	f242 730f 	movw	r3, #9999	; 0x270f
 8005464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	9b02      	ldr	r3, [sp, #8]
 800546a:	b923      	cbnz	r3, 8005476 <_dtoa_r+0x7e>
 800546c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005470:	2800      	cmp	r0, #0
 8005472:	f000 8545 	beq.w	8005f00 <_dtoa_r+0xb08>
 8005476:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005478:	b953      	cbnz	r3, 8005490 <_dtoa_r+0x98>
 800547a:	4ba6      	ldr	r3, [pc, #664]	; (8005714 <_dtoa_r+0x31c>)
 800547c:	e021      	b.n	80054c2 <_dtoa_r+0xca>
 800547e:	4ba6      	ldr	r3, [pc, #664]	; (8005718 <_dtoa_r+0x320>)
 8005480:	9306      	str	r3, [sp, #24]
 8005482:	3308      	adds	r3, #8
 8005484:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	9806      	ldr	r0, [sp, #24]
 800548a:	b015      	add	sp, #84	; 0x54
 800548c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005490:	4ba0      	ldr	r3, [pc, #640]	; (8005714 <_dtoa_r+0x31c>)
 8005492:	9306      	str	r3, [sp, #24]
 8005494:	3303      	adds	r3, #3
 8005496:	e7f5      	b.n	8005484 <_dtoa_r+0x8c>
 8005498:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	2300      	movs	r3, #0
 80054a0:	4630      	mov	r0, r6
 80054a2:	4639      	mov	r1, r7
 80054a4:	f7fb fa80 	bl	80009a8 <__aeabi_dcmpeq>
 80054a8:	4682      	mov	sl, r0
 80054aa:	b160      	cbz	r0, 80054c6 <_dtoa_r+0xce>
 80054ac:	2301      	movs	r3, #1
 80054ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8520 	beq.w	8005efa <_dtoa_r+0xb02>
 80054ba:	4b98      	ldr	r3, [pc, #608]	; (800571c <_dtoa_r+0x324>)
 80054bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	9306      	str	r3, [sp, #24]
 80054c4:	e7e0      	b.n	8005488 <_dtoa_r+0x90>
 80054c6:	ab12      	add	r3, sp, #72	; 0x48
 80054c8:	9301      	str	r3, [sp, #4]
 80054ca:	ab13      	add	r3, sp, #76	; 0x4c
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4632      	mov	r2, r6
 80054d0:	463b      	mov	r3, r7
 80054d2:	4620      	mov	r0, r4
 80054d4:	f001 f800 	bl	80064d8 <__d2b>
 80054d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054dc:	4683      	mov	fp, r0
 80054de:	2d00      	cmp	r5, #0
 80054e0:	d07d      	beq.n	80055de <_dtoa_r+0x1e6>
 80054e2:	46b0      	mov	r8, r6
 80054e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80054ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80054f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80054f8:	2200      	movs	r2, #0
 80054fa:	4b89      	ldr	r3, [pc, #548]	; (8005720 <_dtoa_r+0x328>)
 80054fc:	4640      	mov	r0, r8
 80054fe:	4649      	mov	r1, r9
 8005500:	f7fa fe32 	bl	8000168 <__aeabi_dsub>
 8005504:	a37c      	add	r3, pc, #496	; (adr r3, 80056f8 <_dtoa_r+0x300>)
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f7fa ffe5 	bl	80004d8 <__aeabi_dmul>
 800550e:	a37c      	add	r3, pc, #496	; (adr r3, 8005700 <_dtoa_r+0x308>)
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f7fa fe2a 	bl	800016c <__adddf3>
 8005518:	4606      	mov	r6, r0
 800551a:	4628      	mov	r0, r5
 800551c:	460f      	mov	r7, r1
 800551e:	f7fa ff71 	bl	8000404 <__aeabi_i2d>
 8005522:	a379      	add	r3, pc, #484	; (adr r3, 8005708 <_dtoa_r+0x310>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f7fa ffd6 	bl	80004d8 <__aeabi_dmul>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fa fe1a 	bl	800016c <__adddf3>
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	f7fb fa7c 	bl	8000a38 <__aeabi_d2iz>
 8005540:	2200      	movs	r2, #0
 8005542:	4682      	mov	sl, r0
 8005544:	2300      	movs	r3, #0
 8005546:	4630      	mov	r0, r6
 8005548:	4639      	mov	r1, r7
 800554a:	f7fb fa37 	bl	80009bc <__aeabi_dcmplt>
 800554e:	b148      	cbz	r0, 8005564 <_dtoa_r+0x16c>
 8005550:	4650      	mov	r0, sl
 8005552:	f7fa ff57 	bl	8000404 <__aeabi_i2d>
 8005556:	4632      	mov	r2, r6
 8005558:	463b      	mov	r3, r7
 800555a:	f7fb fa25 	bl	80009a8 <__aeabi_dcmpeq>
 800555e:	b908      	cbnz	r0, 8005564 <_dtoa_r+0x16c>
 8005560:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005564:	f1ba 0f16 	cmp.w	sl, #22
 8005568:	d85a      	bhi.n	8005620 <_dtoa_r+0x228>
 800556a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800556e:	496d      	ldr	r1, [pc, #436]	; (8005724 <_dtoa_r+0x32c>)
 8005570:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005578:	f7fb fa3e 	bl	80009f8 <__aeabi_dcmpgt>
 800557c:	2800      	cmp	r0, #0
 800557e:	d051      	beq.n	8005624 <_dtoa_r+0x22c>
 8005580:	2300      	movs	r3, #0
 8005582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005586:	930d      	str	r3, [sp, #52]	; 0x34
 8005588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800558a:	1b5d      	subs	r5, r3, r5
 800558c:	1e6b      	subs	r3, r5, #1
 800558e:	9307      	str	r3, [sp, #28]
 8005590:	bf43      	ittte	mi
 8005592:	2300      	movmi	r3, #0
 8005594:	f1c5 0901 	rsbmi	r9, r5, #1
 8005598:	9307      	strmi	r3, [sp, #28]
 800559a:	f04f 0900 	movpl.w	r9, #0
 800559e:	f1ba 0f00 	cmp.w	sl, #0
 80055a2:	db41      	blt.n	8005628 <_dtoa_r+0x230>
 80055a4:	9b07      	ldr	r3, [sp, #28]
 80055a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80055aa:	4453      	add	r3, sl
 80055ac:	9307      	str	r3, [sp, #28]
 80055ae:	2300      	movs	r3, #0
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	f200 808f 	bhi.w	80056d8 <_dtoa_r+0x2e0>
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	bfc4      	itt	gt
 80055be:	3b04      	subgt	r3, #4
 80055c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80055c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80055c4:	bfc8      	it	gt
 80055c6:	2500      	movgt	r5, #0
 80055c8:	f1a3 0302 	sub.w	r3, r3, #2
 80055cc:	bfd8      	it	le
 80055ce:	2501      	movle	r5, #1
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	f200 808d 	bhi.w	80056f0 <_dtoa_r+0x2f8>
 80055d6:	e8df f003 	tbb	[pc, r3]
 80055da:	7d7b      	.short	0x7d7b
 80055dc:	6f2f      	.short	0x6f2f
 80055de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055e2:	441d      	add	r5, r3
 80055e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055e8:	2820      	cmp	r0, #32
 80055ea:	dd13      	ble.n	8005614 <_dtoa_r+0x21c>
 80055ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055f0:	9b02      	ldr	r3, [sp, #8]
 80055f2:	fa08 f800 	lsl.w	r8, r8, r0
 80055f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055fa:	fa23 f000 	lsr.w	r0, r3, r0
 80055fe:	ea48 0000 	orr.w	r0, r8, r0
 8005602:	f7fa feef 	bl	80003e4 <__aeabi_ui2d>
 8005606:	2301      	movs	r3, #1
 8005608:	4680      	mov	r8, r0
 800560a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800560e:	3d01      	subs	r5, #1
 8005610:	9310      	str	r3, [sp, #64]	; 0x40
 8005612:	e771      	b.n	80054f8 <_dtoa_r+0x100>
 8005614:	9b02      	ldr	r3, [sp, #8]
 8005616:	f1c0 0020 	rsb	r0, r0, #32
 800561a:	fa03 f000 	lsl.w	r0, r3, r0
 800561e:	e7f0      	b.n	8005602 <_dtoa_r+0x20a>
 8005620:	2301      	movs	r3, #1
 8005622:	e7b0      	b.n	8005586 <_dtoa_r+0x18e>
 8005624:	900d      	str	r0, [sp, #52]	; 0x34
 8005626:	e7af      	b.n	8005588 <_dtoa_r+0x190>
 8005628:	f1ca 0300 	rsb	r3, sl, #0
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	2300      	movs	r3, #0
 8005630:	eba9 090a 	sub.w	r9, r9, sl
 8005634:	930c      	str	r3, [sp, #48]	; 0x30
 8005636:	e7bc      	b.n	80055b2 <_dtoa_r+0x1ba>
 8005638:	2301      	movs	r3, #1
 800563a:	9309      	str	r3, [sp, #36]	; 0x24
 800563c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800563e:	2b00      	cmp	r3, #0
 8005640:	dd74      	ble.n	800572c <_dtoa_r+0x334>
 8005642:	4698      	mov	r8, r3
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	2200      	movs	r2, #0
 8005648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800564a:	6072      	str	r2, [r6, #4]
 800564c:	2204      	movs	r2, #4
 800564e:	f102 0014 	add.w	r0, r2, #20
 8005652:	4298      	cmp	r0, r3
 8005654:	6871      	ldr	r1, [r6, #4]
 8005656:	d96e      	bls.n	8005736 <_dtoa_r+0x33e>
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fcb0 	bl	8005fbe <_Balloc>
 800565e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005660:	6030      	str	r0, [r6, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f1b8 0f0e 	cmp.w	r8, #14
 8005668:	9306      	str	r3, [sp, #24]
 800566a:	f200 80ed 	bhi.w	8005848 <_dtoa_r+0x450>
 800566e:	2d00      	cmp	r5, #0
 8005670:	f000 80ea 	beq.w	8005848 <_dtoa_r+0x450>
 8005674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005678:	f1ba 0f00 	cmp.w	sl, #0
 800567c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005680:	dd77      	ble.n	8005772 <_dtoa_r+0x37a>
 8005682:	4a28      	ldr	r2, [pc, #160]	; (8005724 <_dtoa_r+0x32c>)
 8005684:	f00a 030f 	and.w	r3, sl, #15
 8005688:	ea4f 162a 	mov.w	r6, sl, asr #4
 800568c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005690:	06f0      	lsls	r0, r6, #27
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800569a:	d568      	bpl.n	800576e <_dtoa_r+0x376>
 800569c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <_dtoa_r+0x330>)
 80056a2:	2503      	movs	r5, #3
 80056a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056a8:	f7fb f840 	bl	800072c <__aeabi_ddiv>
 80056ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b0:	f006 060f 	and.w	r6, r6, #15
 80056b4:	4f1c      	ldr	r7, [pc, #112]	; (8005728 <_dtoa_r+0x330>)
 80056b6:	e04f      	b.n	8005758 <_dtoa_r+0x360>
 80056b8:	2301      	movs	r3, #1
 80056ba:	9309      	str	r3, [sp, #36]	; 0x24
 80056bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056be:	4453      	add	r3, sl
 80056c0:	f103 0801 	add.w	r8, r3, #1
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	4643      	mov	r3, r8
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bfb8      	it	lt
 80056cc:	2301      	movlt	r3, #1
 80056ce:	e7ba      	b.n	8005646 <_dtoa_r+0x24e>
 80056d0:	2300      	movs	r3, #0
 80056d2:	e7b2      	b.n	800563a <_dtoa_r+0x242>
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7f0      	b.n	80056ba <_dtoa_r+0x2c2>
 80056d8:	2501      	movs	r5, #1
 80056da:	2300      	movs	r3, #0
 80056dc:	9509      	str	r5, [sp, #36]	; 0x24
 80056de:	931e      	str	r3, [sp, #120]	; 0x78
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	2200      	movs	r2, #0
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	4698      	mov	r8, r3
 80056ea:	2312      	movs	r3, #18
 80056ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80056ee:	e7aa      	b.n	8005646 <_dtoa_r+0x24e>
 80056f0:	2301      	movs	r3, #1
 80056f2:	9309      	str	r3, [sp, #36]	; 0x24
 80056f4:	e7f4      	b.n	80056e0 <_dtoa_r+0x2e8>
 80056f6:	bf00      	nop
 80056f8:	636f4361 	.word	0x636f4361
 80056fc:	3fd287a7 	.word	0x3fd287a7
 8005700:	8b60c8b3 	.word	0x8b60c8b3
 8005704:	3fc68a28 	.word	0x3fc68a28
 8005708:	509f79fb 	.word	0x509f79fb
 800570c:	3fd34413 	.word	0x3fd34413
 8005710:	7ff00000 	.word	0x7ff00000
 8005714:	08006b15 	.word	0x08006b15
 8005718:	08006b0c 	.word	0x08006b0c
 800571c:	08006ae9 	.word	0x08006ae9
 8005720:	3ff80000 	.word	0x3ff80000
 8005724:	08006b48 	.word	0x08006b48
 8005728:	08006b20 	.word	0x08006b20
 800572c:	2301      	movs	r3, #1
 800572e:	9304      	str	r3, [sp, #16]
 8005730:	4698      	mov	r8, r3
 8005732:	461a      	mov	r2, r3
 8005734:	e7da      	b.n	80056ec <_dtoa_r+0x2f4>
 8005736:	3101      	adds	r1, #1
 8005738:	6071      	str	r1, [r6, #4]
 800573a:	0052      	lsls	r2, r2, #1
 800573c:	e787      	b.n	800564e <_dtoa_r+0x256>
 800573e:	07f1      	lsls	r1, r6, #31
 8005740:	d508      	bpl.n	8005754 <_dtoa_r+0x35c>
 8005742:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005752:	3501      	adds	r5, #1
 8005754:	1076      	asrs	r6, r6, #1
 8005756:	3708      	adds	r7, #8
 8005758:	2e00      	cmp	r6, #0
 800575a:	d1f0      	bne.n	800573e <_dtoa_r+0x346>
 800575c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005764:	f7fa ffe2 	bl	800072c <__aeabi_ddiv>
 8005768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800576c:	e01b      	b.n	80057a6 <_dtoa_r+0x3ae>
 800576e:	2502      	movs	r5, #2
 8005770:	e7a0      	b.n	80056b4 <_dtoa_r+0x2bc>
 8005772:	f000 80a4 	beq.w	80058be <_dtoa_r+0x4c6>
 8005776:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800577a:	f1ca 0600 	rsb	r6, sl, #0
 800577e:	4ba0      	ldr	r3, [pc, #640]	; (8005a00 <_dtoa_r+0x608>)
 8005780:	f006 020f 	and.w	r2, r6, #15
 8005784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fea4 	bl	80004d8 <__aeabi_dmul>
 8005790:	2502      	movs	r5, #2
 8005792:	2300      	movs	r3, #0
 8005794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005798:	4f9a      	ldr	r7, [pc, #616]	; (8005a04 <_dtoa_r+0x60c>)
 800579a:	1136      	asrs	r6, r6, #4
 800579c:	2e00      	cmp	r6, #0
 800579e:	f040 8083 	bne.w	80058a8 <_dtoa_r+0x4b0>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e0      	bne.n	8005768 <_dtoa_r+0x370>
 80057a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 808a 	beq.w	80058c2 <_dtoa_r+0x4ca>
 80057ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b92      	ldr	r3, [pc, #584]	; (8005a08 <_dtoa_r+0x610>)
 80057be:	f7fb f8fd 	bl	80009bc <__aeabi_dcmplt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d07d      	beq.n	80058c2 <_dtoa_r+0x4ca>
 80057c6:	f1b8 0f00 	cmp.w	r8, #0
 80057ca:	d07a      	beq.n	80058c2 <_dtoa_r+0x4ca>
 80057cc:	9b04      	ldr	r3, [sp, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dd36      	ble.n	8005840 <_dtoa_r+0x448>
 80057d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057d6:	2200      	movs	r2, #0
 80057d8:	4b8c      	ldr	r3, [pc, #560]	; (8005a0c <_dtoa_r+0x614>)
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e2:	9e04      	ldr	r6, [sp, #16]
 80057e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80057e8:	3501      	adds	r5, #1
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7fa fe0a 	bl	8000404 <__aeabi_i2d>
 80057f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057f4:	f7fa fe70 	bl	80004d8 <__aeabi_dmul>
 80057f8:	2200      	movs	r2, #0
 80057fa:	4b85      	ldr	r3, [pc, #532]	; (8005a10 <_dtoa_r+0x618>)
 80057fc:	f7fa fcb6 	bl	800016c <__adddf3>
 8005800:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005804:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005808:	950b      	str	r5, [sp, #44]	; 0x2c
 800580a:	2e00      	cmp	r6, #0
 800580c:	d15c      	bne.n	80058c8 <_dtoa_r+0x4d0>
 800580e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005812:	2200      	movs	r2, #0
 8005814:	4b7f      	ldr	r3, [pc, #508]	; (8005a14 <_dtoa_r+0x61c>)
 8005816:	f7fa fca7 	bl	8000168 <__aeabi_dsub>
 800581a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800581c:	462b      	mov	r3, r5
 800581e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005822:	f7fb f8e9 	bl	80009f8 <__aeabi_dcmpgt>
 8005826:	2800      	cmp	r0, #0
 8005828:	f040 8281 	bne.w	8005d2e <_dtoa_r+0x936>
 800582c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005832:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005836:	f7fb f8c1 	bl	80009bc <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	f040 8275 	bne.w	8005d2a <_dtoa_r+0x932>
 8005840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800584a:	2b00      	cmp	r3, #0
 800584c:	f2c0 814b 	blt.w	8005ae6 <_dtoa_r+0x6ee>
 8005850:	f1ba 0f0e 	cmp.w	sl, #14
 8005854:	f300 8147 	bgt.w	8005ae6 <_dtoa_r+0x6ee>
 8005858:	4b69      	ldr	r3, [pc, #420]	; (8005a00 <_dtoa_r+0x608>)
 800585a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005866:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005868:	2b00      	cmp	r3, #0
 800586a:	f280 80d7 	bge.w	8005a1c <_dtoa_r+0x624>
 800586e:	f1b8 0f00 	cmp.w	r8, #0
 8005872:	f300 80d3 	bgt.w	8005a1c <_dtoa_r+0x624>
 8005876:	f040 8257 	bne.w	8005d28 <_dtoa_r+0x930>
 800587a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587e:	2200      	movs	r2, #0
 8005880:	4b64      	ldr	r3, [pc, #400]	; (8005a14 <_dtoa_r+0x61c>)
 8005882:	f7fa fe29 	bl	80004d8 <__aeabi_dmul>
 8005886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800588a:	f7fb f8ab 	bl	80009e4 <__aeabi_dcmpge>
 800588e:	4646      	mov	r6, r8
 8005890:	4647      	mov	r7, r8
 8005892:	2800      	cmp	r0, #0
 8005894:	f040 822d 	bne.w	8005cf2 <_dtoa_r+0x8fa>
 8005898:	9b06      	ldr	r3, [sp, #24]
 800589a:	9a06      	ldr	r2, [sp, #24]
 800589c:	1c5d      	adds	r5, r3, #1
 800589e:	2331      	movs	r3, #49	; 0x31
 80058a0:	f10a 0a01 	add.w	sl, sl, #1
 80058a4:	7013      	strb	r3, [r2, #0]
 80058a6:	e228      	b.n	8005cfa <_dtoa_r+0x902>
 80058a8:	07f2      	lsls	r2, r6, #31
 80058aa:	d505      	bpl.n	80058b8 <_dtoa_r+0x4c0>
 80058ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b0:	f7fa fe12 	bl	80004d8 <__aeabi_dmul>
 80058b4:	2301      	movs	r3, #1
 80058b6:	3501      	adds	r5, #1
 80058b8:	1076      	asrs	r6, r6, #1
 80058ba:	3708      	adds	r7, #8
 80058bc:	e76e      	b.n	800579c <_dtoa_r+0x3a4>
 80058be:	2502      	movs	r5, #2
 80058c0:	e771      	b.n	80057a6 <_dtoa_r+0x3ae>
 80058c2:	4657      	mov	r7, sl
 80058c4:	4646      	mov	r6, r8
 80058c6:	e790      	b.n	80057ea <_dtoa_r+0x3f2>
 80058c8:	4b4d      	ldr	r3, [pc, #308]	; (8005a00 <_dtoa_r+0x608>)
 80058ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d048      	beq.n	800596a <_dtoa_r+0x572>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	2000      	movs	r0, #0
 80058de:	494e      	ldr	r1, [pc, #312]	; (8005a18 <_dtoa_r+0x620>)
 80058e0:	f7fa ff24 	bl	800072c <__aeabi_ddiv>
 80058e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058e8:	f7fa fc3e 	bl	8000168 <__aeabi_dsub>
 80058ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058f0:	9d06      	ldr	r5, [sp, #24]
 80058f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058f6:	f7fb f89f 	bl	8000a38 <__aeabi_d2iz>
 80058fa:	9011      	str	r0, [sp, #68]	; 0x44
 80058fc:	f7fa fd82 	bl	8000404 <__aeabi_i2d>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005908:	f7fa fc2e 	bl	8000168 <__aeabi_dsub>
 800590c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800590e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005912:	3330      	adds	r3, #48	; 0x30
 8005914:	f805 3b01 	strb.w	r3, [r5], #1
 8005918:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800591c:	f7fb f84e 	bl	80009bc <__aeabi_dcmplt>
 8005920:	2800      	cmp	r0, #0
 8005922:	d163      	bne.n	80059ec <_dtoa_r+0x5f4>
 8005924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005928:	2000      	movs	r0, #0
 800592a:	4937      	ldr	r1, [pc, #220]	; (8005a08 <_dtoa_r+0x610>)
 800592c:	f7fa fc1c 	bl	8000168 <__aeabi_dsub>
 8005930:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005934:	f7fb f842 	bl	80009bc <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	f040 80b5 	bne.w	8005aa8 <_dtoa_r+0x6b0>
 800593e:	9b06      	ldr	r3, [sp, #24]
 8005940:	1aeb      	subs	r3, r5, r3
 8005942:	429e      	cmp	r6, r3
 8005944:	f77f af7c 	ble.w	8005840 <_dtoa_r+0x448>
 8005948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800594c:	2200      	movs	r2, #0
 800594e:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <_dtoa_r+0x614>)
 8005950:	f7fa fdc2 	bl	80004d8 <__aeabi_dmul>
 8005954:	2200      	movs	r2, #0
 8005956:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800595a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800595e:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <_dtoa_r+0x614>)
 8005960:	f7fa fdba 	bl	80004d8 <__aeabi_dmul>
 8005964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005968:	e7c3      	b.n	80058f2 <_dtoa_r+0x4fa>
 800596a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800596e:	f7fa fdb3 	bl	80004d8 <__aeabi_dmul>
 8005972:	9b06      	ldr	r3, [sp, #24]
 8005974:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005978:	199d      	adds	r5, r3, r6
 800597a:	461e      	mov	r6, r3
 800597c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005980:	f7fb f85a 	bl	8000a38 <__aeabi_d2iz>
 8005984:	9011      	str	r0, [sp, #68]	; 0x44
 8005986:	f7fa fd3d 	bl	8000404 <__aeabi_i2d>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005992:	f7fa fbe9 	bl	8000168 <__aeabi_dsub>
 8005996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800599c:	3330      	adds	r3, #48	; 0x30
 800599e:	f806 3b01 	strb.w	r3, [r6], #1
 80059a2:	42ae      	cmp	r6, r5
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	d124      	bne.n	80059f4 <_dtoa_r+0x5fc>
 80059aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <_dtoa_r+0x620>)
 80059b0:	f7fa fbdc 	bl	800016c <__adddf3>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059bc:	f7fb f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d171      	bne.n	8005aa8 <_dtoa_r+0x6b0>
 80059c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059c8:	2000      	movs	r0, #0
 80059ca:	4913      	ldr	r1, [pc, #76]	; (8005a18 <_dtoa_r+0x620>)
 80059cc:	f7fa fbcc 	bl	8000168 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059d8:	f7fa fff0 	bl	80009bc <__aeabi_dcmplt>
 80059dc:	2800      	cmp	r0, #0
 80059de:	f43f af2f 	beq.w	8005840 <_dtoa_r+0x448>
 80059e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059e6:	1e6a      	subs	r2, r5, #1
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d001      	beq.n	80059f0 <_dtoa_r+0x5f8>
 80059ec:	46ba      	mov	sl, r7
 80059ee:	e04a      	b.n	8005a86 <_dtoa_r+0x68e>
 80059f0:	4615      	mov	r5, r2
 80059f2:	e7f6      	b.n	80059e2 <_dtoa_r+0x5ea>
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <_dtoa_r+0x614>)
 80059f6:	f7fa fd6f 	bl	80004d8 <__aeabi_dmul>
 80059fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fe:	e7bd      	b.n	800597c <_dtoa_r+0x584>
 8005a00:	08006b48 	.word	0x08006b48
 8005a04:	08006b20 	.word	0x08006b20
 8005a08:	3ff00000 	.word	0x3ff00000
 8005a0c:	40240000 	.word	0x40240000
 8005a10:	401c0000 	.word	0x401c0000
 8005a14:	40140000 	.word	0x40140000
 8005a18:	3fe00000 	.word	0x3fe00000
 8005a1c:	9d06      	ldr	r5, [sp, #24]
 8005a1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a26:	4630      	mov	r0, r6
 8005a28:	4639      	mov	r1, r7
 8005a2a:	f7fa fe7f 	bl	800072c <__aeabi_ddiv>
 8005a2e:	f7fb f803 	bl	8000a38 <__aeabi_d2iz>
 8005a32:	4681      	mov	r9, r0
 8005a34:	f7fa fce6 	bl	8000404 <__aeabi_i2d>
 8005a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a3c:	f7fa fd4c 	bl	80004d8 <__aeabi_dmul>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4630      	mov	r0, r6
 8005a46:	4639      	mov	r1, r7
 8005a48:	f7fa fb8e 	bl	8000168 <__aeabi_dsub>
 8005a4c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a50:	f805 6b01 	strb.w	r6, [r5], #1
 8005a54:	9e06      	ldr	r6, [sp, #24]
 8005a56:	4602      	mov	r2, r0
 8005a58:	1bae      	subs	r6, r5, r6
 8005a5a:	45b0      	cmp	r8, r6
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	d135      	bne.n	8005acc <_dtoa_r+0x6d4>
 8005a60:	f7fa fb84 	bl	800016c <__adddf3>
 8005a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa ffc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005a70:	b9c8      	cbnz	r0, 8005aa6 <_dtoa_r+0x6ae>
 8005a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a76:	4630      	mov	r0, r6
 8005a78:	4639      	mov	r1, r7
 8005a7a:	f7fa ff95 	bl	80009a8 <__aeabi_dcmpeq>
 8005a7e:	b110      	cbz	r0, 8005a86 <_dtoa_r+0x68e>
 8005a80:	f019 0f01 	tst.w	r9, #1
 8005a84:	d10f      	bne.n	8005aa6 <_dtoa_r+0x6ae>
 8005a86:	4659      	mov	r1, fp
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 facc 	bl	8006026 <_Bfree>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a92:	702b      	strb	r3, [r5, #0]
 8005a94:	f10a 0301 	add.w	r3, sl, #1
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f43f acf3 	beq.w	8005488 <_dtoa_r+0x90>
 8005aa2:	601d      	str	r5, [r3, #0]
 8005aa4:	e4f0      	b.n	8005488 <_dtoa_r+0x90>
 8005aa6:	4657      	mov	r7, sl
 8005aa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005aac:	1e6b      	subs	r3, r5, #1
 8005aae:	2a39      	cmp	r2, #57	; 0x39
 8005ab0:	d106      	bne.n	8005ac0 <_dtoa_r+0x6c8>
 8005ab2:	9a06      	ldr	r2, [sp, #24]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <_dtoa_r+0x6d0>
 8005ab8:	2330      	movs	r3, #48	; 0x30
 8005aba:	7013      	strb	r3, [r2, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	3701      	adds	r7, #1
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e791      	b.n	80059ec <_dtoa_r+0x5f4>
 8005ac8:	461d      	mov	r5, r3
 8005aca:	e7ed      	b.n	8005aa8 <_dtoa_r+0x6b0>
 8005acc:	2200      	movs	r2, #0
 8005ace:	4b99      	ldr	r3, [pc, #612]	; (8005d34 <_dtoa_r+0x93c>)
 8005ad0:	f7fa fd02 	bl	80004d8 <__aeabi_dmul>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	f7fa ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d09e      	beq.n	8005a22 <_dtoa_r+0x62a>
 8005ae4:	e7cf      	b.n	8005a86 <_dtoa_r+0x68e>
 8005ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	f000 8088 	beq.w	8005bfe <_dtoa_r+0x806>
 8005aee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005af0:	2a01      	cmp	r2, #1
 8005af2:	dc6d      	bgt.n	8005bd0 <_dtoa_r+0x7d8>
 8005af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	d066      	beq.n	8005bc8 <_dtoa_r+0x7d0>
 8005afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005afe:	464d      	mov	r5, r9
 8005b00:	9e08      	ldr	r6, [sp, #32]
 8005b02:	9a07      	ldr	r2, [sp, #28]
 8005b04:	2101      	movs	r1, #1
 8005b06:	441a      	add	r2, r3
 8005b08:	4620      	mov	r0, r4
 8005b0a:	4499      	add	r9, r3
 8005b0c:	9207      	str	r2, [sp, #28]
 8005b0e:	f000 fb2a 	bl	8006166 <__i2b>
 8005b12:	4607      	mov	r7, r0
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	dd0b      	ble.n	8005b30 <_dtoa_r+0x738>
 8005b18:	9b07      	ldr	r3, [sp, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	dd08      	ble.n	8005b30 <_dtoa_r+0x738>
 8005b1e:	42ab      	cmp	r3, r5
 8005b20:	bfa8      	it	ge
 8005b22:	462b      	movge	r3, r5
 8005b24:	9a07      	ldr	r2, [sp, #28]
 8005b26:	eba9 0903 	sub.w	r9, r9, r3
 8005b2a:	1aed      	subs	r5, r5, r3
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	b1eb      	cbz	r3, 8005b70 <_dtoa_r+0x778>
 8005b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d065      	beq.n	8005c06 <_dtoa_r+0x80e>
 8005b3a:	b18e      	cbz	r6, 8005b60 <_dtoa_r+0x768>
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4632      	mov	r2, r6
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fbaf 	bl	80062a4 <__pow5mult>
 8005b46:	465a      	mov	r2, fp
 8005b48:	4601      	mov	r1, r0
 8005b4a:	4607      	mov	r7, r0
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 fb13 	bl	8006178 <__multiply>
 8005b52:	4659      	mov	r1, fp
 8005b54:	900a      	str	r0, [sp, #40]	; 0x28
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fa65 	bl	8006026 <_Bfree>
 8005b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5e:	469b      	mov	fp, r3
 8005b60:	9b08      	ldr	r3, [sp, #32]
 8005b62:	1b9a      	subs	r2, r3, r6
 8005b64:	d004      	beq.n	8005b70 <_dtoa_r+0x778>
 8005b66:	4659      	mov	r1, fp
 8005b68:	4620      	mov	r0, r4
 8005b6a:	f000 fb9b 	bl	80062a4 <__pow5mult>
 8005b6e:	4683      	mov	fp, r0
 8005b70:	2101      	movs	r1, #1
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 faf7 	bl	8006166 <__i2b>
 8005b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 81c6 	beq.w	8005f0e <_dtoa_r+0xb16>
 8005b82:	461a      	mov	r2, r3
 8005b84:	4601      	mov	r1, r0
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fb8c 	bl	80062a4 <__pow5mult>
 8005b8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b8e:	4606      	mov	r6, r0
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	dc3e      	bgt.n	8005c12 <_dtoa_r+0x81a>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d137      	bne.n	8005c0a <_dtoa_r+0x812>
 8005b9a:	9b03      	ldr	r3, [sp, #12]
 8005b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d134      	bne.n	8005c0e <_dtoa_r+0x816>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	0d1b      	lsrs	r3, r3, #20
 8005bac:	051b      	lsls	r3, r3, #20
 8005bae:	b12b      	cbz	r3, 8005bbc <_dtoa_r+0x7c4>
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	f109 0901 	add.w	r9, r9, #1
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	9307      	str	r3, [sp, #28]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	9308      	str	r3, [sp, #32]
 8005bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d128      	bne.n	8005c16 <_dtoa_r+0x81e>
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e02e      	b.n	8005c26 <_dtoa_r+0x82e>
 8005bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bce:	e796      	b.n	8005afe <_dtoa_r+0x706>
 8005bd0:	9b08      	ldr	r3, [sp, #32]
 8005bd2:	f108 36ff 	add.w	r6, r8, #4294967295
 8005bd6:	42b3      	cmp	r3, r6
 8005bd8:	bfb7      	itett	lt
 8005bda:	9b08      	ldrlt	r3, [sp, #32]
 8005bdc:	1b9e      	subge	r6, r3, r6
 8005bde:	1af2      	sublt	r2, r6, r3
 8005be0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005be2:	bfbf      	itttt	lt
 8005be4:	9608      	strlt	r6, [sp, #32]
 8005be6:	189b      	addlt	r3, r3, r2
 8005be8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005bea:	2600      	movlt	r6, #0
 8005bec:	f1b8 0f00 	cmp.w	r8, #0
 8005bf0:	bfb9      	ittee	lt
 8005bf2:	eba9 0508 	sublt.w	r5, r9, r8
 8005bf6:	2300      	movlt	r3, #0
 8005bf8:	464d      	movge	r5, r9
 8005bfa:	4643      	movge	r3, r8
 8005bfc:	e781      	b.n	8005b02 <_dtoa_r+0x70a>
 8005bfe:	9e08      	ldr	r6, [sp, #32]
 8005c00:	464d      	mov	r5, r9
 8005c02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c04:	e786      	b.n	8005b14 <_dtoa_r+0x71c>
 8005c06:	9a08      	ldr	r2, [sp, #32]
 8005c08:	e7ad      	b.n	8005b66 <_dtoa_r+0x76e>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e7d6      	b.n	8005bbc <_dtoa_r+0x7c4>
 8005c0e:	9b02      	ldr	r3, [sp, #8]
 8005c10:	e7d4      	b.n	8005bbc <_dtoa_r+0x7c4>
 8005c12:	2300      	movs	r3, #0
 8005c14:	9308      	str	r3, [sp, #32]
 8005c16:	6933      	ldr	r3, [r6, #16]
 8005c18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c1c:	6918      	ldr	r0, [r3, #16]
 8005c1e:	f000 fa54 	bl	80060ca <__hi0bits>
 8005c22:	f1c0 0020 	rsb	r0, r0, #32
 8005c26:	9b07      	ldr	r3, [sp, #28]
 8005c28:	4418      	add	r0, r3
 8005c2a:	f010 001f 	ands.w	r0, r0, #31
 8005c2e:	d047      	beq.n	8005cc0 <_dtoa_r+0x8c8>
 8005c30:	f1c0 0320 	rsb	r3, r0, #32
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	dd3b      	ble.n	8005cb0 <_dtoa_r+0x8b8>
 8005c38:	9b07      	ldr	r3, [sp, #28]
 8005c3a:	f1c0 001c 	rsb	r0, r0, #28
 8005c3e:	4481      	add	r9, r0
 8005c40:	4405      	add	r5, r0
 8005c42:	4403      	add	r3, r0
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f1b9 0f00 	cmp.w	r9, #0
 8005c4a:	dd05      	ble.n	8005c58 <_dtoa_r+0x860>
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	464a      	mov	r2, r9
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fb75 	bl	8006340 <__lshift>
 8005c56:	4683      	mov	fp, r0
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dd05      	ble.n	8005c6a <_dtoa_r+0x872>
 8005c5e:	4631      	mov	r1, r6
 8005c60:	461a      	mov	r2, r3
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fb6c 	bl	8006340 <__lshift>
 8005c68:	4606      	mov	r6, r0
 8005c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c6c:	b353      	cbz	r3, 8005cc4 <_dtoa_r+0x8cc>
 8005c6e:	4631      	mov	r1, r6
 8005c70:	4658      	mov	r0, fp
 8005c72:	f000 fbb9 	bl	80063e8 <__mcmp>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	da24      	bge.n	8005cc4 <_dtoa_r+0x8cc>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	220a      	movs	r2, #10
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 f9e7 	bl	8006054 <__multadd>
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c8c:	4683      	mov	fp, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8144 	beq.w	8005f1c <_dtoa_r+0xb24>
 8005c94:	2300      	movs	r3, #0
 8005c96:	4639      	mov	r1, r7
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f9da 	bl	8006054 <__multadd>
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc4d      	bgt.n	8005d44 <_dtoa_r+0x94c>
 8005ca8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	dd4a      	ble.n	8005d44 <_dtoa_r+0x94c>
 8005cae:	e011      	b.n	8005cd4 <_dtoa_r+0x8dc>
 8005cb0:	d0c9      	beq.n	8005c46 <_dtoa_r+0x84e>
 8005cb2:	9a07      	ldr	r2, [sp, #28]
 8005cb4:	331c      	adds	r3, #28
 8005cb6:	441a      	add	r2, r3
 8005cb8:	4499      	add	r9, r3
 8005cba:	441d      	add	r5, r3
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	e7c1      	b.n	8005c44 <_dtoa_r+0x84c>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	e7f6      	b.n	8005cb2 <_dtoa_r+0x8ba>
 8005cc4:	f1b8 0f00 	cmp.w	r8, #0
 8005cc8:	dc36      	bgt.n	8005d38 <_dtoa_r+0x940>
 8005cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	dd33      	ble.n	8005d38 <_dtoa_r+0x940>
 8005cd0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	b963      	cbnz	r3, 8005cf2 <_dtoa_r+0x8fa>
 8005cd8:	4631      	mov	r1, r6
 8005cda:	2205      	movs	r2, #5
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 f9b9 	bl	8006054 <__multadd>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	f000 fb7e 	bl	80063e8 <__mcmp>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	f73f add3 	bgt.w	8005898 <_dtoa_r+0x4a0>
 8005cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cf4:	9d06      	ldr	r5, [sp, #24]
 8005cf6:	ea6f 0a03 	mvn.w	sl, r3
 8005cfa:	f04f 0900 	mov.w	r9, #0
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f990 	bl	8006026 <_Bfree>
 8005d06:	2f00      	cmp	r7, #0
 8005d08:	f43f aebd 	beq.w	8005a86 <_dtoa_r+0x68e>
 8005d0c:	f1b9 0f00 	cmp.w	r9, #0
 8005d10:	d005      	beq.n	8005d1e <_dtoa_r+0x926>
 8005d12:	45b9      	cmp	r9, r7
 8005d14:	d003      	beq.n	8005d1e <_dtoa_r+0x926>
 8005d16:	4649      	mov	r1, r9
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 f984 	bl	8006026 <_Bfree>
 8005d1e:	4639      	mov	r1, r7
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 f980 	bl	8006026 <_Bfree>
 8005d26:	e6ae      	b.n	8005a86 <_dtoa_r+0x68e>
 8005d28:	2600      	movs	r6, #0
 8005d2a:	4637      	mov	r7, r6
 8005d2c:	e7e1      	b.n	8005cf2 <_dtoa_r+0x8fa>
 8005d2e:	46ba      	mov	sl, r7
 8005d30:	4637      	mov	r7, r6
 8005d32:	e5b1      	b.n	8005898 <_dtoa_r+0x4a0>
 8005d34:	40240000 	.word	0x40240000
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80f3 	beq.w	8005f2a <_dtoa_r+0xb32>
 8005d44:	2d00      	cmp	r5, #0
 8005d46:	dd05      	ble.n	8005d54 <_dtoa_r+0x95c>
 8005d48:	4639      	mov	r1, r7
 8005d4a:	462a      	mov	r2, r5
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 faf7 	bl	8006340 <__lshift>
 8005d52:	4607      	mov	r7, r0
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d04c      	beq.n	8005df4 <_dtoa_r+0x9fc>
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 f92e 	bl	8005fbe <_Balloc>
 8005d62:	4605      	mov	r5, r0
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	f107 010c 	add.w	r1, r7, #12
 8005d6a:	3202      	adds	r2, #2
 8005d6c:	0092      	lsls	r2, r2, #2
 8005d6e:	300c      	adds	r0, #12
 8005d70:	f000 f91a 	bl	8005fa8 <memcpy>
 8005d74:	2201      	movs	r2, #1
 8005d76:	4629      	mov	r1, r5
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fae1 	bl	8006340 <__lshift>
 8005d7e:	46b9      	mov	r9, r7
 8005d80:	4607      	mov	r7, r0
 8005d82:	9b06      	ldr	r3, [sp, #24]
 8005d84:	9307      	str	r3, [sp, #28]
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	9308      	str	r3, [sp, #32]
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4658      	mov	r0, fp
 8005d92:	f7ff faa3 	bl	80052dc <quorem>
 8005d96:	4649      	mov	r1, r9
 8005d98:	4605      	mov	r5, r0
 8005d9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d9e:	4658      	mov	r0, fp
 8005da0:	f000 fb22 	bl	80063e8 <__mcmp>
 8005da4:	463a      	mov	r2, r7
 8005da6:	9002      	str	r0, [sp, #8]
 8005da8:	4631      	mov	r1, r6
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fb36 	bl	800641c <__mdiff>
 8005db0:	68c3      	ldr	r3, [r0, #12]
 8005db2:	4602      	mov	r2, r0
 8005db4:	bb03      	cbnz	r3, 8005df8 <_dtoa_r+0xa00>
 8005db6:	4601      	mov	r1, r0
 8005db8:	9009      	str	r0, [sp, #36]	; 0x24
 8005dba:	4658      	mov	r0, fp
 8005dbc:	f000 fb14 	bl	80063e8 <__mcmp>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dca:	f000 f92c 	bl	8006026 <_Bfree>
 8005dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd0:	b9a3      	cbnz	r3, 8005dfc <_dtoa_r+0xa04>
 8005dd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dd4:	b992      	cbnz	r2, 8005dfc <_dtoa_r+0xa04>
 8005dd6:	9a08      	ldr	r2, [sp, #32]
 8005dd8:	b982      	cbnz	r2, 8005dfc <_dtoa_r+0xa04>
 8005dda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dde:	d029      	beq.n	8005e34 <_dtoa_r+0xa3c>
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	dd01      	ble.n	8005dea <_dtoa_r+0x9f2>
 8005de6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005dea:	9b07      	ldr	r3, [sp, #28]
 8005dec:	1c5d      	adds	r5, r3, #1
 8005dee:	f883 8000 	strb.w	r8, [r3]
 8005df2:	e784      	b.n	8005cfe <_dtoa_r+0x906>
 8005df4:	4638      	mov	r0, r7
 8005df6:	e7c2      	b.n	8005d7e <_dtoa_r+0x986>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e7e3      	b.n	8005dc4 <_dtoa_r+0x9cc>
 8005dfc:	9a02      	ldr	r2, [sp, #8]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	db04      	blt.n	8005e0c <_dtoa_r+0xa14>
 8005e02:	d123      	bne.n	8005e4c <_dtoa_r+0xa54>
 8005e04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e06:	bb0a      	cbnz	r2, 8005e4c <_dtoa_r+0xa54>
 8005e08:	9a08      	ldr	r2, [sp, #32]
 8005e0a:	b9fa      	cbnz	r2, 8005e4c <_dtoa_r+0xa54>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	ddec      	ble.n	8005dea <_dtoa_r+0x9f2>
 8005e10:	4659      	mov	r1, fp
 8005e12:	2201      	movs	r2, #1
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fa93 	bl	8006340 <__lshift>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4683      	mov	fp, r0
 8005e1e:	f000 fae3 	bl	80063e8 <__mcmp>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	dc03      	bgt.n	8005e2e <_dtoa_r+0xa36>
 8005e26:	d1e0      	bne.n	8005dea <_dtoa_r+0x9f2>
 8005e28:	f018 0f01 	tst.w	r8, #1
 8005e2c:	d0dd      	beq.n	8005dea <_dtoa_r+0x9f2>
 8005e2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e32:	d1d8      	bne.n	8005de6 <_dtoa_r+0x9ee>
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	9a07      	ldr	r2, [sp, #28]
 8005e38:	1c5d      	adds	r5, r3, #1
 8005e3a:	2339      	movs	r3, #57	; 0x39
 8005e3c:	7013      	strb	r3, [r2, #0]
 8005e3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e42:	1e6a      	subs	r2, r5, #1
 8005e44:	2b39      	cmp	r3, #57	; 0x39
 8005e46:	d04d      	beq.n	8005ee4 <_dtoa_r+0xaec>
 8005e48:	3301      	adds	r3, #1
 8005e4a:	e052      	b.n	8005ef2 <_dtoa_r+0xafa>
 8005e4c:	9a07      	ldr	r2, [sp, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f102 0501 	add.w	r5, r2, #1
 8005e54:	dd06      	ble.n	8005e64 <_dtoa_r+0xa6c>
 8005e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e5a:	d0eb      	beq.n	8005e34 <_dtoa_r+0xa3c>
 8005e5c:	f108 0801 	add.w	r8, r8, #1
 8005e60:	9b07      	ldr	r3, [sp, #28]
 8005e62:	e7c4      	b.n	8005dee <_dtoa_r+0x9f6>
 8005e64:	9b06      	ldr	r3, [sp, #24]
 8005e66:	9a04      	ldr	r2, [sp, #16]
 8005e68:	1aeb      	subs	r3, r5, r3
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e70:	d021      	beq.n	8005eb6 <_dtoa_r+0xabe>
 8005e72:	4659      	mov	r1, fp
 8005e74:	2300      	movs	r3, #0
 8005e76:	220a      	movs	r2, #10
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 f8eb 	bl	8006054 <__multadd>
 8005e7e:	45b9      	cmp	r9, r7
 8005e80:	4683      	mov	fp, r0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	f04f 020a 	mov.w	r2, #10
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	d105      	bne.n	8005e9c <_dtoa_r+0xaa4>
 8005e90:	f000 f8e0 	bl	8006054 <__multadd>
 8005e94:	4681      	mov	r9, r0
 8005e96:	4607      	mov	r7, r0
 8005e98:	9507      	str	r5, [sp, #28]
 8005e9a:	e778      	b.n	8005d8e <_dtoa_r+0x996>
 8005e9c:	f000 f8da 	bl	8006054 <__multadd>
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	4681      	mov	r9, r0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 f8d3 	bl	8006054 <__multadd>
 8005eae:	4607      	mov	r7, r0
 8005eb0:	e7f2      	b.n	8005e98 <_dtoa_r+0xaa0>
 8005eb2:	f04f 0900 	mov.w	r9, #0
 8005eb6:	4659      	mov	r1, fp
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 fa40 	bl	8006340 <__lshift>
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4683      	mov	fp, r0
 8005ec4:	f000 fa90 	bl	80063e8 <__mcmp>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	dcb8      	bgt.n	8005e3e <_dtoa_r+0xa46>
 8005ecc:	d102      	bne.n	8005ed4 <_dtoa_r+0xadc>
 8005ece:	f018 0f01 	tst.w	r8, #1
 8005ed2:	d1b4      	bne.n	8005e3e <_dtoa_r+0xa46>
 8005ed4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ed8:	1e6a      	subs	r2, r5, #1
 8005eda:	2b30      	cmp	r3, #48	; 0x30
 8005edc:	f47f af0f 	bne.w	8005cfe <_dtoa_r+0x906>
 8005ee0:	4615      	mov	r5, r2
 8005ee2:	e7f7      	b.n	8005ed4 <_dtoa_r+0xadc>
 8005ee4:	9b06      	ldr	r3, [sp, #24]
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d105      	bne.n	8005ef6 <_dtoa_r+0xafe>
 8005eea:	2331      	movs	r3, #49	; 0x31
 8005eec:	9a06      	ldr	r2, [sp, #24]
 8005eee:	f10a 0a01 	add.w	sl, sl, #1
 8005ef2:	7013      	strb	r3, [r2, #0]
 8005ef4:	e703      	b.n	8005cfe <_dtoa_r+0x906>
 8005ef6:	4615      	mov	r5, r2
 8005ef8:	e7a1      	b.n	8005e3e <_dtoa_r+0xa46>
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <_dtoa_r+0xb60>)
 8005efc:	f7ff bae1 	b.w	80054c2 <_dtoa_r+0xca>
 8005f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f47f aabb 	bne.w	800547e <_dtoa_r+0x86>
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <_dtoa_r+0xb64>)
 8005f0a:	f7ff bada 	b.w	80054c2 <_dtoa_r+0xca>
 8005f0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	f77f ae3f 	ble.w	8005b94 <_dtoa_r+0x79c>
 8005f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f18:	9308      	str	r3, [sp, #32]
 8005f1a:	e653      	b.n	8005bc4 <_dtoa_r+0x7cc>
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dc03      	bgt.n	8005f2a <_dtoa_r+0xb32>
 8005f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	f73f aed5 	bgt.w	8005cd4 <_dtoa_r+0x8dc>
 8005f2a:	9d06      	ldr	r5, [sp, #24]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4658      	mov	r0, fp
 8005f30:	f7ff f9d4 	bl	80052dc <quorem>
 8005f34:	9b06      	ldr	r3, [sp, #24]
 8005f36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f3a:	f805 8b01 	strb.w	r8, [r5], #1
 8005f3e:	9a04      	ldr	r2, [sp, #16]
 8005f40:	1aeb      	subs	r3, r5, r3
 8005f42:	429a      	cmp	r2, r3
 8005f44:	ddb5      	ble.n	8005eb2 <_dtoa_r+0xaba>
 8005f46:	4659      	mov	r1, fp
 8005f48:	2300      	movs	r3, #0
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 f881 	bl	8006054 <__multadd>
 8005f52:	4683      	mov	fp, r0
 8005f54:	e7ea      	b.n	8005f2c <_dtoa_r+0xb34>
 8005f56:	bf00      	nop
 8005f58:	08006ae8 	.word	0x08006ae8
 8005f5c:	08006b0c 	.word	0x08006b0c

08005f60 <_localeconv_r>:
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <_localeconv_r+0x14>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6a18      	ldr	r0, [r3, #32]
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <_localeconv_r+0x18>)
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	bf08      	it	eq
 8005f6c:	4618      	moveq	r0, r3
 8005f6e:	30f0      	adds	r0, #240	; 0xf0
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000010 	.word	0x20000010
 8005f78:	20000074 	.word	0x20000074

08005f7c <malloc>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <malloc+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f000 bb53 	b.w	800662c <_malloc_r>
 8005f86:	bf00      	nop
 8005f88:	20000010 	.word	0x20000010

08005f8c <memchr>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	b2c9      	uxtb	r1, r1
 8005f90:	4402      	add	r2, r0
 8005f92:	4290      	cmp	r0, r2
 8005f94:	4603      	mov	r3, r0
 8005f96:	d101      	bne.n	8005f9c <memchr+0x10>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e003      	b.n	8005fa4 <memchr+0x18>
 8005f9c:	781c      	ldrb	r4, [r3, #0]
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	428c      	cmp	r4, r1
 8005fa2:	d1f6      	bne.n	8005f92 <memchr+0x6>
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd10      	pop	{r4, pc}

08005fa8 <memcpy>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	1e43      	subs	r3, r0, #1
 8005fac:	440a      	add	r2, r1
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	d100      	bne.n	8005fb4 <memcpy+0xc>
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fbc:	e7f7      	b.n	8005fae <memcpy+0x6>

08005fbe <_Balloc>:
 8005fbe:	b570      	push	{r4, r5, r6, lr}
 8005fc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460e      	mov	r6, r1
 8005fc6:	b93d      	cbnz	r5, 8005fd8 <_Balloc+0x1a>
 8005fc8:	2010      	movs	r0, #16
 8005fca:	f7ff ffd7 	bl	8005f7c <malloc>
 8005fce:	6260      	str	r0, [r4, #36]	; 0x24
 8005fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fd4:	6005      	str	r5, [r0, #0]
 8005fd6:	60c5      	str	r5, [r0, #12]
 8005fd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fda:	68eb      	ldr	r3, [r5, #12]
 8005fdc:	b183      	cbz	r3, 8006000 <_Balloc+0x42>
 8005fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005fe6:	b9b8      	cbnz	r0, 8006018 <_Balloc+0x5a>
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f506 	lsl.w	r5, r1, r6
 8005fee:	1d6a      	adds	r2, r5, #5
 8005ff0:	0092      	lsls	r2, r2, #2
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fabf 	bl	8006576 <_calloc_r>
 8005ff8:	b160      	cbz	r0, 8006014 <_Balloc+0x56>
 8005ffa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005ffe:	e00e      	b.n	800601e <_Balloc+0x60>
 8006000:	2221      	movs	r2, #33	; 0x21
 8006002:	2104      	movs	r1, #4
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fab6 	bl	8006576 <_calloc_r>
 800600a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800600c:	60e8      	str	r0, [r5, #12]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e4      	bne.n	8005fde <_Balloc+0x20>
 8006014:	2000      	movs	r0, #0
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	6802      	ldr	r2, [r0, #0]
 800601a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800601e:	2300      	movs	r3, #0
 8006020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006024:	e7f7      	b.n	8006016 <_Balloc+0x58>

08006026 <_Bfree>:
 8006026:	b570      	push	{r4, r5, r6, lr}
 8006028:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800602a:	4606      	mov	r6, r0
 800602c:	460d      	mov	r5, r1
 800602e:	b93c      	cbnz	r4, 8006040 <_Bfree+0x1a>
 8006030:	2010      	movs	r0, #16
 8006032:	f7ff ffa3 	bl	8005f7c <malloc>
 8006036:	6270      	str	r0, [r6, #36]	; 0x24
 8006038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800603c:	6004      	str	r4, [r0, #0]
 800603e:	60c4      	str	r4, [r0, #12]
 8006040:	b13d      	cbz	r5, 8006052 <_Bfree+0x2c>
 8006042:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006044:	686a      	ldr	r2, [r5, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800604c:	6029      	str	r1, [r5, #0]
 800604e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006052:	bd70      	pop	{r4, r5, r6, pc}

08006054 <__multadd>:
 8006054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006058:	461f      	mov	r7, r3
 800605a:	4606      	mov	r6, r0
 800605c:	460c      	mov	r4, r1
 800605e:	2300      	movs	r3, #0
 8006060:	690d      	ldr	r5, [r1, #16]
 8006062:	f101 0c14 	add.w	ip, r1, #20
 8006066:	f8dc 0000 	ldr.w	r0, [ip]
 800606a:	3301      	adds	r3, #1
 800606c:	b281      	uxth	r1, r0
 800606e:	fb02 7101 	mla	r1, r2, r1, r7
 8006072:	0c00      	lsrs	r0, r0, #16
 8006074:	0c0f      	lsrs	r7, r1, #16
 8006076:	fb02 7000 	mla	r0, r2, r0, r7
 800607a:	b289      	uxth	r1, r1
 800607c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006080:	429d      	cmp	r5, r3
 8006082:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006086:	f84c 1b04 	str.w	r1, [ip], #4
 800608a:	dcec      	bgt.n	8006066 <__multadd+0x12>
 800608c:	b1d7      	cbz	r7, 80060c4 <__multadd+0x70>
 800608e:	68a3      	ldr	r3, [r4, #8]
 8006090:	42ab      	cmp	r3, r5
 8006092:	dc12      	bgt.n	80060ba <__multadd+0x66>
 8006094:	6861      	ldr	r1, [r4, #4]
 8006096:	4630      	mov	r0, r6
 8006098:	3101      	adds	r1, #1
 800609a:	f7ff ff90 	bl	8005fbe <_Balloc>
 800609e:	4680      	mov	r8, r0
 80060a0:	6922      	ldr	r2, [r4, #16]
 80060a2:	f104 010c 	add.w	r1, r4, #12
 80060a6:	3202      	adds	r2, #2
 80060a8:	0092      	lsls	r2, r2, #2
 80060aa:	300c      	adds	r0, #12
 80060ac:	f7ff ff7c 	bl	8005fa8 <memcpy>
 80060b0:	4621      	mov	r1, r4
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ffb7 	bl	8006026 <_Bfree>
 80060b8:	4644      	mov	r4, r8
 80060ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060be:	3501      	adds	r5, #1
 80060c0:	615f      	str	r7, [r3, #20]
 80060c2:	6125      	str	r5, [r4, #16]
 80060c4:	4620      	mov	r0, r4
 80060c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060ca <__hi0bits>:
 80060ca:	0c02      	lsrs	r2, r0, #16
 80060cc:	0412      	lsls	r2, r2, #16
 80060ce:	4603      	mov	r3, r0
 80060d0:	b9b2      	cbnz	r2, 8006100 <__hi0bits+0x36>
 80060d2:	0403      	lsls	r3, r0, #16
 80060d4:	2010      	movs	r0, #16
 80060d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060da:	bf04      	itt	eq
 80060dc:	021b      	lsleq	r3, r3, #8
 80060de:	3008      	addeq	r0, #8
 80060e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060e4:	bf04      	itt	eq
 80060e6:	011b      	lsleq	r3, r3, #4
 80060e8:	3004      	addeq	r0, #4
 80060ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80060ee:	bf04      	itt	eq
 80060f0:	009b      	lsleq	r3, r3, #2
 80060f2:	3002      	addeq	r0, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db06      	blt.n	8006106 <__hi0bits+0x3c>
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	d503      	bpl.n	8006104 <__hi0bits+0x3a>
 80060fc:	3001      	adds	r0, #1
 80060fe:	4770      	bx	lr
 8006100:	2000      	movs	r0, #0
 8006102:	e7e8      	b.n	80060d6 <__hi0bits+0xc>
 8006104:	2020      	movs	r0, #32
 8006106:	4770      	bx	lr

08006108 <__lo0bits>:
 8006108:	6803      	ldr	r3, [r0, #0]
 800610a:	4601      	mov	r1, r0
 800610c:	f013 0207 	ands.w	r2, r3, #7
 8006110:	d00b      	beq.n	800612a <__lo0bits+0x22>
 8006112:	07da      	lsls	r2, r3, #31
 8006114:	d423      	bmi.n	800615e <__lo0bits+0x56>
 8006116:	0798      	lsls	r0, r3, #30
 8006118:	bf49      	itett	mi
 800611a:	085b      	lsrmi	r3, r3, #1
 800611c:	089b      	lsrpl	r3, r3, #2
 800611e:	2001      	movmi	r0, #1
 8006120:	600b      	strmi	r3, [r1, #0]
 8006122:	bf5c      	itt	pl
 8006124:	600b      	strpl	r3, [r1, #0]
 8006126:	2002      	movpl	r0, #2
 8006128:	4770      	bx	lr
 800612a:	b298      	uxth	r0, r3
 800612c:	b9a8      	cbnz	r0, 800615a <__lo0bits+0x52>
 800612e:	2010      	movs	r0, #16
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006136:	bf04      	itt	eq
 8006138:	0a1b      	lsreq	r3, r3, #8
 800613a:	3008      	addeq	r0, #8
 800613c:	071a      	lsls	r2, r3, #28
 800613e:	bf04      	itt	eq
 8006140:	091b      	lsreq	r3, r3, #4
 8006142:	3004      	addeq	r0, #4
 8006144:	079a      	lsls	r2, r3, #30
 8006146:	bf04      	itt	eq
 8006148:	089b      	lsreq	r3, r3, #2
 800614a:	3002      	addeq	r0, #2
 800614c:	07da      	lsls	r2, r3, #31
 800614e:	d402      	bmi.n	8006156 <__lo0bits+0x4e>
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	d006      	beq.n	8006162 <__lo0bits+0x5a>
 8006154:	3001      	adds	r0, #1
 8006156:	600b      	str	r3, [r1, #0]
 8006158:	4770      	bx	lr
 800615a:	4610      	mov	r0, r2
 800615c:	e7e9      	b.n	8006132 <__lo0bits+0x2a>
 800615e:	2000      	movs	r0, #0
 8006160:	4770      	bx	lr
 8006162:	2020      	movs	r0, #32
 8006164:	4770      	bx	lr

08006166 <__i2b>:
 8006166:	b510      	push	{r4, lr}
 8006168:	460c      	mov	r4, r1
 800616a:	2101      	movs	r1, #1
 800616c:	f7ff ff27 	bl	8005fbe <_Balloc>
 8006170:	2201      	movs	r2, #1
 8006172:	6144      	str	r4, [r0, #20]
 8006174:	6102      	str	r2, [r0, #16]
 8006176:	bd10      	pop	{r4, pc}

08006178 <__multiply>:
 8006178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4614      	mov	r4, r2
 800617e:	690a      	ldr	r2, [r1, #16]
 8006180:	6923      	ldr	r3, [r4, #16]
 8006182:	4688      	mov	r8, r1
 8006184:	429a      	cmp	r2, r3
 8006186:	bfbe      	ittt	lt
 8006188:	460b      	movlt	r3, r1
 800618a:	46a0      	movlt	r8, r4
 800618c:	461c      	movlt	r4, r3
 800618e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006192:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800619a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800619e:	eb07 0609 	add.w	r6, r7, r9
 80061a2:	42b3      	cmp	r3, r6
 80061a4:	bfb8      	it	lt
 80061a6:	3101      	addlt	r1, #1
 80061a8:	f7ff ff09 	bl	8005fbe <_Balloc>
 80061ac:	f100 0514 	add.w	r5, r0, #20
 80061b0:	462b      	mov	r3, r5
 80061b2:	2200      	movs	r2, #0
 80061b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80061b8:	4573      	cmp	r3, lr
 80061ba:	d316      	bcc.n	80061ea <__multiply+0x72>
 80061bc:	f104 0214 	add.w	r2, r4, #20
 80061c0:	f108 0114 	add.w	r1, r8, #20
 80061c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80061c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	9b00      	ldr	r3, [sp, #0]
 80061d0:	9201      	str	r2, [sp, #4]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d80c      	bhi.n	80061f0 <__multiply+0x78>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	dd03      	ble.n	80061e2 <__multiply+0x6a>
 80061da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05d      	beq.n	800629e <__multiply+0x126>
 80061e2:	6106      	str	r6, [r0, #16]
 80061e4:	b003      	add	sp, #12
 80061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ea:	f843 2b04 	str.w	r2, [r3], #4
 80061ee:	e7e3      	b.n	80061b8 <__multiply+0x40>
 80061f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80061f4:	f1bb 0f00 	cmp.w	fp, #0
 80061f8:	d023      	beq.n	8006242 <__multiply+0xca>
 80061fa:	4689      	mov	r9, r1
 80061fc:	46ac      	mov	ip, r5
 80061fe:	f04f 0800 	mov.w	r8, #0
 8006202:	f859 4b04 	ldr.w	r4, [r9], #4
 8006206:	f8dc a000 	ldr.w	sl, [ip]
 800620a:	b2a3      	uxth	r3, r4
 800620c:	fa1f fa8a 	uxth.w	sl, sl
 8006210:	fb0b a303 	mla	r3, fp, r3, sl
 8006214:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006218:	f8dc 4000 	ldr.w	r4, [ip]
 800621c:	4443      	add	r3, r8
 800621e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006222:	fb0b 840a 	mla	r4, fp, sl, r8
 8006226:	46e2      	mov	sl, ip
 8006228:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800622c:	b29b      	uxth	r3, r3
 800622e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006232:	454f      	cmp	r7, r9
 8006234:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006238:	f84a 3b04 	str.w	r3, [sl], #4
 800623c:	d82b      	bhi.n	8006296 <__multiply+0x11e>
 800623e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	3204      	adds	r2, #4
 8006246:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800624a:	f1ba 0f00 	cmp.w	sl, #0
 800624e:	d020      	beq.n	8006292 <__multiply+0x11a>
 8006250:	4689      	mov	r9, r1
 8006252:	46a8      	mov	r8, r5
 8006254:	f04f 0b00 	mov.w	fp, #0
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	f8b9 c000 	ldrh.w	ip, [r9]
 800625e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006262:	b29b      	uxth	r3, r3
 8006264:	fb0a 440c 	mla	r4, sl, ip, r4
 8006268:	46c4      	mov	ip, r8
 800626a:	445c      	add	r4, fp
 800626c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006270:	f84c 3b04 	str.w	r3, [ip], #4
 8006274:	f859 3b04 	ldr.w	r3, [r9], #4
 8006278:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	fb0a b303 	mla	r3, sl, r3, fp
 8006282:	454f      	cmp	r7, r9
 8006284:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006288:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800628c:	d805      	bhi.n	800629a <__multiply+0x122>
 800628e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006292:	3504      	adds	r5, #4
 8006294:	e79b      	b.n	80061ce <__multiply+0x56>
 8006296:	46d4      	mov	ip, sl
 8006298:	e7b3      	b.n	8006202 <__multiply+0x8a>
 800629a:	46e0      	mov	r8, ip
 800629c:	e7dd      	b.n	800625a <__multiply+0xe2>
 800629e:	3e01      	subs	r6, #1
 80062a0:	e799      	b.n	80061d6 <__multiply+0x5e>
	...

080062a4 <__pow5mult>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	4615      	mov	r5, r2
 80062aa:	f012 0203 	ands.w	r2, r2, #3
 80062ae:	4606      	mov	r6, r0
 80062b0:	460f      	mov	r7, r1
 80062b2:	d007      	beq.n	80062c4 <__pow5mult+0x20>
 80062b4:	4c21      	ldr	r4, [pc, #132]	; (800633c <__pow5mult+0x98>)
 80062b6:	3a01      	subs	r2, #1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062be:	f7ff fec9 	bl	8006054 <__multadd>
 80062c2:	4607      	mov	r7, r0
 80062c4:	10ad      	asrs	r5, r5, #2
 80062c6:	d035      	beq.n	8006334 <__pow5mult+0x90>
 80062c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062ca:	b93c      	cbnz	r4, 80062dc <__pow5mult+0x38>
 80062cc:	2010      	movs	r0, #16
 80062ce:	f7ff fe55 	bl	8005f7c <malloc>
 80062d2:	6270      	str	r0, [r6, #36]	; 0x24
 80062d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062d8:	6004      	str	r4, [r0, #0]
 80062da:	60c4      	str	r4, [r0, #12]
 80062dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062e4:	b94c      	cbnz	r4, 80062fa <__pow5mult+0x56>
 80062e6:	f240 2171 	movw	r1, #625	; 0x271
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff3b 	bl	8006166 <__i2b>
 80062f0:	2300      	movs	r3, #0
 80062f2:	4604      	mov	r4, r0
 80062f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80062f8:	6003      	str	r3, [r0, #0]
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	07eb      	lsls	r3, r5, #31
 8006300:	d50a      	bpl.n	8006318 <__pow5mult+0x74>
 8006302:	4639      	mov	r1, r7
 8006304:	4622      	mov	r2, r4
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff ff36 	bl	8006178 <__multiply>
 800630c:	4681      	mov	r9, r0
 800630e:	4639      	mov	r1, r7
 8006310:	4630      	mov	r0, r6
 8006312:	f7ff fe88 	bl	8006026 <_Bfree>
 8006316:	464f      	mov	r7, r9
 8006318:	106d      	asrs	r5, r5, #1
 800631a:	d00b      	beq.n	8006334 <__pow5mult+0x90>
 800631c:	6820      	ldr	r0, [r4, #0]
 800631e:	b938      	cbnz	r0, 8006330 <__pow5mult+0x8c>
 8006320:	4622      	mov	r2, r4
 8006322:	4621      	mov	r1, r4
 8006324:	4630      	mov	r0, r6
 8006326:	f7ff ff27 	bl	8006178 <__multiply>
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	f8c0 8000 	str.w	r8, [r0]
 8006330:	4604      	mov	r4, r0
 8006332:	e7e4      	b.n	80062fe <__pow5mult+0x5a>
 8006334:	4638      	mov	r0, r7
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	bf00      	nop
 800633c:	08006c10 	.word	0x08006c10

08006340 <__lshift>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	4607      	mov	r7, r0
 8006348:	4616      	mov	r6, r2
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006350:	eb0a 0903 	add.w	r9, sl, r3
 8006354:	6849      	ldr	r1, [r1, #4]
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	f109 0501 	add.w	r5, r9, #1
 800635c:	42ab      	cmp	r3, r5
 800635e:	db32      	blt.n	80063c6 <__lshift+0x86>
 8006360:	4638      	mov	r0, r7
 8006362:	f7ff fe2c 	bl	8005fbe <_Balloc>
 8006366:	2300      	movs	r3, #0
 8006368:	4680      	mov	r8, r0
 800636a:	461a      	mov	r2, r3
 800636c:	f100 0114 	add.w	r1, r0, #20
 8006370:	4553      	cmp	r3, sl
 8006372:	db2b      	blt.n	80063cc <__lshift+0x8c>
 8006374:	6920      	ldr	r0, [r4, #16]
 8006376:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800637a:	f104 0314 	add.w	r3, r4, #20
 800637e:	f016 021f 	ands.w	r2, r6, #31
 8006382:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006386:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800638a:	d025      	beq.n	80063d8 <__lshift+0x98>
 800638c:	2000      	movs	r0, #0
 800638e:	f1c2 0e20 	rsb	lr, r2, #32
 8006392:	468a      	mov	sl, r1
 8006394:	681e      	ldr	r6, [r3, #0]
 8006396:	4096      	lsls	r6, r2
 8006398:	4330      	orrs	r0, r6
 800639a:	f84a 0b04 	str.w	r0, [sl], #4
 800639e:	f853 0b04 	ldr.w	r0, [r3], #4
 80063a2:	459c      	cmp	ip, r3
 80063a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80063a8:	d814      	bhi.n	80063d4 <__lshift+0x94>
 80063aa:	6048      	str	r0, [r1, #4]
 80063ac:	b108      	cbz	r0, 80063b2 <__lshift+0x72>
 80063ae:	f109 0502 	add.w	r5, r9, #2
 80063b2:	3d01      	subs	r5, #1
 80063b4:	4638      	mov	r0, r7
 80063b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80063ba:	4621      	mov	r1, r4
 80063bc:	f7ff fe33 	bl	8006026 <_Bfree>
 80063c0:	4640      	mov	r0, r8
 80063c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c6:	3101      	adds	r1, #1
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	e7c7      	b.n	800635c <__lshift+0x1c>
 80063cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80063d0:	3301      	adds	r3, #1
 80063d2:	e7cd      	b.n	8006370 <__lshift+0x30>
 80063d4:	4651      	mov	r1, sl
 80063d6:	e7dc      	b.n	8006392 <__lshift+0x52>
 80063d8:	3904      	subs	r1, #4
 80063da:	f853 2b04 	ldr.w	r2, [r3], #4
 80063de:	459c      	cmp	ip, r3
 80063e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e4:	d8f9      	bhi.n	80063da <__lshift+0x9a>
 80063e6:	e7e4      	b.n	80063b2 <__lshift+0x72>

080063e8 <__mcmp>:
 80063e8:	6903      	ldr	r3, [r0, #16]
 80063ea:	690a      	ldr	r2, [r1, #16]
 80063ec:	b530      	push	{r4, r5, lr}
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	d10c      	bne.n	800640c <__mcmp+0x24>
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	3014      	adds	r0, #20
 80063f6:	3114      	adds	r1, #20
 80063f8:	1884      	adds	r4, r0, r2
 80063fa:	4411      	add	r1, r2
 80063fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006400:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006404:	4295      	cmp	r5, r2
 8006406:	d003      	beq.n	8006410 <__mcmp+0x28>
 8006408:	d305      	bcc.n	8006416 <__mcmp+0x2e>
 800640a:	2301      	movs	r3, #1
 800640c:	4618      	mov	r0, r3
 800640e:	bd30      	pop	{r4, r5, pc}
 8006410:	42a0      	cmp	r0, r4
 8006412:	d3f3      	bcc.n	80063fc <__mcmp+0x14>
 8006414:	e7fa      	b.n	800640c <__mcmp+0x24>
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	e7f7      	b.n	800640c <__mcmp+0x24>

0800641c <__mdiff>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	460d      	mov	r5, r1
 8006422:	4607      	mov	r7, r0
 8006424:	4611      	mov	r1, r2
 8006426:	4628      	mov	r0, r5
 8006428:	4614      	mov	r4, r2
 800642a:	f7ff ffdd 	bl	80063e8 <__mcmp>
 800642e:	1e06      	subs	r6, r0, #0
 8006430:	d108      	bne.n	8006444 <__mdiff+0x28>
 8006432:	4631      	mov	r1, r6
 8006434:	4638      	mov	r0, r7
 8006436:	f7ff fdc2 	bl	8005fbe <_Balloc>
 800643a:	2301      	movs	r3, #1
 800643c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006444:	bfa4      	itt	ge
 8006446:	4623      	movge	r3, r4
 8006448:	462c      	movge	r4, r5
 800644a:	4638      	mov	r0, r7
 800644c:	6861      	ldr	r1, [r4, #4]
 800644e:	bfa6      	itte	ge
 8006450:	461d      	movge	r5, r3
 8006452:	2600      	movge	r6, #0
 8006454:	2601      	movlt	r6, #1
 8006456:	f7ff fdb2 	bl	8005fbe <_Balloc>
 800645a:	f04f 0e00 	mov.w	lr, #0
 800645e:	60c6      	str	r6, [r0, #12]
 8006460:	692b      	ldr	r3, [r5, #16]
 8006462:	6926      	ldr	r6, [r4, #16]
 8006464:	f104 0214 	add.w	r2, r4, #20
 8006468:	f105 0914 	add.w	r9, r5, #20
 800646c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006470:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006474:	f100 0114 	add.w	r1, r0, #20
 8006478:	f852 ab04 	ldr.w	sl, [r2], #4
 800647c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006480:	fa1f f38a 	uxth.w	r3, sl
 8006484:	4473      	add	r3, lr
 8006486:	b2ac      	uxth	r4, r5
 8006488:	1b1b      	subs	r3, r3, r4
 800648a:	0c2c      	lsrs	r4, r5, #16
 800648c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006490:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006494:	b29b      	uxth	r3, r3
 8006496:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800649a:	45c8      	cmp	r8, r9
 800649c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80064a0:	4694      	mov	ip, r2
 80064a2:	f841 4b04 	str.w	r4, [r1], #4
 80064a6:	d8e7      	bhi.n	8006478 <__mdiff+0x5c>
 80064a8:	45bc      	cmp	ip, r7
 80064aa:	d304      	bcc.n	80064b6 <__mdiff+0x9a>
 80064ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80064b0:	b183      	cbz	r3, 80064d4 <__mdiff+0xb8>
 80064b2:	6106      	str	r6, [r0, #16]
 80064b4:	e7c4      	b.n	8006440 <__mdiff+0x24>
 80064b6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80064ba:	b2a2      	uxth	r2, r4
 80064bc:	4472      	add	r2, lr
 80064be:	1413      	asrs	r3, r2, #16
 80064c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064c4:	b292      	uxth	r2, r2
 80064c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80064ca:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80064ce:	f841 2b04 	str.w	r2, [r1], #4
 80064d2:	e7e9      	b.n	80064a8 <__mdiff+0x8c>
 80064d4:	3e01      	subs	r6, #1
 80064d6:	e7e9      	b.n	80064ac <__mdiff+0x90>

080064d8 <__d2b>:
 80064d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064dc:	461c      	mov	r4, r3
 80064de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80064e2:	2101      	movs	r1, #1
 80064e4:	4690      	mov	r8, r2
 80064e6:	f7ff fd6a 	bl	8005fbe <_Balloc>
 80064ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80064ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80064f2:	4607      	mov	r7, r0
 80064f4:	bb34      	cbnz	r4, 8006544 <__d2b+0x6c>
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	f1b8 0200 	subs.w	r2, r8, #0
 80064fc:	d027      	beq.n	800654e <__d2b+0x76>
 80064fe:	a802      	add	r0, sp, #8
 8006500:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006504:	f7ff fe00 	bl	8006108 <__lo0bits>
 8006508:	9900      	ldr	r1, [sp, #0]
 800650a:	b1f0      	cbz	r0, 800654a <__d2b+0x72>
 800650c:	9a01      	ldr	r2, [sp, #4]
 800650e:	f1c0 0320 	rsb	r3, r0, #32
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	430b      	orrs	r3, r1
 8006518:	40c2      	lsrs	r2, r0
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	9201      	str	r2, [sp, #4]
 800651e:	9b01      	ldr	r3, [sp, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2102      	movne	r1, #2
 8006526:	2101      	moveq	r1, #1
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	6139      	str	r1, [r7, #16]
 800652c:	b1c4      	cbz	r4, 8006560 <__d2b+0x88>
 800652e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006532:	4404      	add	r4, r0
 8006534:	6034      	str	r4, [r6, #0]
 8006536:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800653a:	6028      	str	r0, [r5, #0]
 800653c:	4638      	mov	r0, r7
 800653e:	b002      	add	sp, #8
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006548:	e7d5      	b.n	80064f6 <__d2b+0x1e>
 800654a:	6179      	str	r1, [r7, #20]
 800654c:	e7e7      	b.n	800651e <__d2b+0x46>
 800654e:	a801      	add	r0, sp, #4
 8006550:	f7ff fdda 	bl	8006108 <__lo0bits>
 8006554:	2101      	movs	r1, #1
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	6139      	str	r1, [r7, #16]
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	3020      	adds	r0, #32
 800655e:	e7e5      	b.n	800652c <__d2b+0x54>
 8006560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006564:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006568:	6030      	str	r0, [r6, #0]
 800656a:	6918      	ldr	r0, [r3, #16]
 800656c:	f7ff fdad 	bl	80060ca <__hi0bits>
 8006570:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006574:	e7e1      	b.n	800653a <__d2b+0x62>

08006576 <_calloc_r>:
 8006576:	b538      	push	{r3, r4, r5, lr}
 8006578:	fb02 f401 	mul.w	r4, r2, r1
 800657c:	4621      	mov	r1, r4
 800657e:	f000 f855 	bl	800662c <_malloc_r>
 8006582:	4605      	mov	r5, r0
 8006584:	b118      	cbz	r0, 800658e <_calloc_r+0x18>
 8006586:	4622      	mov	r2, r4
 8006588:	2100      	movs	r1, #0
 800658a:	f7fe fa2f 	bl	80049ec <memset>
 800658e:	4628      	mov	r0, r5
 8006590:	bd38      	pop	{r3, r4, r5, pc}
	...

08006594 <_free_r>:
 8006594:	b538      	push	{r3, r4, r5, lr}
 8006596:	4605      	mov	r5, r0
 8006598:	2900      	cmp	r1, #0
 800659a:	d043      	beq.n	8006624 <_free_r+0x90>
 800659c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a0:	1f0c      	subs	r4, r1, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfb8      	it	lt
 80065a6:	18e4      	addlt	r4, r4, r3
 80065a8:	f000 fa27 	bl	80069fa <__malloc_lock>
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <_free_r+0x94>)
 80065ae:	6813      	ldr	r3, [r2, #0]
 80065b0:	4610      	mov	r0, r2
 80065b2:	b933      	cbnz	r3, 80065c2 <_free_r+0x2e>
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	6014      	str	r4, [r2, #0]
 80065b8:	4628      	mov	r0, r5
 80065ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065be:	f000 ba1d 	b.w	80069fc <__malloc_unlock>
 80065c2:	42a3      	cmp	r3, r4
 80065c4:	d90b      	bls.n	80065de <_free_r+0x4a>
 80065c6:	6821      	ldr	r1, [r4, #0]
 80065c8:	1862      	adds	r2, r4, r1
 80065ca:	4293      	cmp	r3, r2
 80065cc:	bf01      	itttt	eq
 80065ce:	681a      	ldreq	r2, [r3, #0]
 80065d0:	685b      	ldreq	r3, [r3, #4]
 80065d2:	1852      	addeq	r2, r2, r1
 80065d4:	6022      	streq	r2, [r4, #0]
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6004      	str	r4, [r0, #0]
 80065da:	e7ed      	b.n	80065b8 <_free_r+0x24>
 80065dc:	4613      	mov	r3, r2
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	b10a      	cbz	r2, 80065e6 <_free_r+0x52>
 80065e2:	42a2      	cmp	r2, r4
 80065e4:	d9fa      	bls.n	80065dc <_free_r+0x48>
 80065e6:	6819      	ldr	r1, [r3, #0]
 80065e8:	1858      	adds	r0, r3, r1
 80065ea:	42a0      	cmp	r0, r4
 80065ec:	d10b      	bne.n	8006606 <_free_r+0x72>
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	4401      	add	r1, r0
 80065f2:	1858      	adds	r0, r3, r1
 80065f4:	4282      	cmp	r2, r0
 80065f6:	6019      	str	r1, [r3, #0]
 80065f8:	d1de      	bne.n	80065b8 <_free_r+0x24>
 80065fa:	6810      	ldr	r0, [r2, #0]
 80065fc:	6852      	ldr	r2, [r2, #4]
 80065fe:	4401      	add	r1, r0
 8006600:	6019      	str	r1, [r3, #0]
 8006602:	605a      	str	r2, [r3, #4]
 8006604:	e7d8      	b.n	80065b8 <_free_r+0x24>
 8006606:	d902      	bls.n	800660e <_free_r+0x7a>
 8006608:	230c      	movs	r3, #12
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	e7d4      	b.n	80065b8 <_free_r+0x24>
 800660e:	6820      	ldr	r0, [r4, #0]
 8006610:	1821      	adds	r1, r4, r0
 8006612:	428a      	cmp	r2, r1
 8006614:	bf01      	itttt	eq
 8006616:	6811      	ldreq	r1, [r2, #0]
 8006618:	6852      	ldreq	r2, [r2, #4]
 800661a:	1809      	addeq	r1, r1, r0
 800661c:	6021      	streq	r1, [r4, #0]
 800661e:	6062      	str	r2, [r4, #4]
 8006620:	605c      	str	r4, [r3, #4]
 8006622:	e7c9      	b.n	80065b8 <_free_r+0x24>
 8006624:	bd38      	pop	{r3, r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	20000238 	.word	0x20000238

0800662c <_malloc_r>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	1ccd      	adds	r5, r1, #3
 8006630:	f025 0503 	bic.w	r5, r5, #3
 8006634:	3508      	adds	r5, #8
 8006636:	2d0c      	cmp	r5, #12
 8006638:	bf38      	it	cc
 800663a:	250c      	movcc	r5, #12
 800663c:	2d00      	cmp	r5, #0
 800663e:	4606      	mov	r6, r0
 8006640:	db01      	blt.n	8006646 <_malloc_r+0x1a>
 8006642:	42a9      	cmp	r1, r5
 8006644:	d903      	bls.n	800664e <_malloc_r+0x22>
 8006646:	230c      	movs	r3, #12
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	2000      	movs	r0, #0
 800664c:	bd70      	pop	{r4, r5, r6, pc}
 800664e:	f000 f9d4 	bl	80069fa <__malloc_lock>
 8006652:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <_malloc_r+0xac>)
 8006654:	6814      	ldr	r4, [r2, #0]
 8006656:	4621      	mov	r1, r4
 8006658:	b991      	cbnz	r1, 8006680 <_malloc_r+0x54>
 800665a:	4c20      	ldr	r4, [pc, #128]	; (80066dc <_malloc_r+0xb0>)
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	b91b      	cbnz	r3, 8006668 <_malloc_r+0x3c>
 8006660:	4630      	mov	r0, r6
 8006662:	f000 f98f 	bl	8006984 <_sbrk_r>
 8006666:	6020      	str	r0, [r4, #0]
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f000 f98a 	bl	8006984 <_sbrk_r>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d124      	bne.n	80066be <_malloc_r+0x92>
 8006674:	230c      	movs	r3, #12
 8006676:	4630      	mov	r0, r6
 8006678:	6033      	str	r3, [r6, #0]
 800667a:	f000 f9bf 	bl	80069fc <__malloc_unlock>
 800667e:	e7e4      	b.n	800664a <_malloc_r+0x1e>
 8006680:	680b      	ldr	r3, [r1, #0]
 8006682:	1b5b      	subs	r3, r3, r5
 8006684:	d418      	bmi.n	80066b8 <_malloc_r+0x8c>
 8006686:	2b0b      	cmp	r3, #11
 8006688:	d90f      	bls.n	80066aa <_malloc_r+0x7e>
 800668a:	600b      	str	r3, [r1, #0]
 800668c:	18cc      	adds	r4, r1, r3
 800668e:	50cd      	str	r5, [r1, r3]
 8006690:	4630      	mov	r0, r6
 8006692:	f000 f9b3 	bl	80069fc <__malloc_unlock>
 8006696:	f104 000b 	add.w	r0, r4, #11
 800669a:	1d23      	adds	r3, r4, #4
 800669c:	f020 0007 	bic.w	r0, r0, #7
 80066a0:	1ac3      	subs	r3, r0, r3
 80066a2:	d0d3      	beq.n	800664c <_malloc_r+0x20>
 80066a4:	425a      	negs	r2, r3
 80066a6:	50e2      	str	r2, [r4, r3]
 80066a8:	e7d0      	b.n	800664c <_malloc_r+0x20>
 80066aa:	684b      	ldr	r3, [r1, #4]
 80066ac:	428c      	cmp	r4, r1
 80066ae:	bf16      	itet	ne
 80066b0:	6063      	strne	r3, [r4, #4]
 80066b2:	6013      	streq	r3, [r2, #0]
 80066b4:	460c      	movne	r4, r1
 80066b6:	e7eb      	b.n	8006690 <_malloc_r+0x64>
 80066b8:	460c      	mov	r4, r1
 80066ba:	6849      	ldr	r1, [r1, #4]
 80066bc:	e7cc      	b.n	8006658 <_malloc_r+0x2c>
 80066be:	1cc4      	adds	r4, r0, #3
 80066c0:	f024 0403 	bic.w	r4, r4, #3
 80066c4:	42a0      	cmp	r0, r4
 80066c6:	d005      	beq.n	80066d4 <_malloc_r+0xa8>
 80066c8:	1a21      	subs	r1, r4, r0
 80066ca:	4630      	mov	r0, r6
 80066cc:	f000 f95a 	bl	8006984 <_sbrk_r>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d0cf      	beq.n	8006674 <_malloc_r+0x48>
 80066d4:	6025      	str	r5, [r4, #0]
 80066d6:	e7db      	b.n	8006690 <_malloc_r+0x64>
 80066d8:	20000238 	.word	0x20000238
 80066dc:	2000023c 	.word	0x2000023c

080066e0 <__ssputs_r>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	688e      	ldr	r6, [r1, #8]
 80066e6:	4682      	mov	sl, r0
 80066e8:	429e      	cmp	r6, r3
 80066ea:	460c      	mov	r4, r1
 80066ec:	4690      	mov	r8, r2
 80066ee:	4699      	mov	r9, r3
 80066f0:	d837      	bhi.n	8006762 <__ssputs_r+0x82>
 80066f2:	898a      	ldrh	r2, [r1, #12]
 80066f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066f8:	d031      	beq.n	800675e <__ssputs_r+0x7e>
 80066fa:	2302      	movs	r3, #2
 80066fc:	6825      	ldr	r5, [r4, #0]
 80066fe:	6909      	ldr	r1, [r1, #16]
 8006700:	1a6f      	subs	r7, r5, r1
 8006702:	6965      	ldr	r5, [r4, #20]
 8006704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006708:	fb95 f5f3 	sdiv	r5, r5, r3
 800670c:	f109 0301 	add.w	r3, r9, #1
 8006710:	443b      	add	r3, r7
 8006712:	429d      	cmp	r5, r3
 8006714:	bf38      	it	cc
 8006716:	461d      	movcc	r5, r3
 8006718:	0553      	lsls	r3, r2, #21
 800671a:	d530      	bpl.n	800677e <__ssputs_r+0x9e>
 800671c:	4629      	mov	r1, r5
 800671e:	f7ff ff85 	bl	800662c <_malloc_r>
 8006722:	4606      	mov	r6, r0
 8006724:	b950      	cbnz	r0, 800673c <__ssputs_r+0x5c>
 8006726:	230c      	movs	r3, #12
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	f8ca 3000 	str.w	r3, [sl]
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	463a      	mov	r2, r7
 800673e:	6921      	ldr	r1, [r4, #16]
 8006740:	f7ff fc32 	bl	8005fa8 <memcpy>
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800674a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	6126      	str	r6, [r4, #16]
 8006752:	443e      	add	r6, r7
 8006754:	6026      	str	r6, [r4, #0]
 8006756:	464e      	mov	r6, r9
 8006758:	6165      	str	r5, [r4, #20]
 800675a:	1bed      	subs	r5, r5, r7
 800675c:	60a5      	str	r5, [r4, #8]
 800675e:	454e      	cmp	r6, r9
 8006760:	d900      	bls.n	8006764 <__ssputs_r+0x84>
 8006762:	464e      	mov	r6, r9
 8006764:	4632      	mov	r2, r6
 8006766:	4641      	mov	r1, r8
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	f000 f92d 	bl	80069c8 <memmove>
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	2000      	movs	r0, #0
 8006772:	1b9b      	subs	r3, r3, r6
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	441e      	add	r6, r3
 800677a:	6026      	str	r6, [r4, #0]
 800677c:	e7dc      	b.n	8006738 <__ssputs_r+0x58>
 800677e:	462a      	mov	r2, r5
 8006780:	f000 f93d 	bl	80069fe <_realloc_r>
 8006784:	4606      	mov	r6, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d1e2      	bne.n	8006750 <__ssputs_r+0x70>
 800678a:	6921      	ldr	r1, [r4, #16]
 800678c:	4650      	mov	r0, sl
 800678e:	f7ff ff01 	bl	8006594 <_free_r>
 8006792:	e7c8      	b.n	8006726 <__ssputs_r+0x46>

08006794 <_svfiprintf_r>:
 8006794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006798:	461d      	mov	r5, r3
 800679a:	898b      	ldrh	r3, [r1, #12]
 800679c:	b09d      	sub	sp, #116	; 0x74
 800679e:	061f      	lsls	r7, r3, #24
 80067a0:	4680      	mov	r8, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	4616      	mov	r6, r2
 80067a6:	d50f      	bpl.n	80067c8 <_svfiprintf_r+0x34>
 80067a8:	690b      	ldr	r3, [r1, #16]
 80067aa:	b96b      	cbnz	r3, 80067c8 <_svfiprintf_r+0x34>
 80067ac:	2140      	movs	r1, #64	; 0x40
 80067ae:	f7ff ff3d 	bl	800662c <_malloc_r>
 80067b2:	6020      	str	r0, [r4, #0]
 80067b4:	6120      	str	r0, [r4, #16]
 80067b6:	b928      	cbnz	r0, 80067c4 <_svfiprintf_r+0x30>
 80067b8:	230c      	movs	r3, #12
 80067ba:	f8c8 3000 	str.w	r3, [r8]
 80067be:	f04f 30ff 	mov.w	r0, #4294967295
 80067c2:	e0c8      	b.n	8006956 <_svfiprintf_r+0x1c2>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	6163      	str	r3, [r4, #20]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	2320      	movs	r3, #32
 80067ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067d2:	2330      	movs	r3, #48	; 0x30
 80067d4:	f04f 0b01 	mov.w	fp, #1
 80067d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067dc:	9503      	str	r5, [sp, #12]
 80067de:	4637      	mov	r7, r6
 80067e0:	463d      	mov	r5, r7
 80067e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067e6:	b10b      	cbz	r3, 80067ec <_svfiprintf_r+0x58>
 80067e8:	2b25      	cmp	r3, #37	; 0x25
 80067ea:	d13e      	bne.n	800686a <_svfiprintf_r+0xd6>
 80067ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80067f0:	d00b      	beq.n	800680a <_svfiprintf_r+0x76>
 80067f2:	4653      	mov	r3, sl
 80067f4:	4632      	mov	r2, r6
 80067f6:	4621      	mov	r1, r4
 80067f8:	4640      	mov	r0, r8
 80067fa:	f7ff ff71 	bl	80066e0 <__ssputs_r>
 80067fe:	3001      	adds	r0, #1
 8006800:	f000 80a4 	beq.w	800694c <_svfiprintf_r+0x1b8>
 8006804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006806:	4453      	add	r3, sl
 8006808:	9309      	str	r3, [sp, #36]	; 0x24
 800680a:	783b      	ldrb	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 809d 	beq.w	800694c <_svfiprintf_r+0x1b8>
 8006812:	2300      	movs	r3, #0
 8006814:	f04f 32ff 	mov.w	r2, #4294967295
 8006818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	9307      	str	r3, [sp, #28]
 8006820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006824:	931a      	str	r3, [sp, #104]	; 0x68
 8006826:	462f      	mov	r7, r5
 8006828:	2205      	movs	r2, #5
 800682a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800682e:	4850      	ldr	r0, [pc, #320]	; (8006970 <_svfiprintf_r+0x1dc>)
 8006830:	f7ff fbac 	bl	8005f8c <memchr>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	b9d0      	cbnz	r0, 800686e <_svfiprintf_r+0xda>
 8006838:	06d9      	lsls	r1, r3, #27
 800683a:	bf44      	itt	mi
 800683c:	2220      	movmi	r2, #32
 800683e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006842:	071a      	lsls	r2, r3, #28
 8006844:	bf44      	itt	mi
 8006846:	222b      	movmi	r2, #43	; 0x2b
 8006848:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800684c:	782a      	ldrb	r2, [r5, #0]
 800684e:	2a2a      	cmp	r2, #42	; 0x2a
 8006850:	d015      	beq.n	800687e <_svfiprintf_r+0xea>
 8006852:	462f      	mov	r7, r5
 8006854:	2000      	movs	r0, #0
 8006856:	250a      	movs	r5, #10
 8006858:	9a07      	ldr	r2, [sp, #28]
 800685a:	4639      	mov	r1, r7
 800685c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006860:	3b30      	subs	r3, #48	; 0x30
 8006862:	2b09      	cmp	r3, #9
 8006864:	d94d      	bls.n	8006902 <_svfiprintf_r+0x16e>
 8006866:	b1b8      	cbz	r0, 8006898 <_svfiprintf_r+0x104>
 8006868:	e00f      	b.n	800688a <_svfiprintf_r+0xf6>
 800686a:	462f      	mov	r7, r5
 800686c:	e7b8      	b.n	80067e0 <_svfiprintf_r+0x4c>
 800686e:	4a40      	ldr	r2, [pc, #256]	; (8006970 <_svfiprintf_r+0x1dc>)
 8006870:	463d      	mov	r5, r7
 8006872:	1a80      	subs	r0, r0, r2
 8006874:	fa0b f000 	lsl.w	r0, fp, r0
 8006878:	4318      	orrs	r0, r3
 800687a:	9004      	str	r0, [sp, #16]
 800687c:	e7d3      	b.n	8006826 <_svfiprintf_r+0x92>
 800687e:	9a03      	ldr	r2, [sp, #12]
 8006880:	1d11      	adds	r1, r2, #4
 8006882:	6812      	ldr	r2, [r2, #0]
 8006884:	9103      	str	r1, [sp, #12]
 8006886:	2a00      	cmp	r2, #0
 8006888:	db01      	blt.n	800688e <_svfiprintf_r+0xfa>
 800688a:	9207      	str	r2, [sp, #28]
 800688c:	e004      	b.n	8006898 <_svfiprintf_r+0x104>
 800688e:	4252      	negs	r2, r2
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	9207      	str	r2, [sp, #28]
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	783b      	ldrb	r3, [r7, #0]
 800689a:	2b2e      	cmp	r3, #46	; 0x2e
 800689c:	d10c      	bne.n	80068b8 <_svfiprintf_r+0x124>
 800689e:	787b      	ldrb	r3, [r7, #1]
 80068a0:	2b2a      	cmp	r3, #42	; 0x2a
 80068a2:	d133      	bne.n	800690c <_svfiprintf_r+0x178>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	3702      	adds	r7, #2
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	9203      	str	r2, [sp, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfb8      	it	lt
 80068b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	4d2e      	ldr	r5, [pc, #184]	; (8006974 <_svfiprintf_r+0x1e0>)
 80068ba:	2203      	movs	r2, #3
 80068bc:	7839      	ldrb	r1, [r7, #0]
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff fb64 	bl	8005f8c <memchr>
 80068c4:	b138      	cbz	r0, 80068d6 <_svfiprintf_r+0x142>
 80068c6:	2340      	movs	r3, #64	; 0x40
 80068c8:	1b40      	subs	r0, r0, r5
 80068ca:	fa03 f000 	lsl.w	r0, r3, r0
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	3701      	adds	r7, #1
 80068d2:	4303      	orrs	r3, r0
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	7839      	ldrb	r1, [r7, #0]
 80068d8:	2206      	movs	r2, #6
 80068da:	4827      	ldr	r0, [pc, #156]	; (8006978 <_svfiprintf_r+0x1e4>)
 80068dc:	1c7e      	adds	r6, r7, #1
 80068de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068e2:	f7ff fb53 	bl	8005f8c <memchr>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d038      	beq.n	800695c <_svfiprintf_r+0x1c8>
 80068ea:	4b24      	ldr	r3, [pc, #144]	; (800697c <_svfiprintf_r+0x1e8>)
 80068ec:	bb13      	cbnz	r3, 8006934 <_svfiprintf_r+0x1a0>
 80068ee:	9b03      	ldr	r3, [sp, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	f023 0307 	bic.w	r3, r3, #7
 80068f6:	3308      	adds	r3, #8
 80068f8:	9303      	str	r3, [sp, #12]
 80068fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fc:	444b      	add	r3, r9
 80068fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006900:	e76d      	b.n	80067de <_svfiprintf_r+0x4a>
 8006902:	fb05 3202 	mla	r2, r5, r2, r3
 8006906:	2001      	movs	r0, #1
 8006908:	460f      	mov	r7, r1
 800690a:	e7a6      	b.n	800685a <_svfiprintf_r+0xc6>
 800690c:	2300      	movs	r3, #0
 800690e:	250a      	movs	r5, #10
 8006910:	4619      	mov	r1, r3
 8006912:	3701      	adds	r7, #1
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	4638      	mov	r0, r7
 8006918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800691c:	3a30      	subs	r2, #48	; 0x30
 800691e:	2a09      	cmp	r2, #9
 8006920:	d903      	bls.n	800692a <_svfiprintf_r+0x196>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0c8      	beq.n	80068b8 <_svfiprintf_r+0x124>
 8006926:	9105      	str	r1, [sp, #20]
 8006928:	e7c6      	b.n	80068b8 <_svfiprintf_r+0x124>
 800692a:	fb05 2101 	mla	r1, r5, r1, r2
 800692e:	2301      	movs	r3, #1
 8006930:	4607      	mov	r7, r0
 8006932:	e7f0      	b.n	8006916 <_svfiprintf_r+0x182>
 8006934:	ab03      	add	r3, sp, #12
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	4622      	mov	r2, r4
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <_svfiprintf_r+0x1ec>)
 800693c:	a904      	add	r1, sp, #16
 800693e:	4640      	mov	r0, r8
 8006940:	f7fe f8ee 	bl	8004b20 <_printf_float>
 8006944:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006948:	4681      	mov	r9, r0
 800694a:	d1d6      	bne.n	80068fa <_svfiprintf_r+0x166>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	065b      	lsls	r3, r3, #25
 8006950:	f53f af35 	bmi.w	80067be <_svfiprintf_r+0x2a>
 8006954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006956:	b01d      	add	sp, #116	; 0x74
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	ab03      	add	r3, sp, #12
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4622      	mov	r2, r4
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <_svfiprintf_r+0x1ec>)
 8006964:	a904      	add	r1, sp, #16
 8006966:	4640      	mov	r0, r8
 8006968:	f7fe fb86 	bl	8005078 <_printf_i>
 800696c:	e7ea      	b.n	8006944 <_svfiprintf_r+0x1b0>
 800696e:	bf00      	nop
 8006970:	08006c1c 	.word	0x08006c1c
 8006974:	08006c22 	.word	0x08006c22
 8006978:	08006c26 	.word	0x08006c26
 800697c:	08004b21 	.word	0x08004b21
 8006980:	080066e1 	.word	0x080066e1

08006984 <_sbrk_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	2300      	movs	r3, #0
 8006988:	4c05      	ldr	r4, [pc, #20]	; (80069a0 <_sbrk_r+0x1c>)
 800698a:	4605      	mov	r5, r0
 800698c:	4608      	mov	r0, r1
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	f7fb fcd8 	bl	8002344 <_sbrk>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_sbrk_r+0x1a>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	b103      	cbz	r3, 800699e <_sbrk_r+0x1a>
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	2000046c 	.word	0x2000046c

080069a4 <__ascii_mbtowc>:
 80069a4:	b082      	sub	sp, #8
 80069a6:	b901      	cbnz	r1, 80069aa <__ascii_mbtowc+0x6>
 80069a8:	a901      	add	r1, sp, #4
 80069aa:	b142      	cbz	r2, 80069be <__ascii_mbtowc+0x1a>
 80069ac:	b14b      	cbz	r3, 80069c2 <__ascii_mbtowc+0x1e>
 80069ae:	7813      	ldrb	r3, [r2, #0]
 80069b0:	600b      	str	r3, [r1, #0]
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	1c10      	adds	r0, r2, #0
 80069b6:	bf18      	it	ne
 80069b8:	2001      	movne	r0, #1
 80069ba:	b002      	add	sp, #8
 80069bc:	4770      	bx	lr
 80069be:	4610      	mov	r0, r2
 80069c0:	e7fb      	b.n	80069ba <__ascii_mbtowc+0x16>
 80069c2:	f06f 0001 	mvn.w	r0, #1
 80069c6:	e7f8      	b.n	80069ba <__ascii_mbtowc+0x16>

080069c8 <memmove>:
 80069c8:	4288      	cmp	r0, r1
 80069ca:	b510      	push	{r4, lr}
 80069cc:	eb01 0302 	add.w	r3, r1, r2
 80069d0:	d807      	bhi.n	80069e2 <memmove+0x1a>
 80069d2:	1e42      	subs	r2, r0, #1
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d00a      	beq.n	80069ee <memmove+0x26>
 80069d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069e0:	e7f8      	b.n	80069d4 <memmove+0xc>
 80069e2:	4283      	cmp	r3, r0
 80069e4:	d9f5      	bls.n	80069d2 <memmove+0xa>
 80069e6:	1881      	adds	r1, r0, r2
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	42d3      	cmn	r3, r2
 80069ec:	d100      	bne.n	80069f0 <memmove+0x28>
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069f8:	e7f7      	b.n	80069ea <memmove+0x22>

080069fa <__malloc_lock>:
 80069fa:	4770      	bx	lr

080069fc <__malloc_unlock>:
 80069fc:	4770      	bx	lr

080069fe <_realloc_r>:
 80069fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a00:	4607      	mov	r7, r0
 8006a02:	4614      	mov	r4, r2
 8006a04:	460e      	mov	r6, r1
 8006a06:	b921      	cbnz	r1, 8006a12 <_realloc_r+0x14>
 8006a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	f7ff be0d 	b.w	800662c <_malloc_r>
 8006a12:	b922      	cbnz	r2, 8006a1e <_realloc_r+0x20>
 8006a14:	f7ff fdbe 	bl	8006594 <_free_r>
 8006a18:	4625      	mov	r5, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1e:	f000 f821 	bl	8006a64 <_malloc_usable_size_r>
 8006a22:	42a0      	cmp	r0, r4
 8006a24:	d20f      	bcs.n	8006a46 <_realloc_r+0x48>
 8006a26:	4621      	mov	r1, r4
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff fdff 	bl	800662c <_malloc_r>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d0f2      	beq.n	8006a1a <_realloc_r+0x1c>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4622      	mov	r2, r4
 8006a38:	f7ff fab6 	bl	8005fa8 <memcpy>
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff fda8 	bl	8006594 <_free_r>
 8006a44:	e7e9      	b.n	8006a1a <_realloc_r+0x1c>
 8006a46:	4635      	mov	r5, r6
 8006a48:	e7e7      	b.n	8006a1a <_realloc_r+0x1c>

08006a4a <__ascii_wctomb>:
 8006a4a:	b149      	cbz	r1, 8006a60 <__ascii_wctomb+0x16>
 8006a4c:	2aff      	cmp	r2, #255	; 0xff
 8006a4e:	bf8b      	itete	hi
 8006a50:	238a      	movhi	r3, #138	; 0x8a
 8006a52:	700a      	strbls	r2, [r1, #0]
 8006a54:	6003      	strhi	r3, [r0, #0]
 8006a56:	2001      	movls	r0, #1
 8006a58:	bf88      	it	hi
 8006a5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a5e:	4770      	bx	lr
 8006a60:	4608      	mov	r0, r1
 8006a62:	4770      	bx	lr

08006a64 <_malloc_usable_size_r>:
 8006a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a68:	1f18      	subs	r0, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	bfbc      	itt	lt
 8006a6e:	580b      	ldrlt	r3, [r1, r0]
 8006a70:	18c0      	addlt	r0, r0, r3
 8006a72:	4770      	bx	lr

08006a74 <_init>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	bf00      	nop
 8006a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7a:	bc08      	pop	{r3}
 8006a7c:	469e      	mov	lr, r3
 8006a7e:	4770      	bx	lr

08006a80 <_fini>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr
