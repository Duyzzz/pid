
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08004c60  08004c60  00014c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f00  08004f00  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004f00  08004f00  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f00  08004f00  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f00  08004f00  00014f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200001e0  080050e4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080050e4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087d6  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c1f  00000000  00000000  000289db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001739f  00000000  00000000  0002b578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078f1  00000000  00000000  00042917  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082f5b  00000000  00000000  0004a208  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002854  00000000  00000000  000cd1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004c48 	.word	0x08004c48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08004c48 	.word	0x08004c48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e016      	b.n	8000b78 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b50:	3301      	adds	r3, #1
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d20b      	bcs.n	8000b72 <GetPage+0x36>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b60:	029b      	lsls	r3, r3, #10
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d304      	bcc.n	8000b72 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	e006      	b.n	8000b80 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7c:	dde5      	ble.n	8000b4a <GetPage+0xe>
	  }
  }

  return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <Bytes2float>:
    }

}

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b087      	sub	sp, #28
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	75fb      	strb	r3, [r7, #23]
 8000b96:	e00c      	b.n	8000bb2 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	f107 0118 	add.w	r1, r7, #24
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d9ef      	bls.n	8000b98 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000bbc:	693b      	ldr	r3, [r7, #16]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b08b      	sub	sp, #44	; 0x2c
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000bda:	f000 fe47 	bl	800186c <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000bde:	68f8      	ldr	r0, [r7, #12]
 8000be0:	f7ff ffac 	bl	8000b3c <GetPage>
 8000be4:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000bf2:	69f8      	ldr	r0, [r7, #28]
 8000bf4:	f7ff ffa2 	bl	8000b3c <GetPage>
 8000bf8:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <Flash_Write_Data+0xb4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <Flash_Write_Data+0xb4>)
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	0a9b      	lsrs	r3, r3, #10
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <Flash_Write_Data+0xb4>)
 8000c12:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <Flash_Write_Data+0xb4>)
 8000c1c:	f000 ff18 	bl	8001a50 <HAL_FLASHEx_Erase>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d01e      	beq.n	8000c64 <Flash_Write_Data+0x9c>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000c26:	f000 fe57 	bl	80018d8 <HAL_FLASH_GetError>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e021      	b.n	8000c72 <Flash_Write_Data+0xaa>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	4413      	add	r3, r2
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f04f 0400 	mov.w	r4, #0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	2002      	movs	r0, #2
 8000c44:	f000 fda2 	bl	800178c <HAL_FLASH_Program>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d106      	bne.n	8000c5c <Flash_Write_Data+0x94>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3304      	adds	r3, #4
 8000c52:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	3301      	adds	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
 8000c5a:	e003      	b.n	8000c64 <Flash_Write_Data+0x9c>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000c5c:	f000 fe3c 	bl	80018d8 <HAL_FLASH_GetError>
 8000c60:	4603      	mov	r3, r0
 8000c62:	e006      	b.n	8000c72 <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords)
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbe0      	blt.n	8000c2e <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000c6c:	f000 fe24 	bl	80018b8 <HAL_FLASH_Lock>

	   return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	372c      	adds	r7, #44	; 0x2c
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200001fc 	.word	0x200001fc

08000c80 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	1e5a      	subs	r2, r3, #1
 8000ca6:	80fa      	strh	r2, [r7, #6]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d000      	beq.n	8000cae <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000cac:	e7ef      	b.n	8000c8e <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000cae:	bf00      	nop
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <Flash_Read_NUM>:
	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
}


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b084      	sub	sp, #16
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4619      	mov	r1, r3
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffd8 	bl	8000c80 <Flash_Read_Data>
	value = Bytes2float(buffer);
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff58 	bl	8000b8a <Bytes2float>
 8000cda:	60f8      	str	r0, [r7, #12]
	return value;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fb2e 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f83a 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f000 f8a8 	bl	8000e48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cf8:	f000 f87c 	bl	8000df4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, data, 27);
 8000cfc:	221b      	movs	r2, #27
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <main+0x5c>)
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <main+0x60>)
 8000d02:	f001 fd42 	bl	800278a <HAL_UART_Receive_IT>
  kpU = Flash_Read_NUM(KPAdd);
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <main+0x64>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffd6 	bl	8000cba <Flash_Read_NUM>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <main+0x68>)
 8000d12:	601a      	str	r2, [r3, #0]
  //char tempe[9];
  //Flash_Read_Data(KPAdd,tempe, 9);
  kiU = Flash_Read_NUM(KIAdd);
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <main+0x6c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffcf 	bl	8000cba <Flash_Read_NUM>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <main+0x70>)
 8000d20:	601a      	str	r2, [r3, #0]
  kdU = Flash_Read_NUM(KDAdd);
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <main+0x74>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffc8 	bl	8000cba <Flash_Read_NUM>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <main+0x78>)
 8000d2e:	601a      	str	r2, [r3, #0]
  setRe = 0;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <main+0x7c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(setRe == 1){
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <main+0x7c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0fb      	beq.n	8000d36 <main+0x4e>
	  		  afterInterrupt();
 8000d3e:	f000 f8cf 	bl	8000ee0 <afterInterrupt>
	  if(setRe == 1){
 8000d42:	e7f8      	b.n	8000d36 <main+0x4e>
 8000d44:	2000020c 	.word	0x2000020c
 8000d48:	2000023c 	.word	0x2000023c
 8000d4c:	0801f810 	.word	0x0801f810
 8000d50:	20000238 	.word	0x20000238
 8000d54:	0801f814 	.word	0x0801f814
 8000d58:	20000284 	.word	0x20000284
 8000d5c:	0801f818 	.word	0x0801f818
 8000d60:	20000280 	.word	0x20000280
 8000d64:	20000228 	.word	0x20000228

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 f946 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f881 	bl	8001eb8 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f9a8 	bl	8001110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 faec 	bl	80023b8 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000de6:	f000 f993 	bl	8001110 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3740      	adds	r7, #64	; 0x40
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_USART1_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	f001 fc60 	bl	80026f0 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f000 f96b 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000023c 	.word	0x2000023c
 8000e44:	40013800 	.word	0x40013800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_GPIO_Init+0x90>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_GPIO_Init+0x94>)
 8000eac:	f000 ffd2 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_GPIO_Init+0x94>)
 8000eca:	f000 fe69 	bl	8001ba0 <HAL_GPIO_Init>

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40011000 	.word	0x40011000

08000ee0 <afterInterrupt>:

/* USER CODE BEGIN 4 */

void afterInterrupt(void){
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b093      	sub	sp, #76	; 0x4c
 8000ee4:	af00      	add	r7, sp, #0
	char ensure = data[0];
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <afterInterrupt+0x1d0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char ki[7] = "";
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	801a      	strh	r2, [r3, #0]
 8000efc:	460a      	mov	r2, r1
 8000efe:	709a      	strb	r2, [r3, #2]
	char kd[7] = "";
 8000f00:	2300      	movs	r3, #0
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	460a      	mov	r2, r1
 8000f10:	709a      	strb	r2, [r3, #2]
	char kp[7] = "";
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	460a      	mov	r2, r1
 8000f22:	709a      	strb	r2, [r3, #2]
	int i = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
	int j = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40
	char *compare = "_";
 8000f2c:	4b61      	ldr	r3, [pc, #388]	; (80010b4 <afterInterrupt+0x1d4>)
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		      for(i = 2; i < 9; i++){
 8000f30:	2302      	movs	r3, #2
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
 8000f34:	e017      	b.n	8000f66 <afterInterrupt+0x86>
		          if(data[i] != *compare){
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <afterInterrupt+0x1d0>)
 8000f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d013      	beq.n	8000f6e <afterInterrupt+0x8e>
		              kp[j] = data[i];
 8000f46:	4a5a      	ldr	r2, [pc, #360]	; (80010b0 <afterInterrupt+0x1d0>)
 8000f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f4a:	4413      	add	r3, r2
 8000f4c:	7819      	ldrb	r1, [r3, #0]
 8000f4e:	f107 0220 	add.w	r2, r7, #32
 8000f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
		              j++;
 8000f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	643b      	str	r3, [r7, #64]	; 0x40
		      for(i = 2; i < 9; i++){
 8000f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f62:	3301      	adds	r3, #1
 8000f64:	647b      	str	r3, [r7, #68]	; 0x44
 8000f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	dde4      	ble.n	8000f36 <afterInterrupt+0x56>
 8000f6c:	e000      	b.n	8000f70 <afterInterrupt+0x90>
		          } else break;
 8000f6e:	bf00      	nop
		      }
		      j = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
		      for(i = 10; i < 17; i++){
 8000f74:	230a      	movs	r3, #10
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
 8000f78:	e017      	b.n	8000faa <afterInterrupt+0xca>
		          if(data[i] != *compare){
 8000f7a:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <afterInterrupt+0x1d0>)
 8000f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f7e:	4413      	add	r3, r2
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d013      	beq.n	8000fb2 <afterInterrupt+0xd2>
		              ki[j] = data[i];
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <afterInterrupt+0x1d0>)
 8000f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f8e:	4413      	add	r3, r2
 8000f90:	7819      	ldrb	r1, [r3, #0]
 8000f92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
		              j++;
 8000f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
		      for(i = 10; i < 17; i++){
 8000fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8000faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	dde4      	ble.n	8000f7a <afterInterrupt+0x9a>
 8000fb0:	e000      	b.n	8000fb4 <afterInterrupt+0xd4>
		          } else break;
 8000fb2:	bf00      	nop
		      }
		      j = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	643b      	str	r3, [r7, #64]	; 0x40
		      for(i = 18; i < 26; i++){
 8000fb8:	2312      	movs	r3, #18
 8000fba:	647b      	str	r3, [r7, #68]	; 0x44
 8000fbc:	e017      	b.n	8000fee <afterInterrupt+0x10e>
		          if(data[i] != *compare){
 8000fbe:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <afterInterrupt+0x1d0>)
 8000fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d013      	beq.n	8000ff6 <afterInterrupt+0x116>
		              kd[j] = data[i];
 8000fce:	4a38      	ldr	r2, [pc, #224]	; (80010b0 <afterInterrupt+0x1d0>)
 8000fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fd2:	4413      	add	r3, r2
 8000fd4:	7819      	ldrb	r1, [r3, #0]
 8000fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fdc:	4413      	add	r3, r2
 8000fde:	460a      	mov	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
		              j++;
 8000fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
		      for(i = 18; i < 26; i++){
 8000fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fea:	3301      	adds	r3, #1
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44
 8000fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff0:	2b19      	cmp	r3, #25
 8000ff2:	dde4      	ble.n	8000fbe <afterInterrupt+0xde>
 8000ff4:	e000      	b.n	8000ff8 <afterInterrupt+0x118>
		          } else break;
 8000ff6:	bf00      	nop
		      }
		      float kpF = atof(kp);
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 ffd5 	bl	8002fac <atof>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff fd47 	bl	8000a9c <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	61fb      	str	r3, [r7, #28]
		      float kiF = atof(ki);
 8001012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001016:	4618      	mov	r0, r3
 8001018:	f001 ffc8 	bl	8002fac <atof>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	4618      	mov	r0, r3
 8001022:	4621      	mov	r1, r4
 8001024:	f7ff fd3a 	bl	8000a9c <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	61bb      	str	r3, [r7, #24]
		      float kdF = atof(kd);
 800102c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001030:	4618      	mov	r0, r3
 8001032:	f001 ffbb 	bl	8002fac <atof>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f7ff fd2d 	bl	8000a9c <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
 8001044:	617b      	str	r3, [r7, #20]
		      uint32_t holding[3];
		      uint32_t hexValue;
		      memcpy(&hexValue, &kpF, sizeof(float));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	607b      	str	r3, [r7, #4]
		      holding[0] = hexValue;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60bb      	str	r3, [r7, #8]
		      memcpy(&hexValue, &kiF, sizeof(float));
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	607b      	str	r3, [r7, #4]
		      holding[1] = hexValue;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]
		      memcpy(&hexValue, &kdF, sizeof(float));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	607b      	str	r3, [r7, #4]
		      holding[2] = hexValue;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	613b      	str	r3, [r7, #16]
		      //if(ensure == 't'){
		        Flash_Write_Data(KPAdd, holding, 3);
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <afterInterrupt+0x1d8>)
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	2203      	movs	r2, #3
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fdae 	bl	8000bc8 <Flash_Write_Data>
		      //}
		      setRe = 0;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <afterInterrupt+0x1dc>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		      kpU = Flash_Read_NUM(KPAdd);
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <afterInterrupt+0x1d8>)
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe20 	bl	8000cba <Flash_Read_NUM>
 800107a:	4602      	mov	r2, r0
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <afterInterrupt+0x1e0>)
 800107e:	601a      	str	r2, [r3, #0]
		      kiU = Flash_Read_NUM(KIAdd);
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <afterInterrupt+0x1e4>)
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fe19 	bl	8000cba <Flash_Read_NUM>
 8001088:	4602      	mov	r2, r0
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <afterInterrupt+0x1e8>)
 800108c:	601a      	str	r2, [r3, #0]
		      kdU = Flash_Read_NUM(KDAdd);
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <afterInterrupt+0x1ec>)
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe12 	bl	8000cba <Flash_Read_NUM>
 8001096:	4602      	mov	r2, r0
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <afterInterrupt+0x1f0>)
 800109a:	601a      	str	r2, [r3, #0]
		      HAL_UART_Receive_IT(&huart1, data, 27);
 800109c:	221b      	movs	r2, #27
 800109e:	4904      	ldr	r1, [pc, #16]	; (80010b0 <afterInterrupt+0x1d0>)
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <afterInterrupt+0x1f4>)
 80010a2:	f001 fb72 	bl	800278a <HAL_UART_Receive_IT>

}
 80010a6:	bf00      	nop
 80010a8:	374c      	adds	r7, #76	; 0x4c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	08004c60 	.word	0x08004c60
 80010b8:	0801f810 	.word	0x0801f810
 80010bc:	20000228 	.word	0x20000228
 80010c0:	20000238 	.word	0x20000238
 80010c4:	0801f814 	.word	0x0801f814
 80010c8:	20000284 	.word	0x20000284
 80010cc:	0801f818 	.word	0x0801f818
 80010d0:	20000280 	.word	0x20000280
 80010d4:	2000023c 	.word	0x2000023c

080010d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
// this call back just for enabling the program that will stores PID parameters (afterInterrupt)
	UNUSED(huart);
  if(huart->Instance == USART1){
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_UART_RxCpltCallback+0x2c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d107      	bne.n	80010fa <HAL_UART_RxCpltCallback+0x22>
	  setRe = 1;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_UART_RxCpltCallback+0x30>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_UART_RxCpltCallback+0x34>)
 80010f6:	f000 fec5 	bl	8001e84 <HAL_GPIO_TogglePin>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40013800 	.word	0x40013800
 8001108:	20000228 	.word	0x20000228
 800110c:	40011000 	.word	0x40011000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001116:	e7fe      	b.n	8001116 <Error_Handler+0x6>

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_MspInit+0x60>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_MspInit+0x60>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_UART_MspInit+0x9c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d139      	bne.n	8001210 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_UART_MspInit+0xa0>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_UART_MspInit+0xa0>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_UART_MspInit+0xa0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0xa0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_UART_MspInit+0xa0>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_UART_MspInit+0xa0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480f      	ldr	r0, [pc, #60]	; (8001220 <HAL_UART_MspInit+0xa4>)
 80011e2:	f000 fcdd 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_UART_MspInit+0xa4>)
 80011fc:	f000 fcd0 	bl	8001ba0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2100      	movs	r1, #0
 8001204:	2025      	movs	r0, #37	; 0x25
 8001206:	f000 f9da 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800120a:	2025      	movs	r0, #37	; 0x25
 800120c:	f000 f9f3 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40013800 	.word	0x40013800
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 f8b5 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USART1_IRQHandler+0x10>)
 800127a:	f001 fab7 	bl	80027ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000023c 	.word	0x2000023c

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f001 fe7c 	bl	8002fb4 <__errno>
 80012bc:	4602      	mov	r2, r0
 80012be:	230c      	movs	r3, #12
 80012c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20005000 	.word	0x20005000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	2000022c 	.word	0x2000022c
 80012f0:	200002b8 	.word	0x200002b8

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001326:	f7ff ffe5 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132a:	f001 fe49 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fcdb 	bl	8000ce8 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800133c:	08004f08 	.word	0x08004f08
  ldr r2, =_sbss
 8001340:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001344:	200002b4 	.word	0x200002b4

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f923 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff fed6 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f93b 	bl	8001612 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f903 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x1c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x20>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_IncTick+0x20>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000008 	.word	0x20000008
 80013f8:	20000288 	.word	0x20000288

080013fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_GetTick+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000288 	.word	0x20000288

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <__NVIC_EnableIRQ+0x34>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff2d 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff42 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff35 	bl	8001474 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800163c:	2b02      	cmp	r3, #2
 800163e:	d008      	beq.n	8001652 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e020      	b.n	8001694 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 020e 	bic.w	r2, r2, #14
 8001660:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0201 	bic.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d005      	beq.n	80016c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e051      	b.n	8001766 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 020e 	bic.w	r2, r2, #14
 80016d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_DMA_Abort_IT+0xd0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d029      	beq.n	8001740 <HAL_DMA_Abort_IT+0xa0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_DMA_Abort_IT+0xd4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d022      	beq.n	800173c <HAL_DMA_Abort_IT+0x9c>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <HAL_DMA_Abort_IT+0xd8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01a      	beq.n	8001736 <HAL_DMA_Abort_IT+0x96>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_DMA_Abort_IT+0xdc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d012      	beq.n	8001730 <HAL_DMA_Abort_IT+0x90>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_DMA_Abort_IT+0xe0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00a      	beq.n	800172a <HAL_DMA_Abort_IT+0x8a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_DMA_Abort_IT+0xe4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d102      	bne.n	8001724 <HAL_DMA_Abort_IT+0x84>
 800171e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001722:	e00e      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 8001724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001728:	e00b      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 800172a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172e:	e008      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 8001730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001734:	e005      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	e002      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 800173c:	2310      	movs	r3, #16
 800173e:	e000      	b.n	8001742 <HAL_DMA_Abort_IT+0xa2>
 8001740:	2301      	movs	r3, #1
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_DMA_Abort_IT+0xe8>)
 8001744:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
    } 
  }
  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40020008 	.word	0x40020008
 8001774:	4002001c 	.word	0x4002001c
 8001778:	40020030 	.word	0x40020030
 800177c:	40020044 	.word	0x40020044
 8001780:	40020058 	.word	0x40020058
 8001784:	4002006c 	.word	0x4002006c
 8001788:	40020000 	.word	0x40020000

0800178c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <HAL_FLASH_Program+0xd8>)
 80017a8:	7e1b      	ldrb	r3, [r3, #24]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_FLASH_Program+0x26>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e054      	b.n	800185c <HAL_FLASH_Program+0xd0>
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_FLASH_Program+0xd8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017bc:	f000 f8b2 	bl	8001924 <FLASH_WaitForLastOperation>
 80017c0:	4603      	mov	r3, r0
 80017c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d144      	bne.n	8001854 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80017d0:	2301      	movs	r3, #1
 80017d2:	757b      	strb	r3, [r7, #21]
 80017d4:	e007      	b.n	80017e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d102      	bne.n	80017e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80017dc:	2302      	movs	r3, #2
 80017de:	757b      	strb	r3, [r7, #21]
 80017e0:	e001      	b.n	80017e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80017e2:	2304      	movs	r3, #4
 80017e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	75bb      	strb	r3, [r7, #22]
 80017ea:	e02d      	b.n	8001848 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80017ec:	7dbb      	ldrb	r3, [r7, #22]
 80017ee:	005a      	lsls	r2, r3, #1
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	eb02 0c03 	add.w	ip, r2, r3
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	0119      	lsls	r1, r3, #4
 80017fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017fe:	f1c1 0620 	rsb	r6, r1, #32
 8001802:	f1a1 0020 	sub.w	r0, r1, #32
 8001806:	fa22 f401 	lsr.w	r4, r2, r1
 800180a:	fa03 f606 	lsl.w	r6, r3, r6
 800180e:	4334      	orrs	r4, r6
 8001810:	fa23 f000 	lsr.w	r0, r3, r0
 8001814:	4304      	orrs	r4, r0
 8001816:	fa23 f501 	lsr.w	r5, r3, r1
 800181a:	b2a3      	uxth	r3, r4
 800181c:	4619      	mov	r1, r3
 800181e:	4660      	mov	r0, ip
 8001820:	f000 f864 	bl	80018ec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001824:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001828:	f000 f87c 	bl	8001924 <FLASH_WaitForLastOperation>
 800182c:	4603      	mov	r3, r0
 800182e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_FLASH_Program+0xdc>)
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <HAL_FLASH_Program+0xdc>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d107      	bne.n	8001852 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001842:	7dbb      	ldrb	r3, [r7, #22]
 8001844:	3301      	adds	r3, #1
 8001846:	75bb      	strb	r3, [r7, #22]
 8001848:	7dba      	ldrb	r2, [r7, #22]
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3cd      	bcc.n	80017ec <HAL_FLASH_Program+0x60>
 8001850:	e000      	b.n	8001854 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001852:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_FLASH_Program+0xd8>)
 8001856:	2200      	movs	r2, #0
 8001858:	761a      	strb	r2, [r3, #24]

  return status;
 800185a:	7dfb      	ldrb	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	20000290 	.word	0x20000290
 8001868:	40022000 	.word	0x40022000

0800186c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_FLASH_Unlock+0x40>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00d      	beq.n	800189e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_FLASH_Unlock+0x40>)
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_FLASH_Unlock+0x44>)
 8001886:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_FLASH_Unlock+0x40>)
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_FLASH_Unlock+0x48>)
 800188c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_FLASH_Unlock+0x40>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800189e:	79fb      	ldrb	r3, [r7, #7]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	45670123 	.word	0x45670123
 80018b4:	cdef89ab 	.word	0xcdef89ab

080018b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_FLASH_Lock+0x1c>)
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_FLASH_Lock+0x1c>)
 80018c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_FLASH_GetError+0x10>)
 80018de:	69db      	ldr	r3, [r3, #28]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	20000290 	.word	0x20000290

080018ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <FLASH_Program_HalfWord+0x30>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <FLASH_Program_HalfWord+0x34>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <FLASH_Program_HalfWord+0x34>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	801a      	strh	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000290 	.word	0x20000290
 8001920:	40022000 	.word	0x40022000

08001924 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fd66 	bl	80013fc <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001932:	e010      	b.n	8001956 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193a:	d00c      	beq.n	8001956 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d007      	beq.n	8001952 <FLASH_WaitForLastOperation+0x2e>
 8001942:	f7ff fd5b 	bl	80013fc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d201      	bcs.n	8001956 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e025      	b.n	80019a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e8      	bne.n	8001934 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0320 	and.w	r3, r3, #32
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 8001970:	2220      	movs	r2, #32
 8001972:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <FLASH_WaitForLastOperation+0x88>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001998:	f000 f80a 	bl	80019b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 80019d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 80019f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <FLASH_SetErrorCode+0x9c>)
 8001a10:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f240 1201 	movw	r2, #257	; 0x101
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d106      	bne.n	8001a36 <FLASH_SetErrorCode+0x86>
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	61d3      	str	r3, [r2, #28]
}  
 8001a34:	e002      	b.n	8001a3c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <FLASH_SetErrorCode+0x98>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60d3      	str	r3, [r2, #12]
}  
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	20000290 	.word	0x20000290

08001a50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_FLASHEx_Erase+0xd0>)
 8001a64:	7e1b      	ldrb	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_FLASHEx_Erase+0x1e>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e053      	b.n	8001b16 <HAL_FLASHEx_Erase+0xc6>
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <HAL_FLASHEx_Erase+0xd0>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d116      	bne.n	8001aaa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a80:	f7ff ff50 	bl	8001924 <FLASH_WaitForLastOperation>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d141      	bne.n	8001b0e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f000 f84c 	bl	8001b28 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a94:	f7ff ff46 	bl	8001924 <FLASH_WaitForLastOperation>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_FLASHEx_Erase+0xd4>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_FLASHEx_Erase+0xd4>)
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	6113      	str	r3, [r2, #16]
 8001aa8:	e031      	b.n	8001b0e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001aaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aae:	f7ff ff39 	bl	8001924 <FLASH_WaitForLastOperation>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d12a      	bne.n	8001b0e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295
 8001abe:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	e019      	b.n	8001afc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f000 f849 	bl	8001b60 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ace:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ad2:	f7ff ff27 	bl	8001924 <FLASH_WaitForLastOperation>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_FLASHEx_Erase+0xd4>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_FLASHEx_Erase+0xd4>)
 8001ae0:	f023 0302 	bic.w	r3, r3, #2
 8001ae4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	601a      	str	r2, [r3, #0]
            break;
 8001af2:	e00c      	b.n	8001b0e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	029a      	lsls	r2, r3, #10
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3dc      	bcc.n	8001ac8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_FLASHEx_Erase+0xd0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	761a      	strb	r2, [r3, #24]

  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000290 	.word	0x20000290
 8001b24:	40022000 	.word	0x40022000

08001b28 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <FLASH_MassErase+0x30>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <FLASH_MassErase+0x34>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <FLASH_MassErase+0x34>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <FLASH_MassErase+0x34>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <FLASH_MassErase+0x34>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000290 	.word	0x20000290
 8001b5c:	40022000 	.word	0x40022000

08001b60 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <FLASH_PageErase+0x38>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <FLASH_PageErase+0x3c>)
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <FLASH_PageErase+0x3c>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001b7a:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <FLASH_PageErase+0x3c>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <FLASH_PageErase+0x3c>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <FLASH_PageErase+0x3c>)
 8001b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000290 	.word	0x20000290
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b08b      	sub	sp, #44	; 0x2c
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	e127      	b.n	8001e04 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8116 	bne.w	8001dfe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d034      	beq.n	8001c44 <HAL_GPIO_Init+0xa4>
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d80d      	bhi.n	8001bfa <HAL_GPIO_Init+0x5a>
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d02b      	beq.n	8001c3a <HAL_GPIO_Init+0x9a>
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d804      	bhi.n	8001bf0 <HAL_GPIO_Init+0x50>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d031      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d01c      	beq.n	8001c28 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bee:	e048      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d043      	beq.n	8001c7c <HAL_GPIO_Init+0xdc>
 8001bf4:	2b11      	cmp	r3, #17
 8001bf6:	d01b      	beq.n	8001c30 <HAL_GPIO_Init+0x90>
          break;
 8001bf8:	e043      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bfa:	4a89      	ldr	r2, [pc, #548]	; (8001e20 <HAL_GPIO_Init+0x280>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d026      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
 8001c00:	4a87      	ldr	r2, [pc, #540]	; (8001e20 <HAL_GPIO_Init+0x280>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d806      	bhi.n	8001c14 <HAL_GPIO_Init+0x74>
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <HAL_GPIO_Init+0x284>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d020      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
 8001c0c:	4a86      	ldr	r2, [pc, #536]	; (8001e28 <HAL_GPIO_Init+0x288>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01d      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
          break;
 8001c12:	e036      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c14:	4a85      	ldr	r2, [pc, #532]	; (8001e2c <HAL_GPIO_Init+0x28c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
 8001c1a:	4a85      	ldr	r2, [pc, #532]	; (8001e30 <HAL_GPIO_Init+0x290>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d016      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
 8001c20:	4a84      	ldr	r2, [pc, #528]	; (8001e34 <HAL_GPIO_Init+0x294>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0xae>
          break;
 8001c26:	e02c      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	623b      	str	r3, [r7, #32]
          break;
 8001c2e:	e028      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	3304      	adds	r3, #4
 8001c36:	623b      	str	r3, [r7, #32]
          break;
 8001c38:	e023      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	623b      	str	r3, [r7, #32]
          break;
 8001c42:	e01e      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e019      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c56:	2304      	movs	r3, #4
 8001c58:	623b      	str	r3, [r7, #32]
          break;
 8001c5a:	e012      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c64:	2308      	movs	r3, #8
 8001c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	611a      	str	r2, [r3, #16]
          break;
 8001c6e:	e008      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c70:	2308      	movs	r3, #8
 8001c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	615a      	str	r2, [r3, #20]
          break;
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
          break;
 8001c80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d801      	bhi.n	8001c8c <HAL_GPIO_Init+0xec>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	e001      	b.n	8001c90 <HAL_GPIO_Init+0xf0>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2bff      	cmp	r3, #255	; 0xff
 8001c96:	d802      	bhi.n	8001c9e <HAL_GPIO_Init+0xfe>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x104>
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	210f      	movs	r1, #15
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	6a39      	ldr	r1, [r7, #32]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8096 	beq.w	8001dfe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cd2:	4b59      	ldr	r3, [pc, #356]	; (8001e38 <HAL_GPIO_Init+0x298>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x298>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6193      	str	r3, [r2, #24]
 8001cde:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <HAL_GPIO_Init+0x298>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cea:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <HAL_GPIO_Init+0x29c>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	; (8001e40 <HAL_GPIO_Init+0x2a0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x19e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <HAL_GPIO_Init+0x2a4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x19a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a49      	ldr	r2, [pc, #292]	; (8001e48 <HAL_GPIO_Init+0x2a8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x196>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a48      	ldr	r2, [pc, #288]	; (8001e4c <HAL_GPIO_Init+0x2ac>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x192>
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x1a0>
 8001d32:	2304      	movs	r3, #4
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x1a0>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x1a0>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x1a0>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d50:	493a      	ldr	r1, [pc, #232]	; (8001e3c <HAL_GPIO_Init+0x29c>)
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4938      	ldr	r1, [pc, #224]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4933      	ldr	r1, [pc, #204]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d006      	beq.n	8001da0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	492e      	ldr	r1, [pc, #184]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4929      	ldr	r1, [pc, #164]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	4924      	ldr	r1, [pc, #144]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	491f      	ldr	r1, [pc, #124]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	491a      	ldr	r1, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60cb      	str	r3, [r1, #12]
 8001dee:	e006      	b.n	8001dfe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	4915      	ldr	r1, [pc, #84]	; (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f47f aed0 	bne.w	8001bb4 <HAL_GPIO_Init+0x14>
  }
}
 8001e14:	bf00      	nop
 8001e16:	372c      	adds	r7, #44	; 0x2c
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	10210000 	.word	0x10210000
 8001e24:	10110000 	.word	0x10110000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10310000 	.word	0x10310000
 8001e30:	10320000 	.word	0x10320000
 8001e34:	10220000 	.word	0x10220000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	40010800 	.word	0x40010800
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	40011400 	.word	0x40011400
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	041a      	lsls	r2, r3, #16
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	43d9      	mvns	r1, r3
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	611a      	str	r2, [r3, #16]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e26c      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e246      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76>
 8001f20:	4b80      	ldr	r3, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7a      	ldr	r2, [pc, #488]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b78      	ldr	r3, [pc, #480]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a77      	ldr	r2, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xbc>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa32 	bl	80013fc <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fa2e 	bl	80013fc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1fa      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe4>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fa1e 	bl	80013fc <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fa1a 	bl	80013fc <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1e6      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x10c>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffe:	4b49      	ldr	r3, [pc, #292]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1ba      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4939      	ldr	r1, [pc, #228]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff f9d3 	bl	80013fc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7ff f9cf 	bl	80013fc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e19b      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4927      	ldr	r1, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x270>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f9b2 	bl	80013fc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7ff f9ae 	bl	80013fc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e17a      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_RCC_OscConfig+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff f992 	bl	80013fc <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff f98e 	bl	80013fc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e15a      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 fada 	bl	80026b4 <RCC_Delay>
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_OscConfig+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7ff f978 	bl	80013fc <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00f      	b.n	8002130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff f974 	bl	80013fc <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e140      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	42420000 	.word	0x42420000
 800212c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e9      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a6 	beq.w	8002296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b97      	ldr	r3, [pc, #604]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a93      	ldr	r2, [pc, #588]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b8e      	ldr	r3, [pc, #568]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7ff f935 	bl	80013fc <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7ff f931 	bl	80013fc <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	; 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0fd      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b81      	ldr	r3, [pc, #516]	; (80023b0 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021bc:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a7a      	ldr	r2, [pc, #488]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x334>
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b73      	ldr	r3, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a72      	ldr	r2, [pc, #456]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x356>
 80021f4:	4b6d      	ldr	r3, [pc, #436]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b64      	ldr	r3, [pc, #400]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff f8e5 	bl	80013fc <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff f8e1 	bl	80013fc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0ab      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b57      	ldr	r3, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x37e>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff f8cf 	bl	80013fc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff f8cb 	bl	80013fc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e095      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a47      	ldr	r2, [pc, #284]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8081 	beq.w	80023a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d061      	beq.n	8002370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d146      	bne.n	8002342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff f89f 	bl	80013fc <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff f89b 	bl	80013fc <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e067      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	492d      	ldr	r1, [pc, #180]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a19      	ldr	r1, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	430b      	orrs	r3, r1
 800230e:	4927      	ldr	r1, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff f86f 	bl	80013fc <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff f86b 	bl	80013fc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e037      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
 8002340:	e02f      	b.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCC_OscConfig+0x4fc>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f858 	bl	80013fc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f854 	bl	80013fc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e020      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
 800236e:	e018      	b.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e013      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x4f4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	429a      	cmp	r2, r3
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42420060 	.word	0x42420060

080023b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d0      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d910      	bls.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b67      	ldr	r3, [pc, #412]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0207 	bic.w	r2, r3, #7
 80023e2:	4965      	ldr	r1, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d040      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e073      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4936      	ldr	r1, [pc, #216]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a8:	f7fe ffa8 	bl	80013fc <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe ffa4 	bl	80013fc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e053      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d210      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4922      	ldr	r1, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	fa21 f303 	lsr.w	r3, r1, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1cc>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1d0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe ff06 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	08004c78 	.word	0x08004c78
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b490      	push	{r4, r7}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002594:	1d3c      	adds	r4, r7, #4
 8002596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb4>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x46>
 80025ca:	e02d      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025ce:	623b      	str	r3, [r7, #32]
      break;
 80025d0:	e02d      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025de:	4413      	add	r3, r2
 80025e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c5b      	lsrs	r3, r3, #17
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025fe:	4413      	add	r3, r2
 8002600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800260a:	fb02 f203 	mul.w	r2, r2, r3
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	e004      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_RCC_GetSysClockFreq+0xc0>)
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	623b      	str	r3, [r7, #32]
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCC_GetSysClockFreq+0xbc>)
 800262a:	623b      	str	r3, [r7, #32]
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	6a3b      	ldr	r3, [r7, #32]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bc90      	pop	{r4, r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	08004c64 	.word	0x08004c64
 8002640:	08004c74 	.word	0x08004c74
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	003d0900 	.word	0x003d0900

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b02      	ldr	r3, [pc, #8]	; (8002660 <HAL_RCC_GetHCLKFreq+0x10>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	20000000 	.word	0x20000000

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff2 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800266c:	4601      	mov	r1, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	08004c88 	.word	0x08004c88

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffde 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002694:	4601      	mov	r1, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	0adb      	lsrs	r3, r3, #11
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08004c88 	.word	0x08004c88

080026b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <RCC_Delay+0x34>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <RCC_Delay+0x38>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0a5b      	lsrs	r3, r3, #9
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026d0:	bf00      	nop
  }
  while (Delay --);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e5a      	subs	r2, r3, #1
 80026d6:	60fa      	str	r2, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <RCC_Delay+0x1c>
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000000 	.word	0x20000000
 80026ec:	10624dd3 	.word	0x10624dd3

080026f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e03f      	b.n	8002782 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fd30 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fbab 	bl	8002e90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	4613      	mov	r3, r2
 8002796:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d11d      	bne.n	80027e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_Receive_IT+0x26>
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e016      	b.n	80027e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Receive_IT+0x38>
 80027be:	2302      	movs	r3, #2
 80027c0:	e00f      	b.n	80027e2 <HAL_UART_Receive_IT+0x58>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f9d1 	bl	8002b7e <UART_Start_Receive_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_UART_IRQHandler+0x52>
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f003 0320 	and.w	r3, r3, #32
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa81 	bl	8002d3e <UART_Receive_IT>
      return;
 800283c:	e17c      	b.n	8002b38 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80b1 	beq.w	80029a8 <HAL_UART_IRQHandler+0x1bc>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_UART_IRQHandler+0x70>
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a6 	beq.w	80029a8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_UART_IRQHandler+0x90>
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0201 	orr.w	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_UART_IRQHandler+0xb0>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f043 0202 	orr.w	r2, r3, #2
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_UART_IRQHandler+0xd0>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f043 0204 	orr.w	r2, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00f      	beq.n	80028e6 <HAL_UART_IRQHandler+0xfa>
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_UART_IRQHandler+0xee>
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0208 	orr.w	r2, r3, #8
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 811f 	beq.w	8002b2e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_UART_IRQHandler+0x11e>
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fa1a 	bl	8002d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <HAL_UART_IRQHandler+0x146>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d031      	beq.n	8002996 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f95c 	bl	8002bf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d023      	beq.n	800298e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002954:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d013      	beq.n	8002986 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4a77      	ldr	r2, [pc, #476]	; (8002b40 <HAL_UART_IRQHandler+0x354>)
 8002964:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fe98 	bl	80016a0 <HAL_DMA_Abort_IT>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d016      	beq.n	80029a4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002980:	4610      	mov	r0, r2
 8002982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002984:	e00e      	b.n	80029a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8e5 	bl	8002b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298c:	e00a      	b.n	80029a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f8e1 	bl	8002b56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	e006      	b.n	80029a4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8dd 	bl	8002b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029a2:	e0c4      	b.n	8002b2e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	bf00      	nop
    return;
 80029a6:	e0c2      	b.n	8002b2e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f040 80a1 	bne.w	8002af4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 809b 	beq.w	8002af4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8095 	beq.w	8002af4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04e      	beq.n	8002a8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80029f8:	8a3b      	ldrh	r3, [r7, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8099 	beq.w	8002b32 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a04:	8a3a      	ldrh	r2, [r7, #16]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f080 8093 	bcs.w	8002b32 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8a3a      	ldrh	r2, [r7, #16]
 8002a10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d02b      	beq.n	8002a74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0210 	bic.w	r2, r2, #16
 8002a68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fddb 	bl	800162a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f86f 	bl	8002b68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a8a:	e052      	b.n	8002b32 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d048      	beq.n	8002b36 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002aa4:	8a7b      	ldrh	r3, [r7, #18]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d045      	beq.n	8002b36 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ab8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0210 	bic.w	r2, r2, #16
 8002ae6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae8:	8a7b      	ldrh	r3, [r7, #18]
 8002aea:	4619      	mov	r1, r3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f83b 	bl	8002b68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002af2:	e020      	b.n	8002b36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_UART_IRQHandler+0x324>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8b1 	bl	8002c70 <UART_Transmit_IT>
    return;
 8002b0e:	e013      	b.n	8002b38 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00e      	beq.n	8002b38 <HAL_UART_IRQHandler+0x34c>
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8f2 	bl	8002d0e <UART_EndTransmit_IT>
    return;
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <HAL_UART_IRQHandler+0x34c>
    return;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_UART_IRQHandler+0x34c>
      return;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_UART_IRQHandler+0x34c>
      return;
 8002b36:	bf00      	nop
  }
}
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	08002c49 	.word	0x08002c49

08002b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2222      	movs	r2, #34	; 0x22
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0220 	orr.w	r2, r2, #32
 8002be2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0210 	bic.w	r2, r2, #16
 8002c2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff ff77 	bl	8002b56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b21      	cmp	r3, #33	; 0x21
 8002c82:	d13e      	bne.n	8002d02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d114      	bne.n	8002cb8 <UART_Transmit_IT+0x48>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d110      	bne.n	8002cb8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002caa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]
 8002cb6:	e008      	b.n	8002cca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6211      	str	r1, [r2, #32]
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e000      	b.n	8002d04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ff08 	bl	8002b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	f040 8099 	bne.w	8002e86 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d117      	bne.n	8002d8e <UART_Receive_IT+0x50>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e026      	b.n	8002ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d007      	beq.n	8002db2 <UART_Receive_IT+0x74>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <UART_Receive_IT+0x82>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e008      	b.n	8002dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d148      	bne.n	8002e82 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0220 	bic.w	r2, r2, #32
 8002dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d123      	bne.n	8002e78 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0210 	bic.w	r2, r2, #16
 8002e44:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d10a      	bne.n	8002e6a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fe79 	bl	8002b68 <HAL_UARTEx_RxEventCallback>
 8002e76:	e002      	b.n	8002e7e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fe f92d 	bl	80010d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e002      	b.n	8002e88 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eca:	f023 030c 	bic.w	r3, r3, #12
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <UART_SetConfig+0x114>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff fbc8 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	e002      	b.n	8002f06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff fbb0 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 8002f04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	0119      	lsls	r1, r3, #4
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2064      	movs	r0, #100	; 0x64
 8002f46:	fb00 f303 	mul.w	r3, r0, r3
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	3332      	adds	r3, #50	; 0x32
 8002f50:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	4419      	add	r1, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f76:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2064      	movs	r0, #100	; 0x64
 8002f7e:	fb00 f303 	mul.w	r3, r0, r3
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	3332      	adds	r3, #50	; 0x32
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <UART_SetConfig+0x118>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 020f 	and.w	r2, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	440a      	add	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	51eb851f 	.word	0x51eb851f

08002fac <atof>:
 8002fac:	2100      	movs	r1, #0
 8002fae:	f000 be57 	b.w	8003c60 <strtod>
	...

08002fb4 <__errno>:
 8002fb4:	4b01      	ldr	r3, [pc, #4]	; (8002fbc <__errno+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2500      	movs	r5, #0
 8002fc4:	4e0c      	ldr	r6, [pc, #48]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc6:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc8:	1ba4      	subs	r4, r4, r6
 8002fca:	10a4      	asrs	r4, r4, #2
 8002fcc:	42a5      	cmp	r5, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	f001 fe3a 	bl	8004c48 <_init>
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	4e0a      	ldr	r6, [pc, #40]	; (8003000 <__libc_init_array+0x40>)
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	; (8003004 <__libc_init_array+0x44>)
 8002fda:	1ba4      	subs	r4, r4, r6
 8002fdc:	10a4      	asrs	r4, r4, #2
 8002fde:	42a5      	cmp	r5, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe8:	4798      	blx	r3
 8002fea:	3501      	adds	r5, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff2:	4798      	blx	r3
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08004f00 	.word	0x08004f00
 8002ffc:	08004f00 	.word	0x08004f00
 8003000:	08004f00 	.word	0x08004f00
 8003004:	08004f04 	.word	0x08004f04

08003008 <memset>:
 8003008:	4603      	mov	r3, r0
 800300a:	4402      	add	r2, r0
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	f803 1b01 	strb.w	r1, [r3], #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <sulp>:
 8003018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301c:	460f      	mov	r7, r1
 800301e:	4690      	mov	r8, r2
 8003020:	f001 fc42 	bl	80048a8 <__ulp>
 8003024:	4604      	mov	r4, r0
 8003026:	460d      	mov	r5, r1
 8003028:	f1b8 0f00 	cmp.w	r8, #0
 800302c:	d011      	beq.n	8003052 <sulp+0x3a>
 800302e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003036:	2b00      	cmp	r3, #0
 8003038:	dd0b      	ble.n	8003052 <sulp+0x3a>
 800303a:	2400      	movs	r4, #0
 800303c:	051b      	lsls	r3, r3, #20
 800303e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003042:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003046:	4622      	mov	r2, r4
 8003048:	462b      	mov	r3, r5
 800304a:	f7fd fa45 	bl	80004d8 <__aeabi_dmul>
 800304e:	4604      	mov	r4, r0
 8003050:	460d      	mov	r5, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800305a:	0000      	movs	r0, r0
 800305c:	0000      	movs	r0, r0
	...

08003060 <_strtod_l>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	461f      	mov	r7, r3
 8003066:	2300      	movs	r3, #0
 8003068:	b0a1      	sub	sp, #132	; 0x84
 800306a:	4683      	mov	fp, r0
 800306c:	4638      	mov	r0, r7
 800306e:	460e      	mov	r6, r1
 8003070:	9217      	str	r2, [sp, #92]	; 0x5c
 8003072:	931c      	str	r3, [sp, #112]	; 0x70
 8003074:	f001 f92e 	bl	80042d4 <__localeconv_l>
 8003078:	4680      	mov	r8, r0
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	f7fd f868 	bl	8000150 <strlen>
 8003080:	f04f 0900 	mov.w	r9, #0
 8003084:	4604      	mov	r4, r0
 8003086:	f04f 0a00 	mov.w	sl, #0
 800308a:	961b      	str	r6, [sp, #108]	; 0x6c
 800308c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800308e:	781a      	ldrb	r2, [r3, #0]
 8003090:	2a0d      	cmp	r2, #13
 8003092:	d832      	bhi.n	80030fa <_strtod_l+0x9a>
 8003094:	2a09      	cmp	r2, #9
 8003096:	d236      	bcs.n	8003106 <_strtod_l+0xa6>
 8003098:	2a00      	cmp	r2, #0
 800309a:	d03e      	beq.n	800311a <_strtod_l+0xba>
 800309c:	2300      	movs	r3, #0
 800309e:	930d      	str	r3, [sp, #52]	; 0x34
 80030a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80030a2:	782b      	ldrb	r3, [r5, #0]
 80030a4:	2b30      	cmp	r3, #48	; 0x30
 80030a6:	f040 80ac 	bne.w	8003202 <_strtod_l+0x1a2>
 80030aa:	786b      	ldrb	r3, [r5, #1]
 80030ac:	2b58      	cmp	r3, #88	; 0x58
 80030ae:	d001      	beq.n	80030b4 <_strtod_l+0x54>
 80030b0:	2b78      	cmp	r3, #120	; 0x78
 80030b2:	d167      	bne.n	8003184 <_strtod_l+0x124>
 80030b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030b6:	9702      	str	r7, [sp, #8]
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	ab1c      	add	r3, sp, #112	; 0x70
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4a89      	ldr	r2, [pc, #548]	; (80032e4 <_strtod_l+0x284>)
 80030c0:	ab1d      	add	r3, sp, #116	; 0x74
 80030c2:	a91b      	add	r1, sp, #108	; 0x6c
 80030c4:	4658      	mov	r0, fp
 80030c6:	f000 fe2d 	bl	8003d24 <__gethex>
 80030ca:	f010 0407 	ands.w	r4, r0, #7
 80030ce:	4606      	mov	r6, r0
 80030d0:	d005      	beq.n	80030de <_strtod_l+0x7e>
 80030d2:	2c06      	cmp	r4, #6
 80030d4:	d12b      	bne.n	800312e <_strtod_l+0xce>
 80030d6:	2300      	movs	r3, #0
 80030d8:	3501      	adds	r5, #1
 80030da:	951b      	str	r5, [sp, #108]	; 0x6c
 80030dc:	930d      	str	r3, [sp, #52]	; 0x34
 80030de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f040 85a6 	bne.w	8003c32 <_strtod_l+0xbd2>
 80030e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030e8:	b1e3      	cbz	r3, 8003124 <_strtod_l+0xc4>
 80030ea:	464a      	mov	r2, r9
 80030ec:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	b021      	add	sp, #132	; 0x84
 80030f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fa:	2a2b      	cmp	r2, #43	; 0x2b
 80030fc:	d015      	beq.n	800312a <_strtod_l+0xca>
 80030fe:	2a2d      	cmp	r2, #45	; 0x2d
 8003100:	d004      	beq.n	800310c <_strtod_l+0xac>
 8003102:	2a20      	cmp	r2, #32
 8003104:	d1ca      	bne.n	800309c <_strtod_l+0x3c>
 8003106:	3301      	adds	r3, #1
 8003108:	931b      	str	r3, [sp, #108]	; 0x6c
 800310a:	e7bf      	b.n	800308c <_strtod_l+0x2c>
 800310c:	2201      	movs	r2, #1
 800310e:	920d      	str	r2, [sp, #52]	; 0x34
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	921b      	str	r2, [sp, #108]	; 0x6c
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1c2      	bne.n	80030a0 <_strtod_l+0x40>
 800311a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800311c:	961b      	str	r6, [sp, #108]	; 0x6c
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 8585 	bne.w	8003c2e <_strtod_l+0xbce>
 8003124:	464a      	mov	r2, r9
 8003126:	4653      	mov	r3, sl
 8003128:	e7e2      	b.n	80030f0 <_strtod_l+0x90>
 800312a:	2200      	movs	r2, #0
 800312c:	e7ef      	b.n	800310e <_strtod_l+0xae>
 800312e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003130:	b13a      	cbz	r2, 8003142 <_strtod_l+0xe2>
 8003132:	2135      	movs	r1, #53	; 0x35
 8003134:	a81e      	add	r0, sp, #120	; 0x78
 8003136:	f001 fcaa 	bl	8004a8e <__copybits>
 800313a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800313c:	4658      	mov	r0, fp
 800313e:	f001 f91c 	bl	800437a <_Bfree>
 8003142:	3c01      	subs	r4, #1
 8003144:	2c04      	cmp	r4, #4
 8003146:	d806      	bhi.n	8003156 <_strtod_l+0xf6>
 8003148:	e8df f004 	tbb	[pc, r4]
 800314c:	1714030a 	.word	0x1714030a
 8003150:	0a          	.byte	0x0a
 8003151:	00          	.byte	0x00
 8003152:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003156:	0731      	lsls	r1, r6, #28
 8003158:	d5c1      	bpl.n	80030de <_strtod_l+0x7e>
 800315a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800315e:	e7be      	b.n	80030de <_strtod_l+0x7e>
 8003160:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003162:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003166:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800316a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800316e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003172:	e7f0      	b.n	8003156 <_strtod_l+0xf6>
 8003174:	f8df a170 	ldr.w	sl, [pc, #368]	; 80032e8 <_strtod_l+0x288>
 8003178:	e7ed      	b.n	8003156 <_strtod_l+0xf6>
 800317a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800317e:	f04f 39ff 	mov.w	r9, #4294967295
 8003182:	e7e8      	b.n	8003156 <_strtod_l+0xf6>
 8003184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	921b      	str	r2, [sp, #108]	; 0x6c
 800318a:	785b      	ldrb	r3, [r3, #1]
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d0f9      	beq.n	8003184 <_strtod_l+0x124>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0a4      	beq.n	80030de <_strtod_l+0x7e>
 8003194:	2301      	movs	r3, #1
 8003196:	2500      	movs	r5, #0
 8003198:	220a      	movs	r2, #10
 800319a:	9307      	str	r3, [sp, #28]
 800319c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800319e:	9506      	str	r5, [sp, #24]
 80031a0:	9308      	str	r3, [sp, #32]
 80031a2:	9504      	str	r5, [sp, #16]
 80031a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80031a6:	7807      	ldrb	r7, [r0, #0]
 80031a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80031ac:	b2d9      	uxtb	r1, r3
 80031ae:	2909      	cmp	r1, #9
 80031b0:	d929      	bls.n	8003206 <_strtod_l+0x1a6>
 80031b2:	4622      	mov	r2, r4
 80031b4:	f8d8 1000 	ldr.w	r1, [r8]
 80031b8:	f001 fd1c 	bl	8004bf4 <strncmp>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d031      	beq.n	8003224 <_strtod_l+0x1c4>
 80031c0:	2000      	movs	r0, #0
 80031c2:	463b      	mov	r3, r7
 80031c4:	4602      	mov	r2, r0
 80031c6:	9c04      	ldr	r4, [sp, #16]
 80031c8:	9005      	str	r0, [sp, #20]
 80031ca:	2b65      	cmp	r3, #101	; 0x65
 80031cc:	d001      	beq.n	80031d2 <_strtod_l+0x172>
 80031ce:	2b45      	cmp	r3, #69	; 0x45
 80031d0:	d114      	bne.n	80031fc <_strtod_l+0x19c>
 80031d2:	b924      	cbnz	r4, 80031de <_strtod_l+0x17e>
 80031d4:	b910      	cbnz	r0, 80031dc <_strtod_l+0x17c>
 80031d6:	9b07      	ldr	r3, [sp, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d09e      	beq.n	800311a <_strtod_l+0xba>
 80031dc:	2400      	movs	r4, #0
 80031de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80031e0:	1c73      	adds	r3, r6, #1
 80031e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80031e4:	7873      	ldrb	r3, [r6, #1]
 80031e6:	2b2b      	cmp	r3, #43	; 0x2b
 80031e8:	d078      	beq.n	80032dc <_strtod_l+0x27c>
 80031ea:	2b2d      	cmp	r3, #45	; 0x2d
 80031ec:	d070      	beq.n	80032d0 <_strtod_l+0x270>
 80031ee:	f04f 0c00 	mov.w	ip, #0
 80031f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80031f6:	2f09      	cmp	r7, #9
 80031f8:	d97c      	bls.n	80032f4 <_strtod_l+0x294>
 80031fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80031fc:	f04f 0e00 	mov.w	lr, #0
 8003200:	e09a      	b.n	8003338 <_strtod_l+0x2d8>
 8003202:	2300      	movs	r3, #0
 8003204:	e7c7      	b.n	8003196 <_strtod_l+0x136>
 8003206:	9904      	ldr	r1, [sp, #16]
 8003208:	3001      	adds	r0, #1
 800320a:	2908      	cmp	r1, #8
 800320c:	bfd7      	itett	le
 800320e:	9906      	ldrle	r1, [sp, #24]
 8003210:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003214:	fb02 3301 	mlale	r3, r2, r1, r3
 8003218:	9306      	strle	r3, [sp, #24]
 800321a:	9b04      	ldr	r3, [sp, #16]
 800321c:	901b      	str	r0, [sp, #108]	; 0x6c
 800321e:	3301      	adds	r3, #1
 8003220:	9304      	str	r3, [sp, #16]
 8003222:	e7bf      	b.n	80031a4 <_strtod_l+0x144>
 8003224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003226:	191a      	adds	r2, r3, r4
 8003228:	921b      	str	r2, [sp, #108]	; 0x6c
 800322a:	9a04      	ldr	r2, [sp, #16]
 800322c:	5d1b      	ldrb	r3, [r3, r4]
 800322e:	2a00      	cmp	r2, #0
 8003230:	d037      	beq.n	80032a2 <_strtod_l+0x242>
 8003232:	4602      	mov	r2, r0
 8003234:	9c04      	ldr	r4, [sp, #16]
 8003236:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800323a:	2909      	cmp	r1, #9
 800323c:	d913      	bls.n	8003266 <_strtod_l+0x206>
 800323e:	2101      	movs	r1, #1
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	e7c2      	b.n	80031ca <_strtod_l+0x16a>
 8003244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003246:	3001      	adds	r0, #1
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	921b      	str	r2, [sp, #108]	; 0x6c
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	2b30      	cmp	r3, #48	; 0x30
 8003250:	d0f8      	beq.n	8003244 <_strtod_l+0x1e4>
 8003252:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003256:	2a08      	cmp	r2, #8
 8003258:	f200 84f0 	bhi.w	8003c3c <_strtod_l+0xbdc>
 800325c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800325e:	9208      	str	r2, [sp, #32]
 8003260:	4602      	mov	r2, r0
 8003262:	2000      	movs	r0, #0
 8003264:	4604      	mov	r4, r0
 8003266:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800326a:	f100 0101 	add.w	r1, r0, #1
 800326e:	d012      	beq.n	8003296 <_strtod_l+0x236>
 8003270:	440a      	add	r2, r1
 8003272:	270a      	movs	r7, #10
 8003274:	4621      	mov	r1, r4
 8003276:	eb00 0c04 	add.w	ip, r0, r4
 800327a:	458c      	cmp	ip, r1
 800327c:	d113      	bne.n	80032a6 <_strtod_l+0x246>
 800327e:	1821      	adds	r1, r4, r0
 8003280:	2908      	cmp	r1, #8
 8003282:	f104 0401 	add.w	r4, r4, #1
 8003286:	4404      	add	r4, r0
 8003288:	dc19      	bgt.n	80032be <_strtod_l+0x25e>
 800328a:	210a      	movs	r1, #10
 800328c:	9b06      	ldr	r3, [sp, #24]
 800328e:	fb01 e303 	mla	r3, r1, r3, lr
 8003292:	9306      	str	r3, [sp, #24]
 8003294:	2100      	movs	r1, #0
 8003296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003298:	1c58      	adds	r0, r3, #1
 800329a:	901b      	str	r0, [sp, #108]	; 0x6c
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	4608      	mov	r0, r1
 80032a0:	e7c9      	b.n	8003236 <_strtod_l+0x1d6>
 80032a2:	9804      	ldr	r0, [sp, #16]
 80032a4:	e7d3      	b.n	800324e <_strtod_l+0x1ee>
 80032a6:	2908      	cmp	r1, #8
 80032a8:	f101 0101 	add.w	r1, r1, #1
 80032ac:	dc03      	bgt.n	80032b6 <_strtod_l+0x256>
 80032ae:	9b06      	ldr	r3, [sp, #24]
 80032b0:	437b      	muls	r3, r7
 80032b2:	9306      	str	r3, [sp, #24]
 80032b4:	e7e1      	b.n	800327a <_strtod_l+0x21a>
 80032b6:	2910      	cmp	r1, #16
 80032b8:	bfd8      	it	le
 80032ba:	437d      	mulle	r5, r7
 80032bc:	e7dd      	b.n	800327a <_strtod_l+0x21a>
 80032be:	2c10      	cmp	r4, #16
 80032c0:	bfdc      	itt	le
 80032c2:	210a      	movle	r1, #10
 80032c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80032c8:	e7e4      	b.n	8003294 <_strtod_l+0x234>
 80032ca:	2301      	movs	r3, #1
 80032cc:	9305      	str	r3, [sp, #20]
 80032ce:	e781      	b.n	80031d4 <_strtod_l+0x174>
 80032d0:	f04f 0c01 	mov.w	ip, #1
 80032d4:	1cb3      	adds	r3, r6, #2
 80032d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80032d8:	78b3      	ldrb	r3, [r6, #2]
 80032da:	e78a      	b.n	80031f2 <_strtod_l+0x192>
 80032dc:	f04f 0c00 	mov.w	ip, #0
 80032e0:	e7f8      	b.n	80032d4 <_strtod_l+0x274>
 80032e2:	bf00      	nop
 80032e4:	08004c9c 	.word	0x08004c9c
 80032e8:	7ff00000 	.word	0x7ff00000
 80032ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80032ee:	1c5f      	adds	r7, r3, #1
 80032f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80032f2:	785b      	ldrb	r3, [r3, #1]
 80032f4:	2b30      	cmp	r3, #48	; 0x30
 80032f6:	d0f9      	beq.n	80032ec <_strtod_l+0x28c>
 80032f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80032fc:	2f08      	cmp	r7, #8
 80032fe:	f63f af7d 	bhi.w	80031fc <_strtod_l+0x19c>
 8003302:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003306:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003308:	9309      	str	r3, [sp, #36]	; 0x24
 800330a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800330c:	1c5f      	adds	r7, r3, #1
 800330e:	971b      	str	r7, [sp, #108]	; 0x6c
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003316:	f1b8 0f09 	cmp.w	r8, #9
 800331a:	d937      	bls.n	800338c <_strtod_l+0x32c>
 800331c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800331e:	1a7f      	subs	r7, r7, r1
 8003320:	2f08      	cmp	r7, #8
 8003322:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003326:	dc37      	bgt.n	8003398 <_strtod_l+0x338>
 8003328:	45be      	cmp	lr, r7
 800332a:	bfa8      	it	ge
 800332c:	46be      	movge	lr, r7
 800332e:	f1bc 0f00 	cmp.w	ip, #0
 8003332:	d001      	beq.n	8003338 <_strtod_l+0x2d8>
 8003334:	f1ce 0e00 	rsb	lr, lr, #0
 8003338:	2c00      	cmp	r4, #0
 800333a:	d151      	bne.n	80033e0 <_strtod_l+0x380>
 800333c:	2800      	cmp	r0, #0
 800333e:	f47f aece 	bne.w	80030de <_strtod_l+0x7e>
 8003342:	9a07      	ldr	r2, [sp, #28]
 8003344:	2a00      	cmp	r2, #0
 8003346:	f47f aeca 	bne.w	80030de <_strtod_l+0x7e>
 800334a:	9a05      	ldr	r2, [sp, #20]
 800334c:	2a00      	cmp	r2, #0
 800334e:	f47f aee4 	bne.w	800311a <_strtod_l+0xba>
 8003352:	2b4e      	cmp	r3, #78	; 0x4e
 8003354:	d027      	beq.n	80033a6 <_strtod_l+0x346>
 8003356:	dc21      	bgt.n	800339c <_strtod_l+0x33c>
 8003358:	2b49      	cmp	r3, #73	; 0x49
 800335a:	f47f aede 	bne.w	800311a <_strtod_l+0xba>
 800335e:	49a4      	ldr	r1, [pc, #656]	; (80035f0 <_strtod_l+0x590>)
 8003360:	a81b      	add	r0, sp, #108	; 0x6c
 8003362:	f000 ff13 	bl	800418c <__match>
 8003366:	2800      	cmp	r0, #0
 8003368:	f43f aed7 	beq.w	800311a <_strtod_l+0xba>
 800336c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800336e:	49a1      	ldr	r1, [pc, #644]	; (80035f4 <_strtod_l+0x594>)
 8003370:	3b01      	subs	r3, #1
 8003372:	a81b      	add	r0, sp, #108	; 0x6c
 8003374:	931b      	str	r3, [sp, #108]	; 0x6c
 8003376:	f000 ff09 	bl	800418c <__match>
 800337a:	b910      	cbnz	r0, 8003382 <_strtod_l+0x322>
 800337c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800337e:	3301      	adds	r3, #1
 8003380:	931b      	str	r3, [sp, #108]	; 0x6c
 8003382:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003608 <_strtod_l+0x5a8>
 8003386:	f04f 0900 	mov.w	r9, #0
 800338a:	e6a8      	b.n	80030de <_strtod_l+0x7e>
 800338c:	210a      	movs	r1, #10
 800338e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003392:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003396:	e7b8      	b.n	800330a <_strtod_l+0x2aa>
 8003398:	46be      	mov	lr, r7
 800339a:	e7c8      	b.n	800332e <_strtod_l+0x2ce>
 800339c:	2b69      	cmp	r3, #105	; 0x69
 800339e:	d0de      	beq.n	800335e <_strtod_l+0x2fe>
 80033a0:	2b6e      	cmp	r3, #110	; 0x6e
 80033a2:	f47f aeba 	bne.w	800311a <_strtod_l+0xba>
 80033a6:	4994      	ldr	r1, [pc, #592]	; (80035f8 <_strtod_l+0x598>)
 80033a8:	a81b      	add	r0, sp, #108	; 0x6c
 80033aa:	f000 feef 	bl	800418c <__match>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f43f aeb3 	beq.w	800311a <_strtod_l+0xba>
 80033b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b28      	cmp	r3, #40	; 0x28
 80033ba:	d10e      	bne.n	80033da <_strtod_l+0x37a>
 80033bc:	aa1e      	add	r2, sp, #120	; 0x78
 80033be:	498f      	ldr	r1, [pc, #572]	; (80035fc <_strtod_l+0x59c>)
 80033c0:	a81b      	add	r0, sp, #108	; 0x6c
 80033c2:	f000 fef7 	bl	80041b4 <__hexnan>
 80033c6:	2805      	cmp	r0, #5
 80033c8:	d107      	bne.n	80033da <_strtod_l+0x37a>
 80033ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80033cc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80033d0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80033d4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80033d8:	e681      	b.n	80030de <_strtod_l+0x7e>
 80033da:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003610 <_strtod_l+0x5b0>
 80033de:	e7d2      	b.n	8003386 <_strtod_l+0x326>
 80033e0:	ebae 0302 	sub.w	r3, lr, r2
 80033e4:	9307      	str	r3, [sp, #28]
 80033e6:	9b04      	ldr	r3, [sp, #16]
 80033e8:	9806      	ldr	r0, [sp, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf08      	it	eq
 80033ee:	4623      	moveq	r3, r4
 80033f0:	2c10      	cmp	r4, #16
 80033f2:	9304      	str	r3, [sp, #16]
 80033f4:	46a0      	mov	r8, r4
 80033f6:	bfa8      	it	ge
 80033f8:	f04f 0810 	movge.w	r8, #16
 80033fc:	f7fc fff2 	bl	80003e4 <__aeabi_ui2d>
 8003400:	2c09      	cmp	r4, #9
 8003402:	4681      	mov	r9, r0
 8003404:	468a      	mov	sl, r1
 8003406:	dc13      	bgt.n	8003430 <_strtod_l+0x3d0>
 8003408:	9b07      	ldr	r3, [sp, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f43f ae67 	beq.w	80030de <_strtod_l+0x7e>
 8003410:	9b07      	ldr	r3, [sp, #28]
 8003412:	dd7e      	ble.n	8003512 <_strtod_l+0x4b2>
 8003414:	2b16      	cmp	r3, #22
 8003416:	dc65      	bgt.n	80034e4 <_strtod_l+0x484>
 8003418:	4a79      	ldr	r2, [pc, #484]	; (8003600 <_strtod_l+0x5a0>)
 800341a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800341e:	464a      	mov	r2, r9
 8003420:	e9de 0100 	ldrd	r0, r1, [lr]
 8003424:	4653      	mov	r3, sl
 8003426:	f7fd f857 	bl	80004d8 <__aeabi_dmul>
 800342a:	4681      	mov	r9, r0
 800342c:	468a      	mov	sl, r1
 800342e:	e656      	b.n	80030de <_strtod_l+0x7e>
 8003430:	4b73      	ldr	r3, [pc, #460]	; (8003600 <_strtod_l+0x5a0>)
 8003432:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003436:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800343a:	f7fd f84d 	bl	80004d8 <__aeabi_dmul>
 800343e:	4606      	mov	r6, r0
 8003440:	4628      	mov	r0, r5
 8003442:	460f      	mov	r7, r1
 8003444:	f7fc ffce 	bl	80003e4 <__aeabi_ui2d>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4630      	mov	r0, r6
 800344e:	4639      	mov	r1, r7
 8003450:	f7fc fe8c 	bl	800016c <__adddf3>
 8003454:	2c0f      	cmp	r4, #15
 8003456:	4681      	mov	r9, r0
 8003458:	468a      	mov	sl, r1
 800345a:	ddd5      	ble.n	8003408 <_strtod_l+0x3a8>
 800345c:	9b07      	ldr	r3, [sp, #28]
 800345e:	eba4 0808 	sub.w	r8, r4, r8
 8003462:	4498      	add	r8, r3
 8003464:	f1b8 0f00 	cmp.w	r8, #0
 8003468:	f340 809a 	ble.w	80035a0 <_strtod_l+0x540>
 800346c:	f018 030f 	ands.w	r3, r8, #15
 8003470:	d00a      	beq.n	8003488 <_strtod_l+0x428>
 8003472:	4963      	ldr	r1, [pc, #396]	; (8003600 <_strtod_l+0x5a0>)
 8003474:	464a      	mov	r2, r9
 8003476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800347a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800347e:	4653      	mov	r3, sl
 8003480:	f7fd f82a 	bl	80004d8 <__aeabi_dmul>
 8003484:	4681      	mov	r9, r0
 8003486:	468a      	mov	sl, r1
 8003488:	f038 080f 	bics.w	r8, r8, #15
 800348c:	d077      	beq.n	800357e <_strtod_l+0x51e>
 800348e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003492:	dd4b      	ble.n	800352c <_strtod_l+0x4cc>
 8003494:	f04f 0800 	mov.w	r8, #0
 8003498:	f8cd 8010 	str.w	r8, [sp, #16]
 800349c:	f8cd 8020 	str.w	r8, [sp, #32]
 80034a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80034a4:	2322      	movs	r3, #34	; 0x22
 80034a6:	f04f 0900 	mov.w	r9, #0
 80034aa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003608 <_strtod_l+0x5a8>
 80034ae:	f8cb 3000 	str.w	r3, [fp]
 80034b2:	9b08      	ldr	r3, [sp, #32]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f43f ae12 	beq.w	80030de <_strtod_l+0x7e>
 80034ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80034bc:	4658      	mov	r0, fp
 80034be:	f000 ff5c 	bl	800437a <_Bfree>
 80034c2:	9906      	ldr	r1, [sp, #24]
 80034c4:	4658      	mov	r0, fp
 80034c6:	f000 ff58 	bl	800437a <_Bfree>
 80034ca:	9904      	ldr	r1, [sp, #16]
 80034cc:	4658      	mov	r0, fp
 80034ce:	f000 ff54 	bl	800437a <_Bfree>
 80034d2:	9908      	ldr	r1, [sp, #32]
 80034d4:	4658      	mov	r0, fp
 80034d6:	f000 ff50 	bl	800437a <_Bfree>
 80034da:	4641      	mov	r1, r8
 80034dc:	4658      	mov	r0, fp
 80034de:	f000 ff4c 	bl	800437a <_Bfree>
 80034e2:	e5fc      	b.n	80030de <_strtod_l+0x7e>
 80034e4:	9a07      	ldr	r2, [sp, #28]
 80034e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80034ea:	4293      	cmp	r3, r2
 80034ec:	dbb6      	blt.n	800345c <_strtod_l+0x3fc>
 80034ee:	4d44      	ldr	r5, [pc, #272]	; (8003600 <_strtod_l+0x5a0>)
 80034f0:	f1c4 040f 	rsb	r4, r4, #15
 80034f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80034f8:	464a      	mov	r2, r9
 80034fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034fe:	4653      	mov	r3, sl
 8003500:	f7fc ffea 	bl	80004d8 <__aeabi_dmul>
 8003504:	9b07      	ldr	r3, [sp, #28]
 8003506:	1b1c      	subs	r4, r3, r4
 8003508:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800350c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003510:	e789      	b.n	8003426 <_strtod_l+0x3c6>
 8003512:	f113 0f16 	cmn.w	r3, #22
 8003516:	dba1      	blt.n	800345c <_strtod_l+0x3fc>
 8003518:	4a39      	ldr	r2, [pc, #228]	; (8003600 <_strtod_l+0x5a0>)
 800351a:	4648      	mov	r0, r9
 800351c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003520:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003524:	4651      	mov	r1, sl
 8003526:	f7fd f901 	bl	800072c <__aeabi_ddiv>
 800352a:	e77e      	b.n	800342a <_strtod_l+0x3ca>
 800352c:	2300      	movs	r3, #0
 800352e:	4648      	mov	r0, r9
 8003530:	4651      	mov	r1, sl
 8003532:	461d      	mov	r5, r3
 8003534:	4e33      	ldr	r6, [pc, #204]	; (8003604 <_strtod_l+0x5a4>)
 8003536:	ea4f 1828 	mov.w	r8, r8, asr #4
 800353a:	f1b8 0f01 	cmp.w	r8, #1
 800353e:	dc21      	bgt.n	8003584 <_strtod_l+0x524>
 8003540:	b10b      	cbz	r3, 8003546 <_strtod_l+0x4e6>
 8003542:	4681      	mov	r9, r0
 8003544:	468a      	mov	sl, r1
 8003546:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <_strtod_l+0x5a4>)
 8003548:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800354c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003550:	464a      	mov	r2, r9
 8003552:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003556:	4653      	mov	r3, sl
 8003558:	f7fc ffbe 	bl	80004d8 <__aeabi_dmul>
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <_strtod_l+0x5a8>)
 800355e:	460a      	mov	r2, r1
 8003560:	400b      	ands	r3, r1
 8003562:	492a      	ldr	r1, [pc, #168]	; (800360c <_strtod_l+0x5ac>)
 8003564:	4681      	mov	r9, r0
 8003566:	428b      	cmp	r3, r1
 8003568:	d894      	bhi.n	8003494 <_strtod_l+0x434>
 800356a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800356e:	428b      	cmp	r3, r1
 8003570:	bf86      	itte	hi
 8003572:	f04f 39ff 	movhi.w	r9, #4294967295
 8003576:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8003614 <_strtod_l+0x5b4>
 800357a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800357e:	2300      	movs	r3, #0
 8003580:	9305      	str	r3, [sp, #20]
 8003582:	e07b      	b.n	800367c <_strtod_l+0x61c>
 8003584:	f018 0f01 	tst.w	r8, #1
 8003588:	d006      	beq.n	8003598 <_strtod_l+0x538>
 800358a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc ffa1 	bl	80004d8 <__aeabi_dmul>
 8003596:	2301      	movs	r3, #1
 8003598:	3501      	adds	r5, #1
 800359a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800359e:	e7cc      	b.n	800353a <_strtod_l+0x4da>
 80035a0:	d0ed      	beq.n	800357e <_strtod_l+0x51e>
 80035a2:	f1c8 0800 	rsb	r8, r8, #0
 80035a6:	f018 020f 	ands.w	r2, r8, #15
 80035aa:	d00a      	beq.n	80035c2 <_strtod_l+0x562>
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <_strtod_l+0x5a0>)
 80035ae:	4648      	mov	r0, r9
 80035b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80035b4:	4651      	mov	r1, sl
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f7fd f8b7 	bl	800072c <__aeabi_ddiv>
 80035be:	4681      	mov	r9, r0
 80035c0:	468a      	mov	sl, r1
 80035c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80035c6:	d0da      	beq.n	800357e <_strtod_l+0x51e>
 80035c8:	f1b8 0f1f 	cmp.w	r8, #31
 80035cc:	dd24      	ble.n	8003618 <_strtod_l+0x5b8>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80035d6:	f8cd 8020 	str.w	r8, [sp, #32]
 80035da:	f8cd 8018 	str.w	r8, [sp, #24]
 80035de:	2322      	movs	r3, #34	; 0x22
 80035e0:	f04f 0900 	mov.w	r9, #0
 80035e4:	f04f 0a00 	mov.w	sl, #0
 80035e8:	f8cb 3000 	str.w	r3, [fp]
 80035ec:	e761      	b.n	80034b2 <_strtod_l+0x452>
 80035ee:	bf00      	nop
 80035f0:	08004c90 	.word	0x08004c90
 80035f4:	08004c93 	.word	0x08004c93
 80035f8:	08004c99 	.word	0x08004c99
 80035fc:	08004cb0 	.word	0x08004cb0
 8003600:	08004d28 	.word	0x08004d28
 8003604:	08004d00 	.word	0x08004d00
 8003608:	7ff00000 	.word	0x7ff00000
 800360c:	7ca00000 	.word	0x7ca00000
 8003610:	fff80000 	.word	0xfff80000
 8003614:	7fefffff 	.word	0x7fefffff
 8003618:	f018 0310 	ands.w	r3, r8, #16
 800361c:	bf18      	it	ne
 800361e:	236a      	movne	r3, #106	; 0x6a
 8003620:	4648      	mov	r0, r9
 8003622:	9305      	str	r3, [sp, #20]
 8003624:	4651      	mov	r1, sl
 8003626:	2300      	movs	r3, #0
 8003628:	4da1      	ldr	r5, [pc, #644]	; (80038b0 <_strtod_l+0x850>)
 800362a:	f1b8 0f00 	cmp.w	r8, #0
 800362e:	f300 8113 	bgt.w	8003858 <_strtod_l+0x7f8>
 8003632:	b10b      	cbz	r3, 8003638 <_strtod_l+0x5d8>
 8003634:	4681      	mov	r9, r0
 8003636:	468a      	mov	sl, r1
 8003638:	9b05      	ldr	r3, [sp, #20]
 800363a:	b1bb      	cbz	r3, 800366c <_strtod_l+0x60c>
 800363c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003640:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003644:	2b00      	cmp	r3, #0
 8003646:	4651      	mov	r1, sl
 8003648:	dd10      	ble.n	800366c <_strtod_l+0x60c>
 800364a:	2b1f      	cmp	r3, #31
 800364c:	f340 8110 	ble.w	8003870 <_strtod_l+0x810>
 8003650:	2b34      	cmp	r3, #52	; 0x34
 8003652:	bfd8      	it	le
 8003654:	f04f 32ff 	movle.w	r2, #4294967295
 8003658:	f04f 0900 	mov.w	r9, #0
 800365c:	bfcf      	iteee	gt
 800365e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8003662:	3b20      	suble	r3, #32
 8003664:	fa02 f303 	lslle.w	r3, r2, r3
 8003668:	ea03 0a01 	andle.w	sl, r3, r1
 800366c:	2200      	movs	r2, #0
 800366e:	2300      	movs	r3, #0
 8003670:	4648      	mov	r0, r9
 8003672:	4651      	mov	r1, sl
 8003674:	f7fd f998 	bl	80009a8 <__aeabi_dcmpeq>
 8003678:	2800      	cmp	r0, #0
 800367a:	d1a8      	bne.n	80035ce <_strtod_l+0x56e>
 800367c:	9b06      	ldr	r3, [sp, #24]
 800367e:	9a04      	ldr	r2, [sp, #16]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	9908      	ldr	r1, [sp, #32]
 8003684:	4623      	mov	r3, r4
 8003686:	4658      	mov	r0, fp
 8003688:	f000 fec9 	bl	800441e <__s2b>
 800368c:	9008      	str	r0, [sp, #32]
 800368e:	2800      	cmp	r0, #0
 8003690:	f43f af00 	beq.w	8003494 <_strtod_l+0x434>
 8003694:	9a07      	ldr	r2, [sp, #28]
 8003696:	9b07      	ldr	r3, [sp, #28]
 8003698:	2a00      	cmp	r2, #0
 800369a:	f1c3 0300 	rsb	r3, r3, #0
 800369e:	bfa8      	it	ge
 80036a0:	2300      	movge	r3, #0
 80036a2:	f04f 0800 	mov.w	r8, #0
 80036a6:	930e      	str	r3, [sp, #56]	; 0x38
 80036a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80036ac:	9316      	str	r3, [sp, #88]	; 0x58
 80036ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80036b2:	9b08      	ldr	r3, [sp, #32]
 80036b4:	4658      	mov	r0, fp
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	f000 fe2b 	bl	8004312 <_Balloc>
 80036bc:	9006      	str	r0, [sp, #24]
 80036be:	2800      	cmp	r0, #0
 80036c0:	f43f aef0 	beq.w	80034a4 <_strtod_l+0x444>
 80036c4:	9b08      	ldr	r3, [sp, #32]
 80036c6:	300c      	adds	r0, #12
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	f103 010c 	add.w	r1, r3, #12
 80036ce:	3202      	adds	r2, #2
 80036d0:	0092      	lsls	r2, r2, #2
 80036d2:	f000 fe13 	bl	80042fc <memcpy>
 80036d6:	ab1e      	add	r3, sp, #120	; 0x78
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	ab1d      	add	r3, sp, #116	; 0x74
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	464a      	mov	r2, r9
 80036e0:	4653      	mov	r3, sl
 80036e2:	4658      	mov	r0, fp
 80036e4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80036e8:	f001 f954 	bl	8004994 <__d2b>
 80036ec:	901c      	str	r0, [sp, #112]	; 0x70
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f43f aed8 	beq.w	80034a4 <_strtod_l+0x444>
 80036f4:	2101      	movs	r1, #1
 80036f6:	4658      	mov	r0, fp
 80036f8:	f000 ff1d 	bl	8004536 <__i2b>
 80036fc:	9004      	str	r0, [sp, #16]
 80036fe:	4603      	mov	r3, r0
 8003700:	2800      	cmp	r0, #0
 8003702:	f43f aecf 	beq.w	80034a4 <_strtod_l+0x444>
 8003706:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003708:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800370a:	2d00      	cmp	r5, #0
 800370c:	bfab      	itete	ge
 800370e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003710:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003712:	18ee      	addge	r6, r5, r3
 8003714:	1b5c      	sublt	r4, r3, r5
 8003716:	9b05      	ldr	r3, [sp, #20]
 8003718:	bfa8      	it	ge
 800371a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800371c:	eba5 0503 	sub.w	r5, r5, r3
 8003720:	4415      	add	r5, r2
 8003722:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <_strtod_l+0x854>)
 8003724:	f105 35ff 	add.w	r5, r5, #4294967295
 8003728:	bfb8      	it	lt
 800372a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800372c:	429d      	cmp	r5, r3
 800372e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003732:	f280 80af 	bge.w	8003894 <_strtod_l+0x834>
 8003736:	1b5b      	subs	r3, r3, r5
 8003738:	2b1f      	cmp	r3, #31
 800373a:	eba2 0203 	sub.w	r2, r2, r3
 800373e:	f04f 0701 	mov.w	r7, #1
 8003742:	f300 809c 	bgt.w	800387e <_strtod_l+0x81e>
 8003746:	2500      	movs	r5, #0
 8003748:	fa07 f303 	lsl.w	r3, r7, r3
 800374c:	930f      	str	r3, [sp, #60]	; 0x3c
 800374e:	18b7      	adds	r7, r6, r2
 8003750:	9b05      	ldr	r3, [sp, #20]
 8003752:	42be      	cmp	r6, r7
 8003754:	4414      	add	r4, r2
 8003756:	441c      	add	r4, r3
 8003758:	4633      	mov	r3, r6
 800375a:	bfa8      	it	ge
 800375c:	463b      	movge	r3, r7
 800375e:	42a3      	cmp	r3, r4
 8003760:	bfa8      	it	ge
 8003762:	4623      	movge	r3, r4
 8003764:	2b00      	cmp	r3, #0
 8003766:	bfc2      	ittt	gt
 8003768:	1aff      	subgt	r7, r7, r3
 800376a:	1ae4      	subgt	r4, r4, r3
 800376c:	1af6      	subgt	r6, r6, r3
 800376e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003770:	b1bb      	cbz	r3, 80037a2 <_strtod_l+0x742>
 8003772:	461a      	mov	r2, r3
 8003774:	9904      	ldr	r1, [sp, #16]
 8003776:	4658      	mov	r0, fp
 8003778:	f000 ff7c 	bl	8004674 <__pow5mult>
 800377c:	9004      	str	r0, [sp, #16]
 800377e:	2800      	cmp	r0, #0
 8003780:	f43f ae90 	beq.w	80034a4 <_strtod_l+0x444>
 8003784:	4601      	mov	r1, r0
 8003786:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003788:	4658      	mov	r0, fp
 800378a:	f000 fedd 	bl	8004548 <__multiply>
 800378e:	9009      	str	r0, [sp, #36]	; 0x24
 8003790:	2800      	cmp	r0, #0
 8003792:	f43f ae87 	beq.w	80034a4 <_strtod_l+0x444>
 8003796:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003798:	4658      	mov	r0, fp
 800379a:	f000 fdee 	bl	800437a <_Bfree>
 800379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037a0:	931c      	str	r3, [sp, #112]	; 0x70
 80037a2:	2f00      	cmp	r7, #0
 80037a4:	dc7a      	bgt.n	800389c <_strtod_l+0x83c>
 80037a6:	9b07      	ldr	r3, [sp, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dd08      	ble.n	80037be <_strtod_l+0x75e>
 80037ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80037ae:	9906      	ldr	r1, [sp, #24]
 80037b0:	4658      	mov	r0, fp
 80037b2:	f000 ff5f 	bl	8004674 <__pow5mult>
 80037b6:	9006      	str	r0, [sp, #24]
 80037b8:	2800      	cmp	r0, #0
 80037ba:	f43f ae73 	beq.w	80034a4 <_strtod_l+0x444>
 80037be:	2c00      	cmp	r4, #0
 80037c0:	dd08      	ble.n	80037d4 <_strtod_l+0x774>
 80037c2:	4622      	mov	r2, r4
 80037c4:	9906      	ldr	r1, [sp, #24]
 80037c6:	4658      	mov	r0, fp
 80037c8:	f000 ffa2 	bl	8004710 <__lshift>
 80037cc:	9006      	str	r0, [sp, #24]
 80037ce:	2800      	cmp	r0, #0
 80037d0:	f43f ae68 	beq.w	80034a4 <_strtod_l+0x444>
 80037d4:	2e00      	cmp	r6, #0
 80037d6:	dd08      	ble.n	80037ea <_strtod_l+0x78a>
 80037d8:	4632      	mov	r2, r6
 80037da:	9904      	ldr	r1, [sp, #16]
 80037dc:	4658      	mov	r0, fp
 80037de:	f000 ff97 	bl	8004710 <__lshift>
 80037e2:	9004      	str	r0, [sp, #16]
 80037e4:	2800      	cmp	r0, #0
 80037e6:	f43f ae5d 	beq.w	80034a4 <_strtod_l+0x444>
 80037ea:	9a06      	ldr	r2, [sp, #24]
 80037ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80037ee:	4658      	mov	r0, fp
 80037f0:	f000 fffc 	bl	80047ec <__mdiff>
 80037f4:	4680      	mov	r8, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	f43f ae54 	beq.w	80034a4 <_strtod_l+0x444>
 80037fc:	2400      	movs	r4, #0
 80037fe:	68c3      	ldr	r3, [r0, #12]
 8003800:	9904      	ldr	r1, [sp, #16]
 8003802:	60c4      	str	r4, [r0, #12]
 8003804:	930c      	str	r3, [sp, #48]	; 0x30
 8003806:	f000 ffd7 	bl	80047b8 <__mcmp>
 800380a:	42a0      	cmp	r0, r4
 800380c:	da54      	bge.n	80038b8 <_strtod_l+0x858>
 800380e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003810:	b9f3      	cbnz	r3, 8003850 <_strtod_l+0x7f0>
 8003812:	f1b9 0f00 	cmp.w	r9, #0
 8003816:	d11b      	bne.n	8003850 <_strtod_l+0x7f0>
 8003818:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800381c:	b9c3      	cbnz	r3, 8003850 <_strtod_l+0x7f0>
 800381e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003822:	0d1b      	lsrs	r3, r3, #20
 8003824:	051b      	lsls	r3, r3, #20
 8003826:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800382a:	d911      	bls.n	8003850 <_strtod_l+0x7f0>
 800382c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8003830:	b91b      	cbnz	r3, 800383a <_strtod_l+0x7da>
 8003832:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	dd0a      	ble.n	8003850 <_strtod_l+0x7f0>
 800383a:	4641      	mov	r1, r8
 800383c:	2201      	movs	r2, #1
 800383e:	4658      	mov	r0, fp
 8003840:	f000 ff66 	bl	8004710 <__lshift>
 8003844:	9904      	ldr	r1, [sp, #16]
 8003846:	4680      	mov	r8, r0
 8003848:	f000 ffb6 	bl	80047b8 <__mcmp>
 800384c:	2800      	cmp	r0, #0
 800384e:	dc68      	bgt.n	8003922 <_strtod_l+0x8c2>
 8003850:	9b05      	ldr	r3, [sp, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d172      	bne.n	800393c <_strtod_l+0x8dc>
 8003856:	e630      	b.n	80034ba <_strtod_l+0x45a>
 8003858:	f018 0f01 	tst.w	r8, #1
 800385c:	d004      	beq.n	8003868 <_strtod_l+0x808>
 800385e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003862:	f7fc fe39 	bl	80004d8 <__aeabi_dmul>
 8003866:	2301      	movs	r3, #1
 8003868:	ea4f 0868 	mov.w	r8, r8, asr #1
 800386c:	3508      	adds	r5, #8
 800386e:	e6dc      	b.n	800362a <_strtod_l+0x5ca>
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	ea03 0909 	and.w	r9, r3, r9
 800387c:	e6f6      	b.n	800366c <_strtod_l+0x60c>
 800387e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003882:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003886:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800388a:	35e2      	adds	r5, #226	; 0xe2
 800388c:	fa07 f505 	lsl.w	r5, r7, r5
 8003890:	970f      	str	r7, [sp, #60]	; 0x3c
 8003892:	e75c      	b.n	800374e <_strtod_l+0x6ee>
 8003894:	2301      	movs	r3, #1
 8003896:	2500      	movs	r5, #0
 8003898:	930f      	str	r3, [sp, #60]	; 0x3c
 800389a:	e758      	b.n	800374e <_strtod_l+0x6ee>
 800389c:	463a      	mov	r2, r7
 800389e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80038a0:	4658      	mov	r0, fp
 80038a2:	f000 ff35 	bl	8004710 <__lshift>
 80038a6:	901c      	str	r0, [sp, #112]	; 0x70
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f47f af7c 	bne.w	80037a6 <_strtod_l+0x746>
 80038ae:	e5f9      	b.n	80034a4 <_strtod_l+0x444>
 80038b0:	08004cc8 	.word	0x08004cc8
 80038b4:	fffffc02 	.word	0xfffffc02
 80038b8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80038bc:	f040 8089 	bne.w	80039d2 <_strtod_l+0x972>
 80038c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038c2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80038c6:	b342      	cbz	r2, 800391a <_strtod_l+0x8ba>
 80038c8:	4aaf      	ldr	r2, [pc, #700]	; (8003b88 <_strtod_l+0xb28>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d156      	bne.n	800397c <_strtod_l+0x91c>
 80038ce:	9b05      	ldr	r3, [sp, #20]
 80038d0:	4648      	mov	r0, r9
 80038d2:	b1eb      	cbz	r3, 8003910 <_strtod_l+0x8b0>
 80038d4:	4653      	mov	r3, sl
 80038d6:	4aad      	ldr	r2, [pc, #692]	; (8003b8c <_strtod_l+0xb2c>)
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	401a      	ands	r2, r3
 80038de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80038e2:	d818      	bhi.n	8003916 <_strtod_l+0x8b6>
 80038e4:	0d12      	lsrs	r2, r2, #20
 80038e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80038ea:	fa01 f303 	lsl.w	r3, r1, r3
 80038ee:	4298      	cmp	r0, r3
 80038f0:	d144      	bne.n	800397c <_strtod_l+0x91c>
 80038f2:	4ba7      	ldr	r3, [pc, #668]	; (8003b90 <_strtod_l+0xb30>)
 80038f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d102      	bne.n	8003900 <_strtod_l+0x8a0>
 80038fa:	3001      	adds	r0, #1
 80038fc:	f43f add2 	beq.w	80034a4 <_strtod_l+0x444>
 8003900:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <_strtod_l+0xb2c>)
 8003902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003904:	f04f 0900 	mov.w	r9, #0
 8003908:	401a      	ands	r2, r3
 800390a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800390e:	e79f      	b.n	8003850 <_strtod_l+0x7f0>
 8003910:	f04f 33ff 	mov.w	r3, #4294967295
 8003914:	e7eb      	b.n	80038ee <_strtod_l+0x88e>
 8003916:	460b      	mov	r3, r1
 8003918:	e7e9      	b.n	80038ee <_strtod_l+0x88e>
 800391a:	bb7b      	cbnz	r3, 800397c <_strtod_l+0x91c>
 800391c:	f1b9 0f00 	cmp.w	r9, #0
 8003920:	d12c      	bne.n	800397c <_strtod_l+0x91c>
 8003922:	9905      	ldr	r1, [sp, #20]
 8003924:	4653      	mov	r3, sl
 8003926:	4a99      	ldr	r2, [pc, #612]	; (8003b8c <_strtod_l+0xb2c>)
 8003928:	b1f1      	cbz	r1, 8003968 <_strtod_l+0x908>
 800392a:	ea02 010a 	and.w	r1, r2, sl
 800392e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003932:	dc19      	bgt.n	8003968 <_strtod_l+0x908>
 8003934:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003938:	f77f ae51 	ble.w	80035de <_strtod_l+0x57e>
 800393c:	2300      	movs	r3, #0
 800393e:	4a95      	ldr	r2, [pc, #596]	; (8003b94 <_strtod_l+0xb34>)
 8003940:	4648      	mov	r0, r9
 8003942:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003946:	4651      	mov	r1, sl
 8003948:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800394c:	f7fc fdc4 	bl	80004d8 <__aeabi_dmul>
 8003950:	4681      	mov	r9, r0
 8003952:	468a      	mov	sl, r1
 8003954:	2900      	cmp	r1, #0
 8003956:	f47f adb0 	bne.w	80034ba <_strtod_l+0x45a>
 800395a:	2800      	cmp	r0, #0
 800395c:	f47f adad 	bne.w	80034ba <_strtod_l+0x45a>
 8003960:	2322      	movs	r3, #34	; 0x22
 8003962:	f8cb 3000 	str.w	r3, [fp]
 8003966:	e5a8      	b.n	80034ba <_strtod_l+0x45a>
 8003968:	4013      	ands	r3, r2
 800396a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800396e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8003972:	f04f 39ff 	mov.w	r9, #4294967295
 8003976:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800397a:	e769      	b.n	8003850 <_strtod_l+0x7f0>
 800397c:	b19d      	cbz	r5, 80039a6 <_strtod_l+0x946>
 800397e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003980:	421d      	tst	r5, r3
 8003982:	f43f af65 	beq.w	8003850 <_strtod_l+0x7f0>
 8003986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003988:	9a05      	ldr	r2, [sp, #20]
 800398a:	4648      	mov	r0, r9
 800398c:	4651      	mov	r1, sl
 800398e:	b173      	cbz	r3, 80039ae <_strtod_l+0x94e>
 8003990:	f7ff fb42 	bl	8003018 <sulp>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800399c:	f7fc fbe6 	bl	800016c <__adddf3>
 80039a0:	4681      	mov	r9, r0
 80039a2:	468a      	mov	sl, r1
 80039a4:	e754      	b.n	8003850 <_strtod_l+0x7f0>
 80039a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039a8:	ea13 0f09 	tst.w	r3, r9
 80039ac:	e7e9      	b.n	8003982 <_strtod_l+0x922>
 80039ae:	f7ff fb33 	bl	8003018 <sulp>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039ba:	f7fc fbd5 	bl	8000168 <__aeabi_dsub>
 80039be:	2200      	movs	r2, #0
 80039c0:	2300      	movs	r3, #0
 80039c2:	4681      	mov	r9, r0
 80039c4:	468a      	mov	sl, r1
 80039c6:	f7fc ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	f47f ae07 	bne.w	80035de <_strtod_l+0x57e>
 80039d0:	e73e      	b.n	8003850 <_strtod_l+0x7f0>
 80039d2:	9904      	ldr	r1, [sp, #16]
 80039d4:	4640      	mov	r0, r8
 80039d6:	f001 f82c 	bl	8004a32 <__ratio>
 80039da:	2200      	movs	r2, #0
 80039dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039e0:	4606      	mov	r6, r0
 80039e2:	460f      	mov	r7, r1
 80039e4:	f7fc fff4 	bl	80009d0 <__aeabi_dcmple>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d075      	beq.n	8003ad8 <_strtod_l+0xa78>
 80039ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d047      	beq.n	8003a82 <_strtod_l+0xa22>
 80039f2:	2600      	movs	r6, #0
 80039f4:	4f68      	ldr	r7, [pc, #416]	; (8003b98 <_strtod_l+0xb38>)
 80039f6:	4d68      	ldr	r5, [pc, #416]	; (8003b98 <_strtod_l+0xb38>)
 80039f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039fe:	0d1b      	lsrs	r3, r3, #20
 8003a00:	051b      	lsls	r3, r3, #20
 8003a02:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <_strtod_l+0xb3c>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	f040 80cf 	bne.w	8003bac <_strtod_l+0xb4c>
 8003a0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a18:	4648      	mov	r0, r9
 8003a1a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8003a1e:	4651      	mov	r1, sl
 8003a20:	f000 ff42 	bl	80048a8 <__ulp>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4630      	mov	r0, r6
 8003a2a:	4639      	mov	r1, r7
 8003a2c:	f7fc fd54 	bl	80004d8 <__aeabi_dmul>
 8003a30:	464a      	mov	r2, r9
 8003a32:	4653      	mov	r3, sl
 8003a34:	f7fc fb9a 	bl	800016c <__adddf3>
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4954      	ldr	r1, [pc, #336]	; (8003b8c <_strtod_l+0xb2c>)
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <_strtod_l+0xb40>)
 8003a3e:	4019      	ands	r1, r3
 8003a40:	4291      	cmp	r1, r2
 8003a42:	4681      	mov	r9, r0
 8003a44:	d95e      	bls.n	8003b04 <_strtod_l+0xaa4>
 8003a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <_strtod_l+0x9f8>
 8003a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a52:	3301      	adds	r3, #1
 8003a54:	f43f ad26 	beq.w	80034a4 <_strtod_l+0x444>
 8003a58:	f04f 39ff 	mov.w	r9, #4294967295
 8003a5c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003b90 <_strtod_l+0xb30>
 8003a60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003a62:	4658      	mov	r0, fp
 8003a64:	f000 fc89 	bl	800437a <_Bfree>
 8003a68:	9906      	ldr	r1, [sp, #24]
 8003a6a:	4658      	mov	r0, fp
 8003a6c:	f000 fc85 	bl	800437a <_Bfree>
 8003a70:	9904      	ldr	r1, [sp, #16]
 8003a72:	4658      	mov	r0, fp
 8003a74:	f000 fc81 	bl	800437a <_Bfree>
 8003a78:	4641      	mov	r1, r8
 8003a7a:	4658      	mov	r0, fp
 8003a7c:	f000 fc7d 	bl	800437a <_Bfree>
 8003a80:	e617      	b.n	80036b2 <_strtod_l+0x652>
 8003a82:	f1b9 0f00 	cmp.w	r9, #0
 8003a86:	d119      	bne.n	8003abc <_strtod_l+0xa5c>
 8003a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a8e:	b9e3      	cbnz	r3, 8003aca <_strtod_l+0xa6a>
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <_strtod_l+0xb38>)
 8003a94:	4630      	mov	r0, r6
 8003a96:	4639      	mov	r1, r7
 8003a98:	f7fc ff90 	bl	80009bc <__aeabi_dcmplt>
 8003a9c:	b9c8      	cbnz	r0, 8003ad2 <_strtod_l+0xa72>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4b40      	ldr	r3, [pc, #256]	; (8003ba4 <_strtod_l+0xb44>)
 8003aa2:	4630      	mov	r0, r6
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	f7fc fd17 	bl	80004d8 <__aeabi_dmul>
 8003aaa:	4604      	mov	r4, r0
 8003aac:	460d      	mov	r5, r1
 8003aae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003ab2:	9418      	str	r4, [sp, #96]	; 0x60
 8003ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8003ab6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8003aba:	e79d      	b.n	80039f8 <_strtod_l+0x998>
 8003abc:	f1b9 0f01 	cmp.w	r9, #1
 8003ac0:	d103      	bne.n	8003aca <_strtod_l+0xa6a>
 8003ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f43f ad8a 	beq.w	80035de <_strtod_l+0x57e>
 8003aca:	2600      	movs	r6, #0
 8003acc:	4f36      	ldr	r7, [pc, #216]	; (8003ba8 <_strtod_l+0xb48>)
 8003ace:	2400      	movs	r4, #0
 8003ad0:	e791      	b.n	80039f6 <_strtod_l+0x996>
 8003ad2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003ad4:	4d33      	ldr	r5, [pc, #204]	; (8003ba4 <_strtod_l+0xb44>)
 8003ad6:	e7ea      	b.n	8003aae <_strtod_l+0xa4e>
 8003ad8:	4b32      	ldr	r3, [pc, #200]	; (8003ba4 <_strtod_l+0xb44>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	4630      	mov	r0, r6
 8003ade:	4639      	mov	r1, r7
 8003ae0:	f7fc fcfa 	bl	80004d8 <__aeabi_dmul>
 8003ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	460d      	mov	r5, r1
 8003aea:	b933      	cbnz	r3, 8003afa <_strtod_l+0xa9a>
 8003aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003af0:	9010      	str	r0, [sp, #64]	; 0x40
 8003af2:	9311      	str	r3, [sp, #68]	; 0x44
 8003af4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003af8:	e77e      	b.n	80039f8 <_strtod_l+0x998>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003b02:	e7f7      	b.n	8003af4 <_strtod_l+0xa94>
 8003b04:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8003b08:	9b05      	ldr	r3, [sp, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1a8      	bne.n	8003a60 <_strtod_l+0xa00>
 8003b0e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003b12:	0d1b      	lsrs	r3, r3, #20
 8003b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003b16:	051b      	lsls	r3, r3, #20
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	4656      	mov	r6, sl
 8003b1c:	d1a0      	bne.n	8003a60 <_strtod_l+0xa00>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fc ff73 	bl	8000a0c <__aeabi_d2iz>
 8003b26:	f7fc fc6d 	bl	8000404 <__aeabi_i2d>
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4629      	mov	r1, r5
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7fc fb19 	bl	8000168 <__aeabi_dsub>
 8003b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b38:	4604      	mov	r4, r0
 8003b3a:	460d      	mov	r5, r1
 8003b3c:	b933      	cbnz	r3, 8003b4c <_strtod_l+0xaec>
 8003b3e:	f1b9 0f00 	cmp.w	r9, #0
 8003b42:	d103      	bne.n	8003b4c <_strtod_l+0xaec>
 8003b44:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8003b48:	2e00      	cmp	r6, #0
 8003b4a:	d06a      	beq.n	8003c22 <_strtod_l+0xbc2>
 8003b4c:	a30a      	add	r3, pc, #40	; (adr r3, 8003b78 <_strtod_l+0xb18>)
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc ff31 	bl	80009bc <__aeabi_dcmplt>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f47f acad 	bne.w	80034ba <_strtod_l+0x45a>
 8003b60:	a307      	add	r3, pc, #28	; (adr r3, 8003b80 <_strtod_l+0xb20>)
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc ff45 	bl	80009f8 <__aeabi_dcmpgt>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f43f af76 	beq.w	8003a60 <_strtod_l+0xa00>
 8003b74:	e4a1      	b.n	80034ba <_strtod_l+0x45a>
 8003b76:	bf00      	nop
 8003b78:	94a03595 	.word	0x94a03595
 8003b7c:	3fdfffff 	.word	0x3fdfffff
 8003b80:	35afe535 	.word	0x35afe535
 8003b84:	3fe00000 	.word	0x3fe00000
 8003b88:	000fffff 	.word	0x000fffff
 8003b8c:	7ff00000 	.word	0x7ff00000
 8003b90:	7fefffff 	.word	0x7fefffff
 8003b94:	39500000 	.word	0x39500000
 8003b98:	3ff00000 	.word	0x3ff00000
 8003b9c:	7fe00000 	.word	0x7fe00000
 8003ba0:	7c9fffff 	.word	0x7c9fffff
 8003ba4:	3fe00000 	.word	0x3fe00000
 8003ba8:	bff00000 	.word	0xbff00000
 8003bac:	9b05      	ldr	r3, [sp, #20]
 8003bae:	b313      	cbz	r3, 8003bf6 <_strtod_l+0xb96>
 8003bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003bb6:	d81e      	bhi.n	8003bf6 <_strtod_l+0xb96>
 8003bb8:	a325      	add	r3, pc, #148	; (adr r3, 8003c50 <_strtod_l+0xbf0>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc ff05 	bl	80009d0 <__aeabi_dcmple>
 8003bc6:	b190      	cbz	r0, 8003bee <_strtod_l+0xb8e>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7fc ff46 	bl	8000a5c <__aeabi_d2uiz>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	bf08      	it	eq
 8003bd4:	2001      	moveq	r0, #1
 8003bd6:	f7fc fc05 	bl	80003e4 <__aeabi_ui2d>
 8003bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	b9d3      	cbnz	r3, 8003c18 <_strtod_l+0xbb8>
 8003be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003be6:	9012      	str	r0, [sp, #72]	; 0x48
 8003be8:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bea:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8003bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bf0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8003bf4:	1a9f      	subs	r7, r3, r2
 8003bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003bfa:	f000 fe55 	bl	80048a8 <__ulp>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4630      	mov	r0, r6
 8003c04:	4639      	mov	r1, r7
 8003c06:	f7fc fc67 	bl	80004d8 <__aeabi_dmul>
 8003c0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c0e:	f7fc faad 	bl	800016c <__adddf3>
 8003c12:	4681      	mov	r9, r0
 8003c14:	468a      	mov	sl, r1
 8003c16:	e777      	b.n	8003b08 <_strtod_l+0xaa8>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003c20:	e7e3      	b.n	8003bea <_strtod_l+0xb8a>
 8003c22:	a30d      	add	r3, pc, #52	; (adr r3, 8003c58 <_strtod_l+0xbf8>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fec8 	bl	80009bc <__aeabi_dcmplt>
 8003c2c:	e79f      	b.n	8003b6e <_strtod_l+0xb0e>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	930d      	str	r3, [sp, #52]	; 0x34
 8003c32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	f7ff ba55 	b.w	80030e6 <_strtod_l+0x86>
 8003c3c:	2b65      	cmp	r3, #101	; 0x65
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f43f ab42 	beq.w	80032ca <_strtod_l+0x26a>
 8003c46:	2101      	movs	r1, #1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	9105      	str	r1, [sp, #20]
 8003c4c:	f7ff babf 	b.w	80031ce <_strtod_l+0x16e>
 8003c50:	ffc00000 	.word	0xffc00000
 8003c54:	41dfffff 	.word	0x41dfffff
 8003c58:	94a03595 	.word	0x94a03595
 8003c5c:	3fcfffff 	.word	0x3fcfffff

08003c60 <strtod>:
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <strtod+0x1c>)
 8003c62:	b410      	push	{r4}
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <strtod+0x20>)
 8003c68:	6a23      	ldr	r3, [r4, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf08      	it	eq
 8003c6e:	4613      	moveq	r3, r2
 8003c70:	460a      	mov	r2, r1
 8003c72:	4601      	mov	r1, r0
 8003c74:	4620      	mov	r0, r4
 8003c76:	bc10      	pop	{r4}
 8003c78:	f7ff b9f2 	b.w	8003060 <_strtod_l>
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	20000070 	.word	0x20000070

08003c84 <rshift>:
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	6906      	ldr	r6, [r0, #16]
 8003c88:	114b      	asrs	r3, r1, #5
 8003c8a:	429e      	cmp	r6, r3
 8003c8c:	f100 0414 	add.w	r4, r0, #20
 8003c90:	dd31      	ble.n	8003cf6 <rshift+0x72>
 8003c92:	f011 011f 	ands.w	r1, r1, #31
 8003c96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003c9a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8003c9e:	d108      	bne.n	8003cb2 <rshift+0x2e>
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	42b2      	cmp	r2, r6
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	d211      	bcs.n	8003ccc <rshift+0x48>
 8003ca8:	f852 3b04 	ldr.w	r3, [r2], #4
 8003cac:	f841 3b04 	str.w	r3, [r1], #4
 8003cb0:	e7f7      	b.n	8003ca2 <rshift+0x1e>
 8003cb2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	f1c1 0c20 	rsb	ip, r1, #32
 8003cbc:	40cd      	lsrs	r5, r1
 8003cbe:	3204      	adds	r2, #4
 8003cc0:	42b2      	cmp	r2, r6
 8003cc2:	4617      	mov	r7, r2
 8003cc4:	d30d      	bcc.n	8003ce2 <rshift+0x5e>
 8003cc6:	601d      	str	r5, [r3, #0]
 8003cc8:	b105      	cbz	r5, 8003ccc <rshift+0x48>
 8003cca:	3304      	adds	r3, #4
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	eba3 0204 	sub.w	r2, r3, r4
 8003cd2:	bf08      	it	eq
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003cda:	6102      	str	r2, [r0, #16]
 8003cdc:	bf08      	it	eq
 8003cde:	6143      	streq	r3, [r0, #20]
 8003ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce2:	683f      	ldr	r7, [r7, #0]
 8003ce4:	fa07 f70c 	lsl.w	r7, r7, ip
 8003ce8:	433d      	orrs	r5, r7
 8003cea:	f843 5b04 	str.w	r5, [r3], #4
 8003cee:	f852 5b04 	ldr.w	r5, [r2], #4
 8003cf2:	40cd      	lsrs	r5, r1
 8003cf4:	e7e4      	b.n	8003cc0 <rshift+0x3c>
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	e7e8      	b.n	8003ccc <rshift+0x48>

08003cfa <__hexdig_fun>:
 8003cfa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003cfe:	2b09      	cmp	r3, #9
 8003d00:	d802      	bhi.n	8003d08 <__hexdig_fun+0xe>
 8003d02:	3820      	subs	r0, #32
 8003d04:	b2c0      	uxtb	r0, r0
 8003d06:	4770      	bx	lr
 8003d08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d801      	bhi.n	8003d14 <__hexdig_fun+0x1a>
 8003d10:	3847      	subs	r0, #71	; 0x47
 8003d12:	e7f7      	b.n	8003d04 <__hexdig_fun+0xa>
 8003d14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d801      	bhi.n	8003d20 <__hexdig_fun+0x26>
 8003d1c:	3827      	subs	r0, #39	; 0x27
 8003d1e:	e7f1      	b.n	8003d04 <__hexdig_fun+0xa>
 8003d20:	2000      	movs	r0, #0
 8003d22:	4770      	bx	lr

08003d24 <__gethex>:
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	b08b      	sub	sp, #44	; 0x2c
 8003d2a:	9002      	str	r0, [sp, #8]
 8003d2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003d2e:	468a      	mov	sl, r1
 8003d30:	4690      	mov	r8, r2
 8003d32:	9306      	str	r3, [sp, #24]
 8003d34:	f000 face 	bl	80042d4 <__localeconv_l>
 8003d38:	6803      	ldr	r3, [r0, #0]
 8003d3a:	f04f 0b00 	mov.w	fp, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	f7fc fa05 	bl	8000150 <strlen>
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	9001      	str	r0, [sp, #4]
 8003d4a:	4403      	add	r3, r0
 8003d4c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003d50:	9307      	str	r3, [sp, #28]
 8003d52:	f8da 3000 	ldr.w	r3, [sl]
 8003d56:	3302      	adds	r3, #2
 8003d58:	461f      	mov	r7, r3
 8003d5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003d5e:	2830      	cmp	r0, #48	; 0x30
 8003d60:	d06c      	beq.n	8003e3c <__gethex+0x118>
 8003d62:	f7ff ffca 	bl	8003cfa <__hexdig_fun>
 8003d66:	4604      	mov	r4, r0
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d16a      	bne.n	8003e42 <__gethex+0x11e>
 8003d6c:	9a01      	ldr	r2, [sp, #4]
 8003d6e:	9903      	ldr	r1, [sp, #12]
 8003d70:	4638      	mov	r0, r7
 8003d72:	f000 ff3f 	bl	8004bf4 <strncmp>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d166      	bne.n	8003e48 <__gethex+0x124>
 8003d7a:	9b01      	ldr	r3, [sp, #4]
 8003d7c:	5cf8      	ldrb	r0, [r7, r3]
 8003d7e:	18fe      	adds	r6, r7, r3
 8003d80:	f7ff ffbb 	bl	8003cfa <__hexdig_fun>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d062      	beq.n	8003e4e <__gethex+0x12a>
 8003d88:	4633      	mov	r3, r6
 8003d8a:	7818      	ldrb	r0, [r3, #0]
 8003d8c:	461f      	mov	r7, r3
 8003d8e:	2830      	cmp	r0, #48	; 0x30
 8003d90:	f103 0301 	add.w	r3, r3, #1
 8003d94:	d0f9      	beq.n	8003d8a <__gethex+0x66>
 8003d96:	f7ff ffb0 	bl	8003cfa <__hexdig_fun>
 8003d9a:	fab0 f580 	clz	r5, r0
 8003d9e:	4634      	mov	r4, r6
 8003da0:	f04f 0b01 	mov.w	fp, #1
 8003da4:	096d      	lsrs	r5, r5, #5
 8003da6:	463a      	mov	r2, r7
 8003da8:	4616      	mov	r6, r2
 8003daa:	7830      	ldrb	r0, [r6, #0]
 8003dac:	3201      	adds	r2, #1
 8003dae:	f7ff ffa4 	bl	8003cfa <__hexdig_fun>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d1f8      	bne.n	8003da8 <__gethex+0x84>
 8003db6:	9a01      	ldr	r2, [sp, #4]
 8003db8:	9903      	ldr	r1, [sp, #12]
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f000 ff1a 	bl	8004bf4 <strncmp>
 8003dc0:	b950      	cbnz	r0, 8003dd8 <__gethex+0xb4>
 8003dc2:	b954      	cbnz	r4, 8003dda <__gethex+0xb6>
 8003dc4:	9b01      	ldr	r3, [sp, #4]
 8003dc6:	18f4      	adds	r4, r6, r3
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4616      	mov	r6, r2
 8003dcc:	7830      	ldrb	r0, [r6, #0]
 8003dce:	3201      	adds	r2, #1
 8003dd0:	f7ff ff93 	bl	8003cfa <__hexdig_fun>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1f8      	bne.n	8003dca <__gethex+0xa6>
 8003dd8:	b10c      	cbz	r4, 8003dde <__gethex+0xba>
 8003dda:	1ba4      	subs	r4, r4, r6
 8003ddc:	00a4      	lsls	r4, r4, #2
 8003dde:	7833      	ldrb	r3, [r6, #0]
 8003de0:	2b50      	cmp	r3, #80	; 0x50
 8003de2:	d001      	beq.n	8003de8 <__gethex+0xc4>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d140      	bne.n	8003e6a <__gethex+0x146>
 8003de8:	7873      	ldrb	r3, [r6, #1]
 8003dea:	2b2b      	cmp	r3, #43	; 0x2b
 8003dec:	d031      	beq.n	8003e52 <__gethex+0x12e>
 8003dee:	2b2d      	cmp	r3, #45	; 0x2d
 8003df0:	d033      	beq.n	8003e5a <__gethex+0x136>
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	1c71      	adds	r1, r6, #1
 8003df8:	7808      	ldrb	r0, [r1, #0]
 8003dfa:	f7ff ff7e 	bl	8003cfa <__hexdig_fun>
 8003dfe:	1e43      	subs	r3, r0, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b18      	cmp	r3, #24
 8003e04:	d831      	bhi.n	8003e6a <__gethex+0x146>
 8003e06:	f1a0 0210 	sub.w	r2, r0, #16
 8003e0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003e0e:	f7ff ff74 	bl	8003cfa <__hexdig_fun>
 8003e12:	1e43      	subs	r3, r0, #1
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	d922      	bls.n	8003e60 <__gethex+0x13c>
 8003e1a:	f1b9 0f00 	cmp.w	r9, #0
 8003e1e:	d000      	beq.n	8003e22 <__gethex+0xfe>
 8003e20:	4252      	negs	r2, r2
 8003e22:	4414      	add	r4, r2
 8003e24:	f8ca 1000 	str.w	r1, [sl]
 8003e28:	b30d      	cbz	r5, 8003e6e <__gethex+0x14a>
 8003e2a:	f1bb 0f00 	cmp.w	fp, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2706      	moveq	r7, #6
 8003e32:	2700      	movne	r7, #0
 8003e34:	4638      	mov	r0, r7
 8003e36:	b00b      	add	sp, #44	; 0x2c
 8003e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e3c:	f10b 0b01 	add.w	fp, fp, #1
 8003e40:	e78a      	b.n	8003d58 <__gethex+0x34>
 8003e42:	2500      	movs	r5, #0
 8003e44:	462c      	mov	r4, r5
 8003e46:	e7ae      	b.n	8003da6 <__gethex+0x82>
 8003e48:	463e      	mov	r6, r7
 8003e4a:	2501      	movs	r5, #1
 8003e4c:	e7c7      	b.n	8003dde <__gethex+0xba>
 8003e4e:	4604      	mov	r4, r0
 8003e50:	e7fb      	b.n	8003e4a <__gethex+0x126>
 8003e52:	f04f 0900 	mov.w	r9, #0
 8003e56:	1cb1      	adds	r1, r6, #2
 8003e58:	e7ce      	b.n	8003df8 <__gethex+0xd4>
 8003e5a:	f04f 0901 	mov.w	r9, #1
 8003e5e:	e7fa      	b.n	8003e56 <__gethex+0x132>
 8003e60:	230a      	movs	r3, #10
 8003e62:	fb03 0202 	mla	r2, r3, r2, r0
 8003e66:	3a10      	subs	r2, #16
 8003e68:	e7cf      	b.n	8003e0a <__gethex+0xe6>
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	e7da      	b.n	8003e24 <__gethex+0x100>
 8003e6e:	4629      	mov	r1, r5
 8003e70:	1bf3      	subs	r3, r6, r7
 8003e72:	3b01      	subs	r3, #1
 8003e74:	2b07      	cmp	r3, #7
 8003e76:	dc49      	bgt.n	8003f0c <__gethex+0x1e8>
 8003e78:	9802      	ldr	r0, [sp, #8]
 8003e7a:	f000 fa4a 	bl	8004312 <_Balloc>
 8003e7e:	f04f 0b00 	mov.w	fp, #0
 8003e82:	4605      	mov	r5, r0
 8003e84:	46da      	mov	sl, fp
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	f100 0914 	add.w	r9, r0, #20
 8003e8c:	f1c3 0301 	rsb	r3, r3, #1
 8003e90:	f8cd 9010 	str.w	r9, [sp, #16]
 8003e94:	9308      	str	r3, [sp, #32]
 8003e96:	42b7      	cmp	r7, r6
 8003e98:	d33b      	bcc.n	8003f12 <__gethex+0x1ee>
 8003e9a:	9804      	ldr	r0, [sp, #16]
 8003e9c:	f840 ab04 	str.w	sl, [r0], #4
 8003ea0:	eba0 0009 	sub.w	r0, r0, r9
 8003ea4:	1080      	asrs	r0, r0, #2
 8003ea6:	6128      	str	r0, [r5, #16]
 8003ea8:	0147      	lsls	r7, r0, #5
 8003eaa:	4650      	mov	r0, sl
 8003eac:	f000 faf5 	bl	800449a <__hi0bits>
 8003eb0:	f8d8 6000 	ldr.w	r6, [r8]
 8003eb4:	1a3f      	subs	r7, r7, r0
 8003eb6:	42b7      	cmp	r7, r6
 8003eb8:	dd64      	ble.n	8003f84 <__gethex+0x260>
 8003eba:	1bbf      	subs	r7, r7, r6
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 fdff 	bl	8004ac2 <__any_on>
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	b178      	cbz	r0, 8003ee8 <__gethex+0x1c4>
 8003ec8:	f04f 0a01 	mov.w	sl, #1
 8003ecc:	1e7b      	subs	r3, r7, #1
 8003ece:	1159      	asrs	r1, r3, #5
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003ed8:	fa0a f202 	lsl.w	r2, sl, r2
 8003edc:	420a      	tst	r2, r1
 8003ede:	d003      	beq.n	8003ee8 <__gethex+0x1c4>
 8003ee0:	4553      	cmp	r3, sl
 8003ee2:	dc46      	bgt.n	8003f72 <__gethex+0x24e>
 8003ee4:	f04f 0a02 	mov.w	sl, #2
 8003ee8:	4639      	mov	r1, r7
 8003eea:	4628      	mov	r0, r5
 8003eec:	f7ff feca 	bl	8003c84 <rshift>
 8003ef0:	443c      	add	r4, r7
 8003ef2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	da52      	bge.n	8003fa0 <__gethex+0x27c>
 8003efa:	4629      	mov	r1, r5
 8003efc:	9802      	ldr	r0, [sp, #8]
 8003efe:	f000 fa3c 	bl	800437a <_Bfree>
 8003f02:	2300      	movs	r3, #0
 8003f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003f06:	27a3      	movs	r7, #163	; 0xa3
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	e793      	b.n	8003e34 <__gethex+0x110>
 8003f0c:	3101      	adds	r1, #1
 8003f0e:	105b      	asrs	r3, r3, #1
 8003f10:	e7b0      	b.n	8003e74 <__gethex+0x150>
 8003f12:	1e73      	subs	r3, r6, #1
 8003f14:	9305      	str	r3, [sp, #20]
 8003f16:	9a07      	ldr	r2, [sp, #28]
 8003f18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <__gethex+0x22e>
 8003f20:	f1bb 0f20 	cmp.w	fp, #32
 8003f24:	d107      	bne.n	8003f36 <__gethex+0x212>
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	f8c3 a000 	str.w	sl, [r3]
 8003f2c:	f04f 0a00 	mov.w	sl, #0
 8003f30:	46d3      	mov	fp, sl
 8003f32:	3304      	adds	r3, #4
 8003f34:	9304      	str	r3, [sp, #16]
 8003f36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8003f3a:	f7ff fede 	bl	8003cfa <__hexdig_fun>
 8003f3e:	f000 000f 	and.w	r0, r0, #15
 8003f42:	fa00 f00b 	lsl.w	r0, r0, fp
 8003f46:	ea4a 0a00 	orr.w	sl, sl, r0
 8003f4a:	f10b 0b04 	add.w	fp, fp, #4
 8003f4e:	9b05      	ldr	r3, [sp, #20]
 8003f50:	e00d      	b.n	8003f6e <__gethex+0x24a>
 8003f52:	9b05      	ldr	r3, [sp, #20]
 8003f54:	9a08      	ldr	r2, [sp, #32]
 8003f56:	4413      	add	r3, r2
 8003f58:	42bb      	cmp	r3, r7
 8003f5a:	d3e1      	bcc.n	8003f20 <__gethex+0x1fc>
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	9a01      	ldr	r2, [sp, #4]
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	9309      	str	r3, [sp, #36]	; 0x24
 8003f64:	f000 fe46 	bl	8004bf4 <strncmp>
 8003f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d1d8      	bne.n	8003f20 <__gethex+0x1fc>
 8003f6e:	461e      	mov	r6, r3
 8003f70:	e791      	b.n	8003e96 <__gethex+0x172>
 8003f72:	1eb9      	subs	r1, r7, #2
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fda4 	bl	8004ac2 <__any_on>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d0b2      	beq.n	8003ee4 <__gethex+0x1c0>
 8003f7e:	f04f 0a03 	mov.w	sl, #3
 8003f82:	e7b1      	b.n	8003ee8 <__gethex+0x1c4>
 8003f84:	da09      	bge.n	8003f9a <__gethex+0x276>
 8003f86:	1bf7      	subs	r7, r6, r7
 8003f88:	4629      	mov	r1, r5
 8003f8a:	463a      	mov	r2, r7
 8003f8c:	9802      	ldr	r0, [sp, #8]
 8003f8e:	f000 fbbf 	bl	8004710 <__lshift>
 8003f92:	4605      	mov	r5, r0
 8003f94:	1be4      	subs	r4, r4, r7
 8003f96:	f100 0914 	add.w	r9, r0, #20
 8003f9a:	f04f 0a00 	mov.w	sl, #0
 8003f9e:	e7a8      	b.n	8003ef2 <__gethex+0x1ce>
 8003fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003fa4:	42a0      	cmp	r0, r4
 8003fa6:	dd6b      	ble.n	8004080 <__gethex+0x35c>
 8003fa8:	1b04      	subs	r4, r0, r4
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	dc2e      	bgt.n	800400c <__gethex+0x2e8>
 8003fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d022      	beq.n	8003ffc <__gethex+0x2d8>
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d024      	beq.n	8004004 <__gethex+0x2e0>
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d115      	bne.n	8003fea <__gethex+0x2c6>
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d113      	bne.n	8003fea <__gethex+0x2c6>
 8003fc2:	2e01      	cmp	r6, #1
 8003fc4:	dc0b      	bgt.n	8003fde <__gethex+0x2ba>
 8003fc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003fca:	9a06      	ldr	r2, [sp, #24]
 8003fcc:	2762      	movs	r7, #98	; 0x62
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	612b      	str	r3, [r5, #16]
 8003fd4:	f8c9 3000 	str.w	r3, [r9]
 8003fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fda:	601d      	str	r5, [r3, #0]
 8003fdc:	e72a      	b.n	8003e34 <__gethex+0x110>
 8003fde:	1e71      	subs	r1, r6, #1
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 fd6e 	bl	8004ac2 <__any_on>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1ed      	bne.n	8003fc6 <__gethex+0x2a2>
 8003fea:	4629      	mov	r1, r5
 8003fec:	9802      	ldr	r0, [sp, #8]
 8003fee:	f000 f9c4 	bl	800437a <_Bfree>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003ff6:	2750      	movs	r7, #80	; 0x50
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	e71b      	b.n	8003e34 <__gethex+0x110>
 8003ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0e1      	beq.n	8003fc6 <__gethex+0x2a2>
 8004002:	e7f2      	b.n	8003fea <__gethex+0x2c6>
 8004004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1dd      	bne.n	8003fc6 <__gethex+0x2a2>
 800400a:	e7ee      	b.n	8003fea <__gethex+0x2c6>
 800400c:	1e67      	subs	r7, r4, #1
 800400e:	f1ba 0f00 	cmp.w	sl, #0
 8004012:	d132      	bne.n	800407a <__gethex+0x356>
 8004014:	b127      	cbz	r7, 8004020 <__gethex+0x2fc>
 8004016:	4639      	mov	r1, r7
 8004018:	4628      	mov	r0, r5
 800401a:	f000 fd52 	bl	8004ac2 <__any_on>
 800401e:	4682      	mov	sl, r0
 8004020:	2301      	movs	r3, #1
 8004022:	117a      	asrs	r2, r7, #5
 8004024:	f007 071f 	and.w	r7, r7, #31
 8004028:	fa03 f707 	lsl.w	r7, r3, r7
 800402c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8004030:	4621      	mov	r1, r4
 8004032:	421f      	tst	r7, r3
 8004034:	f04f 0702 	mov.w	r7, #2
 8004038:	4628      	mov	r0, r5
 800403a:	bf18      	it	ne
 800403c:	f04a 0a02 	orrne.w	sl, sl, #2
 8004040:	1b36      	subs	r6, r6, r4
 8004042:	f7ff fe1f 	bl	8003c84 <rshift>
 8004046:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800404a:	f1ba 0f00 	cmp.w	sl, #0
 800404e:	d048      	beq.n	80040e2 <__gethex+0x3be>
 8004050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d015      	beq.n	8004084 <__gethex+0x360>
 8004058:	2b03      	cmp	r3, #3
 800405a:	d017      	beq.n	800408c <__gethex+0x368>
 800405c:	2b01      	cmp	r3, #1
 800405e:	d109      	bne.n	8004074 <__gethex+0x350>
 8004060:	f01a 0f02 	tst.w	sl, #2
 8004064:	d006      	beq.n	8004074 <__gethex+0x350>
 8004066:	f8d9 3000 	ldr.w	r3, [r9]
 800406a:	ea4a 0a03 	orr.w	sl, sl, r3
 800406e:	f01a 0f01 	tst.w	sl, #1
 8004072:	d10e      	bne.n	8004092 <__gethex+0x36e>
 8004074:	f047 0710 	orr.w	r7, r7, #16
 8004078:	e033      	b.n	80040e2 <__gethex+0x3be>
 800407a:	f04f 0a01 	mov.w	sl, #1
 800407e:	e7cf      	b.n	8004020 <__gethex+0x2fc>
 8004080:	2701      	movs	r7, #1
 8004082:	e7e2      	b.n	800404a <__gethex+0x326>
 8004084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004086:	f1c3 0301 	rsb	r3, r3, #1
 800408a:	9315      	str	r3, [sp, #84]	; 0x54
 800408c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <__gethex+0x350>
 8004092:	f04f 0c00 	mov.w	ip, #0
 8004096:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800409a:	f105 0314 	add.w	r3, r5, #20
 800409e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80040a2:	eb03 010a 	add.w	r1, r3, sl
 80040a6:	4618      	mov	r0, r3
 80040a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80040b0:	d01c      	beq.n	80040ec <__gethex+0x3c8>
 80040b2:	3201      	adds	r2, #1
 80040b4:	6002      	str	r2, [r0, #0]
 80040b6:	2f02      	cmp	r7, #2
 80040b8:	f105 0314 	add.w	r3, r5, #20
 80040bc:	d138      	bne.n	8004130 <__gethex+0x40c>
 80040be:	f8d8 2000 	ldr.w	r2, [r8]
 80040c2:	3a01      	subs	r2, #1
 80040c4:	42b2      	cmp	r2, r6
 80040c6:	d10a      	bne.n	80040de <__gethex+0x3ba>
 80040c8:	2201      	movs	r2, #1
 80040ca:	1171      	asrs	r1, r6, #5
 80040cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040d0:	f006 061f 	and.w	r6, r6, #31
 80040d4:	fa02 f606 	lsl.w	r6, r2, r6
 80040d8:	421e      	tst	r6, r3
 80040da:	bf18      	it	ne
 80040dc:	4617      	movne	r7, r2
 80040de:	f047 0720 	orr.w	r7, r7, #32
 80040e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040e4:	601d      	str	r5, [r3, #0]
 80040e6:	9b06      	ldr	r3, [sp, #24]
 80040e8:	601c      	str	r4, [r3, #0]
 80040ea:	e6a3      	b.n	8003e34 <__gethex+0x110>
 80040ec:	4299      	cmp	r1, r3
 80040ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80040f2:	d8d8      	bhi.n	80040a6 <__gethex+0x382>
 80040f4:	68ab      	ldr	r3, [r5, #8]
 80040f6:	4599      	cmp	r9, r3
 80040f8:	db12      	blt.n	8004120 <__gethex+0x3fc>
 80040fa:	6869      	ldr	r1, [r5, #4]
 80040fc:	9802      	ldr	r0, [sp, #8]
 80040fe:	3101      	adds	r1, #1
 8004100:	f000 f907 	bl	8004312 <_Balloc>
 8004104:	4683      	mov	fp, r0
 8004106:	692a      	ldr	r2, [r5, #16]
 8004108:	f105 010c 	add.w	r1, r5, #12
 800410c:	3202      	adds	r2, #2
 800410e:	0092      	lsls	r2, r2, #2
 8004110:	300c      	adds	r0, #12
 8004112:	f000 f8f3 	bl	80042fc <memcpy>
 8004116:	4629      	mov	r1, r5
 8004118:	9802      	ldr	r0, [sp, #8]
 800411a:	f000 f92e 	bl	800437a <_Bfree>
 800411e:	465d      	mov	r5, fp
 8004120:	692b      	ldr	r3, [r5, #16]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	612a      	str	r2, [r5, #16]
 8004126:	2201      	movs	r2, #1
 8004128:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800412c:	615a      	str	r2, [r3, #20]
 800412e:	e7c2      	b.n	80040b6 <__gethex+0x392>
 8004130:	692a      	ldr	r2, [r5, #16]
 8004132:	454a      	cmp	r2, r9
 8004134:	dd0b      	ble.n	800414e <__gethex+0x42a>
 8004136:	2101      	movs	r1, #1
 8004138:	4628      	mov	r0, r5
 800413a:	f7ff fda3 	bl	8003c84 <rshift>
 800413e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004142:	3401      	adds	r4, #1
 8004144:	42a3      	cmp	r3, r4
 8004146:	f6ff aed8 	blt.w	8003efa <__gethex+0x1d6>
 800414a:	2701      	movs	r7, #1
 800414c:	e7c7      	b.n	80040de <__gethex+0x3ba>
 800414e:	f016 061f 	ands.w	r6, r6, #31
 8004152:	d0fa      	beq.n	800414a <__gethex+0x426>
 8004154:	449a      	add	sl, r3
 8004156:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800415a:	f000 f99e 	bl	800449a <__hi0bits>
 800415e:	f1c6 0620 	rsb	r6, r6, #32
 8004162:	42b0      	cmp	r0, r6
 8004164:	dbe7      	blt.n	8004136 <__gethex+0x412>
 8004166:	e7f0      	b.n	800414a <__gethex+0x426>

08004168 <L_shift>:
 8004168:	f1c2 0208 	rsb	r2, r2, #8
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	b570      	push	{r4, r5, r6, lr}
 8004170:	f1c2 0620 	rsb	r6, r2, #32
 8004174:	6843      	ldr	r3, [r0, #4]
 8004176:	6804      	ldr	r4, [r0, #0]
 8004178:	fa03 f506 	lsl.w	r5, r3, r6
 800417c:	432c      	orrs	r4, r5
 800417e:	40d3      	lsrs	r3, r2
 8004180:	6004      	str	r4, [r0, #0]
 8004182:	f840 3f04 	str.w	r3, [r0, #4]!
 8004186:	4288      	cmp	r0, r1
 8004188:	d3f4      	bcc.n	8004174 <L_shift+0xc>
 800418a:	bd70      	pop	{r4, r5, r6, pc}

0800418c <__match>:
 800418c:	b530      	push	{r4, r5, lr}
 800418e:	6803      	ldr	r3, [r0, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004196:	b914      	cbnz	r4, 800419e <__match+0x12>
 8004198:	6003      	str	r3, [r0, #0]
 800419a:	2001      	movs	r0, #1
 800419c:	bd30      	pop	{r4, r5, pc}
 800419e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80041a6:	2d19      	cmp	r5, #25
 80041a8:	bf98      	it	ls
 80041aa:	3220      	addls	r2, #32
 80041ac:	42a2      	cmp	r2, r4
 80041ae:	d0f0      	beq.n	8004192 <__match+0x6>
 80041b0:	2000      	movs	r0, #0
 80041b2:	e7f3      	b.n	800419c <__match+0x10>

080041b4 <__hexnan>:
 80041b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b8:	2500      	movs	r5, #0
 80041ba:	680b      	ldr	r3, [r1, #0]
 80041bc:	4682      	mov	sl, r0
 80041be:	115f      	asrs	r7, r3, #5
 80041c0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80041c4:	f013 031f 	ands.w	r3, r3, #31
 80041c8:	bf18      	it	ne
 80041ca:	3704      	addne	r7, #4
 80041cc:	1f3e      	subs	r6, r7, #4
 80041ce:	4690      	mov	r8, r2
 80041d0:	46b1      	mov	r9, r6
 80041d2:	4634      	mov	r4, r6
 80041d4:	46ab      	mov	fp, r5
 80041d6:	b087      	sub	sp, #28
 80041d8:	6801      	ldr	r1, [r0, #0]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	f847 5c04 	str.w	r5, [r7, #-4]
 80041e0:	9502      	str	r5, [sp, #8]
 80041e2:	784a      	ldrb	r2, [r1, #1]
 80041e4:	1c4b      	adds	r3, r1, #1
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	b342      	cbz	r2, 800423c <__hexnan+0x88>
 80041ea:	4610      	mov	r0, r2
 80041ec:	9105      	str	r1, [sp, #20]
 80041ee:	9204      	str	r2, [sp, #16]
 80041f0:	f7ff fd83 	bl	8003cfa <__hexdig_fun>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d143      	bne.n	8004280 <__hexnan+0xcc>
 80041f8:	9a04      	ldr	r2, [sp, #16]
 80041fa:	9905      	ldr	r1, [sp, #20]
 80041fc:	2a20      	cmp	r2, #32
 80041fe:	d818      	bhi.n	8004232 <__hexnan+0x7e>
 8004200:	9b02      	ldr	r3, [sp, #8]
 8004202:	459b      	cmp	fp, r3
 8004204:	dd13      	ble.n	800422e <__hexnan+0x7a>
 8004206:	454c      	cmp	r4, r9
 8004208:	d206      	bcs.n	8004218 <__hexnan+0x64>
 800420a:	2d07      	cmp	r5, #7
 800420c:	dc04      	bgt.n	8004218 <__hexnan+0x64>
 800420e:	462a      	mov	r2, r5
 8004210:	4649      	mov	r1, r9
 8004212:	4620      	mov	r0, r4
 8004214:	f7ff ffa8 	bl	8004168 <L_shift>
 8004218:	4544      	cmp	r4, r8
 800421a:	d944      	bls.n	80042a6 <__hexnan+0xf2>
 800421c:	2300      	movs	r3, #0
 800421e:	f1a4 0904 	sub.w	r9, r4, #4
 8004222:	f844 3c04 	str.w	r3, [r4, #-4]
 8004226:	461d      	mov	r5, r3
 8004228:	464c      	mov	r4, r9
 800422a:	f8cd b008 	str.w	fp, [sp, #8]
 800422e:	9903      	ldr	r1, [sp, #12]
 8004230:	e7d7      	b.n	80041e2 <__hexnan+0x2e>
 8004232:	2a29      	cmp	r2, #41	; 0x29
 8004234:	d14a      	bne.n	80042cc <__hexnan+0x118>
 8004236:	3102      	adds	r1, #2
 8004238:	f8ca 1000 	str.w	r1, [sl]
 800423c:	f1bb 0f00 	cmp.w	fp, #0
 8004240:	d044      	beq.n	80042cc <__hexnan+0x118>
 8004242:	454c      	cmp	r4, r9
 8004244:	d206      	bcs.n	8004254 <__hexnan+0xa0>
 8004246:	2d07      	cmp	r5, #7
 8004248:	dc04      	bgt.n	8004254 <__hexnan+0xa0>
 800424a:	462a      	mov	r2, r5
 800424c:	4649      	mov	r1, r9
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff ff8a 	bl	8004168 <L_shift>
 8004254:	4544      	cmp	r4, r8
 8004256:	d928      	bls.n	80042aa <__hexnan+0xf6>
 8004258:	4643      	mov	r3, r8
 800425a:	f854 2b04 	ldr.w	r2, [r4], #4
 800425e:	42a6      	cmp	r6, r4
 8004260:	f843 2b04 	str.w	r2, [r3], #4
 8004264:	d2f9      	bcs.n	800425a <__hexnan+0xa6>
 8004266:	2200      	movs	r2, #0
 8004268:	f843 2b04 	str.w	r2, [r3], #4
 800426c:	429e      	cmp	r6, r3
 800426e:	d2fb      	bcs.n	8004268 <__hexnan+0xb4>
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	b91b      	cbnz	r3, 800427c <__hexnan+0xc8>
 8004274:	4546      	cmp	r6, r8
 8004276:	d127      	bne.n	80042c8 <__hexnan+0x114>
 8004278:	2301      	movs	r3, #1
 800427a:	6033      	str	r3, [r6, #0]
 800427c:	2005      	movs	r0, #5
 800427e:	e026      	b.n	80042ce <__hexnan+0x11a>
 8004280:	3501      	adds	r5, #1
 8004282:	2d08      	cmp	r5, #8
 8004284:	f10b 0b01 	add.w	fp, fp, #1
 8004288:	dd06      	ble.n	8004298 <__hexnan+0xe4>
 800428a:	4544      	cmp	r4, r8
 800428c:	d9cf      	bls.n	800422e <__hexnan+0x7a>
 800428e:	2300      	movs	r3, #0
 8004290:	2501      	movs	r5, #1
 8004292:	f844 3c04 	str.w	r3, [r4, #-4]
 8004296:	3c04      	subs	r4, #4
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	f000 000f 	and.w	r0, r0, #15
 800429e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80042a2:	6020      	str	r0, [r4, #0]
 80042a4:	e7c3      	b.n	800422e <__hexnan+0x7a>
 80042a6:	2508      	movs	r5, #8
 80042a8:	e7c1      	b.n	800422e <__hexnan+0x7a>
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0df      	beq.n	8004270 <__hexnan+0xbc>
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	f1c3 0320 	rsb	r3, r3, #32
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80042c0:	401a      	ands	r2, r3
 80042c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80042c6:	e7d3      	b.n	8004270 <__hexnan+0xbc>
 80042c8:	3e04      	subs	r6, #4
 80042ca:	e7d1      	b.n	8004270 <__hexnan+0xbc>
 80042cc:	2004      	movs	r0, #4
 80042ce:	b007      	add	sp, #28
 80042d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042d4 <__localeconv_l>:
 80042d4:	30f0      	adds	r0, #240	; 0xf0
 80042d6:	4770      	bx	lr

080042d8 <__ascii_mbtowc>:
 80042d8:	b082      	sub	sp, #8
 80042da:	b901      	cbnz	r1, 80042de <__ascii_mbtowc+0x6>
 80042dc:	a901      	add	r1, sp, #4
 80042de:	b142      	cbz	r2, 80042f2 <__ascii_mbtowc+0x1a>
 80042e0:	b14b      	cbz	r3, 80042f6 <__ascii_mbtowc+0x1e>
 80042e2:	7813      	ldrb	r3, [r2, #0]
 80042e4:	600b      	str	r3, [r1, #0]
 80042e6:	7812      	ldrb	r2, [r2, #0]
 80042e8:	1c10      	adds	r0, r2, #0
 80042ea:	bf18      	it	ne
 80042ec:	2001      	movne	r0, #1
 80042ee:	b002      	add	sp, #8
 80042f0:	4770      	bx	lr
 80042f2:	4610      	mov	r0, r2
 80042f4:	e7fb      	b.n	80042ee <__ascii_mbtowc+0x16>
 80042f6:	f06f 0001 	mvn.w	r0, #1
 80042fa:	e7f8      	b.n	80042ee <__ascii_mbtowc+0x16>

080042fc <memcpy>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	1e43      	subs	r3, r0, #1
 8004300:	440a      	add	r2, r1
 8004302:	4291      	cmp	r1, r2
 8004304:	d100      	bne.n	8004308 <memcpy+0xc>
 8004306:	bd10      	pop	{r4, pc}
 8004308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800430c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004310:	e7f7      	b.n	8004302 <memcpy+0x6>

08004312 <_Balloc>:
 8004312:	b570      	push	{r4, r5, r6, lr}
 8004314:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004316:	4604      	mov	r4, r0
 8004318:	460e      	mov	r6, r1
 800431a:	b93d      	cbnz	r5, 800432c <_Balloc+0x1a>
 800431c:	2010      	movs	r0, #16
 800431e:	f000 fc89 	bl	8004c34 <malloc>
 8004322:	6260      	str	r0, [r4, #36]	; 0x24
 8004324:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004328:	6005      	str	r5, [r0, #0]
 800432a:	60c5      	str	r5, [r0, #12]
 800432c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800432e:	68eb      	ldr	r3, [r5, #12]
 8004330:	b183      	cbz	r3, 8004354 <_Balloc+0x42>
 8004332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800433a:	b9b8      	cbnz	r0, 800436c <_Balloc+0x5a>
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f506 	lsl.w	r5, r1, r6
 8004342:	1d6a      	adds	r2, r5, #5
 8004344:	0092      	lsls	r2, r2, #2
 8004346:	4620      	mov	r0, r4
 8004348:	f000 fbdc 	bl	8004b04 <_calloc_r>
 800434c:	b160      	cbz	r0, 8004368 <_Balloc+0x56>
 800434e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8004352:	e00e      	b.n	8004372 <_Balloc+0x60>
 8004354:	2221      	movs	r2, #33	; 0x21
 8004356:	2104      	movs	r1, #4
 8004358:	4620      	mov	r0, r4
 800435a:	f000 fbd3 	bl	8004b04 <_calloc_r>
 800435e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004360:	60e8      	str	r0, [r5, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e4      	bne.n	8004332 <_Balloc+0x20>
 8004368:	2000      	movs	r0, #0
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	6802      	ldr	r2, [r0, #0]
 800436e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004372:	2300      	movs	r3, #0
 8004374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004378:	e7f7      	b.n	800436a <_Balloc+0x58>

0800437a <_Bfree>:
 800437a:	b570      	push	{r4, r5, r6, lr}
 800437c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800437e:	4606      	mov	r6, r0
 8004380:	460d      	mov	r5, r1
 8004382:	b93c      	cbnz	r4, 8004394 <_Bfree+0x1a>
 8004384:	2010      	movs	r0, #16
 8004386:	f000 fc55 	bl	8004c34 <malloc>
 800438a:	6270      	str	r0, [r6, #36]	; 0x24
 800438c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004390:	6004      	str	r4, [r0, #0]
 8004392:	60c4      	str	r4, [r0, #12]
 8004394:	b13d      	cbz	r5, 80043a6 <_Bfree+0x2c>
 8004396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004398:	686a      	ldr	r2, [r5, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043a0:	6029      	str	r1, [r5, #0]
 80043a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80043a6:	bd70      	pop	{r4, r5, r6, pc}

080043a8 <__multadd>:
 80043a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ac:	461f      	mov	r7, r3
 80043ae:	4606      	mov	r6, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	2300      	movs	r3, #0
 80043b4:	690d      	ldr	r5, [r1, #16]
 80043b6:	f101 0c14 	add.w	ip, r1, #20
 80043ba:	f8dc 0000 	ldr.w	r0, [ip]
 80043be:	3301      	adds	r3, #1
 80043c0:	b281      	uxth	r1, r0
 80043c2:	fb02 7101 	mla	r1, r2, r1, r7
 80043c6:	0c00      	lsrs	r0, r0, #16
 80043c8:	0c0f      	lsrs	r7, r1, #16
 80043ca:	fb02 7000 	mla	r0, r2, r0, r7
 80043ce:	b289      	uxth	r1, r1
 80043d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80043d4:	429d      	cmp	r5, r3
 80043d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80043da:	f84c 1b04 	str.w	r1, [ip], #4
 80043de:	dcec      	bgt.n	80043ba <__multadd+0x12>
 80043e0:	b1d7      	cbz	r7, 8004418 <__multadd+0x70>
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	42ab      	cmp	r3, r5
 80043e6:	dc12      	bgt.n	800440e <__multadd+0x66>
 80043e8:	6861      	ldr	r1, [r4, #4]
 80043ea:	4630      	mov	r0, r6
 80043ec:	3101      	adds	r1, #1
 80043ee:	f7ff ff90 	bl	8004312 <_Balloc>
 80043f2:	4680      	mov	r8, r0
 80043f4:	6922      	ldr	r2, [r4, #16]
 80043f6:	f104 010c 	add.w	r1, r4, #12
 80043fa:	3202      	adds	r2, #2
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	300c      	adds	r0, #12
 8004400:	f7ff ff7c 	bl	80042fc <memcpy>
 8004404:	4621      	mov	r1, r4
 8004406:	4630      	mov	r0, r6
 8004408:	f7ff ffb7 	bl	800437a <_Bfree>
 800440c:	4644      	mov	r4, r8
 800440e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004412:	3501      	adds	r5, #1
 8004414:	615f      	str	r7, [r3, #20]
 8004416:	6125      	str	r5, [r4, #16]
 8004418:	4620      	mov	r0, r4
 800441a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800441e <__s2b>:
 800441e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004422:	4615      	mov	r5, r2
 8004424:	2209      	movs	r2, #9
 8004426:	461f      	mov	r7, r3
 8004428:	3308      	adds	r3, #8
 800442a:	460c      	mov	r4, r1
 800442c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004430:	4606      	mov	r6, r0
 8004432:	2201      	movs	r2, #1
 8004434:	2100      	movs	r1, #0
 8004436:	429a      	cmp	r2, r3
 8004438:	db20      	blt.n	800447c <__s2b+0x5e>
 800443a:	4630      	mov	r0, r6
 800443c:	f7ff ff69 	bl	8004312 <_Balloc>
 8004440:	9b08      	ldr	r3, [sp, #32]
 8004442:	2d09      	cmp	r5, #9
 8004444:	6143      	str	r3, [r0, #20]
 8004446:	f04f 0301 	mov.w	r3, #1
 800444a:	6103      	str	r3, [r0, #16]
 800444c:	dd19      	ble.n	8004482 <__s2b+0x64>
 800444e:	f104 0809 	add.w	r8, r4, #9
 8004452:	46c1      	mov	r9, r8
 8004454:	442c      	add	r4, r5
 8004456:	f819 3b01 	ldrb.w	r3, [r9], #1
 800445a:	4601      	mov	r1, r0
 800445c:	3b30      	subs	r3, #48	; 0x30
 800445e:	220a      	movs	r2, #10
 8004460:	4630      	mov	r0, r6
 8004462:	f7ff ffa1 	bl	80043a8 <__multadd>
 8004466:	45a1      	cmp	r9, r4
 8004468:	d1f5      	bne.n	8004456 <__s2b+0x38>
 800446a:	eb08 0405 	add.w	r4, r8, r5
 800446e:	3c08      	subs	r4, #8
 8004470:	1b2d      	subs	r5, r5, r4
 8004472:	1963      	adds	r3, r4, r5
 8004474:	42bb      	cmp	r3, r7
 8004476:	db07      	blt.n	8004488 <__s2b+0x6a>
 8004478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800447c:	0052      	lsls	r2, r2, #1
 800447e:	3101      	adds	r1, #1
 8004480:	e7d9      	b.n	8004436 <__s2b+0x18>
 8004482:	340a      	adds	r4, #10
 8004484:	2509      	movs	r5, #9
 8004486:	e7f3      	b.n	8004470 <__s2b+0x52>
 8004488:	f814 3b01 	ldrb.w	r3, [r4], #1
 800448c:	4601      	mov	r1, r0
 800448e:	3b30      	subs	r3, #48	; 0x30
 8004490:	220a      	movs	r2, #10
 8004492:	4630      	mov	r0, r6
 8004494:	f7ff ff88 	bl	80043a8 <__multadd>
 8004498:	e7eb      	b.n	8004472 <__s2b+0x54>

0800449a <__hi0bits>:
 800449a:	0c02      	lsrs	r2, r0, #16
 800449c:	0412      	lsls	r2, r2, #16
 800449e:	4603      	mov	r3, r0
 80044a0:	b9b2      	cbnz	r2, 80044d0 <__hi0bits+0x36>
 80044a2:	0403      	lsls	r3, r0, #16
 80044a4:	2010      	movs	r0, #16
 80044a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80044aa:	bf04      	itt	eq
 80044ac:	021b      	lsleq	r3, r3, #8
 80044ae:	3008      	addeq	r0, #8
 80044b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80044b4:	bf04      	itt	eq
 80044b6:	011b      	lsleq	r3, r3, #4
 80044b8:	3004      	addeq	r0, #4
 80044ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80044be:	bf04      	itt	eq
 80044c0:	009b      	lsleq	r3, r3, #2
 80044c2:	3002      	addeq	r0, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db06      	blt.n	80044d6 <__hi0bits+0x3c>
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	d503      	bpl.n	80044d4 <__hi0bits+0x3a>
 80044cc:	3001      	adds	r0, #1
 80044ce:	4770      	bx	lr
 80044d0:	2000      	movs	r0, #0
 80044d2:	e7e8      	b.n	80044a6 <__hi0bits+0xc>
 80044d4:	2020      	movs	r0, #32
 80044d6:	4770      	bx	lr

080044d8 <__lo0bits>:
 80044d8:	6803      	ldr	r3, [r0, #0]
 80044da:	4601      	mov	r1, r0
 80044dc:	f013 0207 	ands.w	r2, r3, #7
 80044e0:	d00b      	beq.n	80044fa <__lo0bits+0x22>
 80044e2:	07da      	lsls	r2, r3, #31
 80044e4:	d423      	bmi.n	800452e <__lo0bits+0x56>
 80044e6:	0798      	lsls	r0, r3, #30
 80044e8:	bf49      	itett	mi
 80044ea:	085b      	lsrmi	r3, r3, #1
 80044ec:	089b      	lsrpl	r3, r3, #2
 80044ee:	2001      	movmi	r0, #1
 80044f0:	600b      	strmi	r3, [r1, #0]
 80044f2:	bf5c      	itt	pl
 80044f4:	600b      	strpl	r3, [r1, #0]
 80044f6:	2002      	movpl	r0, #2
 80044f8:	4770      	bx	lr
 80044fa:	b298      	uxth	r0, r3
 80044fc:	b9a8      	cbnz	r0, 800452a <__lo0bits+0x52>
 80044fe:	2010      	movs	r0, #16
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004506:	bf04      	itt	eq
 8004508:	0a1b      	lsreq	r3, r3, #8
 800450a:	3008      	addeq	r0, #8
 800450c:	071a      	lsls	r2, r3, #28
 800450e:	bf04      	itt	eq
 8004510:	091b      	lsreq	r3, r3, #4
 8004512:	3004      	addeq	r0, #4
 8004514:	079a      	lsls	r2, r3, #30
 8004516:	bf04      	itt	eq
 8004518:	089b      	lsreq	r3, r3, #2
 800451a:	3002      	addeq	r0, #2
 800451c:	07da      	lsls	r2, r3, #31
 800451e:	d402      	bmi.n	8004526 <__lo0bits+0x4e>
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	d006      	beq.n	8004532 <__lo0bits+0x5a>
 8004524:	3001      	adds	r0, #1
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	4770      	bx	lr
 800452a:	4610      	mov	r0, r2
 800452c:	e7e9      	b.n	8004502 <__lo0bits+0x2a>
 800452e:	2000      	movs	r0, #0
 8004530:	4770      	bx	lr
 8004532:	2020      	movs	r0, #32
 8004534:	4770      	bx	lr

08004536 <__i2b>:
 8004536:	b510      	push	{r4, lr}
 8004538:	460c      	mov	r4, r1
 800453a:	2101      	movs	r1, #1
 800453c:	f7ff fee9 	bl	8004312 <_Balloc>
 8004540:	2201      	movs	r2, #1
 8004542:	6144      	str	r4, [r0, #20]
 8004544:	6102      	str	r2, [r0, #16]
 8004546:	bd10      	pop	{r4, pc}

08004548 <__multiply>:
 8004548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	4614      	mov	r4, r2
 800454e:	690a      	ldr	r2, [r1, #16]
 8004550:	6923      	ldr	r3, [r4, #16]
 8004552:	4688      	mov	r8, r1
 8004554:	429a      	cmp	r2, r3
 8004556:	bfbe      	ittt	lt
 8004558:	460b      	movlt	r3, r1
 800455a:	46a0      	movlt	r8, r4
 800455c:	461c      	movlt	r4, r3
 800455e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004562:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800456a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800456e:	eb07 0609 	add.w	r6, r7, r9
 8004572:	42b3      	cmp	r3, r6
 8004574:	bfb8      	it	lt
 8004576:	3101      	addlt	r1, #1
 8004578:	f7ff fecb 	bl	8004312 <_Balloc>
 800457c:	f100 0514 	add.w	r5, r0, #20
 8004580:	462b      	mov	r3, r5
 8004582:	2200      	movs	r2, #0
 8004584:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004588:	4573      	cmp	r3, lr
 800458a:	d316      	bcc.n	80045ba <__multiply+0x72>
 800458c:	f104 0214 	add.w	r2, r4, #20
 8004590:	f108 0114 	add.w	r1, r8, #20
 8004594:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004598:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	9b00      	ldr	r3, [sp, #0]
 80045a0:	9201      	str	r2, [sp, #4]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d80c      	bhi.n	80045c0 <__multiply+0x78>
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	dd03      	ble.n	80045b2 <__multiply+0x6a>
 80045aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d05d      	beq.n	800466e <__multiply+0x126>
 80045b2:	6106      	str	r6, [r0, #16]
 80045b4:	b003      	add	sp, #12
 80045b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ba:	f843 2b04 	str.w	r2, [r3], #4
 80045be:	e7e3      	b.n	8004588 <__multiply+0x40>
 80045c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80045c4:	f1bb 0f00 	cmp.w	fp, #0
 80045c8:	d023      	beq.n	8004612 <__multiply+0xca>
 80045ca:	4689      	mov	r9, r1
 80045cc:	46ac      	mov	ip, r5
 80045ce:	f04f 0800 	mov.w	r8, #0
 80045d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80045d6:	f8dc a000 	ldr.w	sl, [ip]
 80045da:	b2a3      	uxth	r3, r4
 80045dc:	fa1f fa8a 	uxth.w	sl, sl
 80045e0:	fb0b a303 	mla	r3, fp, r3, sl
 80045e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80045e8:	f8dc 4000 	ldr.w	r4, [ip]
 80045ec:	4443      	add	r3, r8
 80045ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80045f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80045f6:	46e2      	mov	sl, ip
 80045f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004602:	454f      	cmp	r7, r9
 8004604:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004608:	f84a 3b04 	str.w	r3, [sl], #4
 800460c:	d82b      	bhi.n	8004666 <__multiply+0x11e>
 800460e:	f8cc 8004 	str.w	r8, [ip, #4]
 8004612:	9b01      	ldr	r3, [sp, #4]
 8004614:	3204      	adds	r2, #4
 8004616:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800461a:	f1ba 0f00 	cmp.w	sl, #0
 800461e:	d020      	beq.n	8004662 <__multiply+0x11a>
 8004620:	4689      	mov	r9, r1
 8004622:	46a8      	mov	r8, r5
 8004624:	f04f 0b00 	mov.w	fp, #0
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	f8b9 c000 	ldrh.w	ip, [r9]
 800462e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004632:	b29b      	uxth	r3, r3
 8004634:	fb0a 440c 	mla	r4, sl, ip, r4
 8004638:	46c4      	mov	ip, r8
 800463a:	445c      	add	r4, fp
 800463c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004640:	f84c 3b04 	str.w	r3, [ip], #4
 8004644:	f859 3b04 	ldr.w	r3, [r9], #4
 8004648:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	fb0a b303 	mla	r3, sl, r3, fp
 8004652:	454f      	cmp	r7, r9
 8004654:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004658:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800465c:	d805      	bhi.n	800466a <__multiply+0x122>
 800465e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004662:	3504      	adds	r5, #4
 8004664:	e79b      	b.n	800459e <__multiply+0x56>
 8004666:	46d4      	mov	ip, sl
 8004668:	e7b3      	b.n	80045d2 <__multiply+0x8a>
 800466a:	46e0      	mov	r8, ip
 800466c:	e7dd      	b.n	800462a <__multiply+0xe2>
 800466e:	3e01      	subs	r6, #1
 8004670:	e799      	b.n	80045a6 <__multiply+0x5e>
	...

08004674 <__pow5mult>:
 8004674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004678:	4615      	mov	r5, r2
 800467a:	f012 0203 	ands.w	r2, r2, #3
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	d007      	beq.n	8004694 <__pow5mult+0x20>
 8004684:	4c21      	ldr	r4, [pc, #132]	; (800470c <__pow5mult+0x98>)
 8004686:	3a01      	subs	r2, #1
 8004688:	2300      	movs	r3, #0
 800468a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800468e:	f7ff fe8b 	bl	80043a8 <__multadd>
 8004692:	4607      	mov	r7, r0
 8004694:	10ad      	asrs	r5, r5, #2
 8004696:	d035      	beq.n	8004704 <__pow5mult+0x90>
 8004698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800469a:	b93c      	cbnz	r4, 80046ac <__pow5mult+0x38>
 800469c:	2010      	movs	r0, #16
 800469e:	f000 fac9 	bl	8004c34 <malloc>
 80046a2:	6270      	str	r0, [r6, #36]	; 0x24
 80046a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80046a8:	6004      	str	r4, [r0, #0]
 80046aa:	60c4      	str	r4, [r0, #12]
 80046ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80046b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80046b4:	b94c      	cbnz	r4, 80046ca <__pow5mult+0x56>
 80046b6:	f240 2171 	movw	r1, #625	; 0x271
 80046ba:	4630      	mov	r0, r6
 80046bc:	f7ff ff3b 	bl	8004536 <__i2b>
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80046c8:	6003      	str	r3, [r0, #0]
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	07eb      	lsls	r3, r5, #31
 80046d0:	d50a      	bpl.n	80046e8 <__pow5mult+0x74>
 80046d2:	4639      	mov	r1, r7
 80046d4:	4622      	mov	r2, r4
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff ff36 	bl	8004548 <__multiply>
 80046dc:	4681      	mov	r9, r0
 80046de:	4639      	mov	r1, r7
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff fe4a 	bl	800437a <_Bfree>
 80046e6:	464f      	mov	r7, r9
 80046e8:	106d      	asrs	r5, r5, #1
 80046ea:	d00b      	beq.n	8004704 <__pow5mult+0x90>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	b938      	cbnz	r0, 8004700 <__pow5mult+0x8c>
 80046f0:	4622      	mov	r2, r4
 80046f2:	4621      	mov	r1, r4
 80046f4:	4630      	mov	r0, r6
 80046f6:	f7ff ff27 	bl	8004548 <__multiply>
 80046fa:	6020      	str	r0, [r4, #0]
 80046fc:	f8c0 8000 	str.w	r8, [r0]
 8004700:	4604      	mov	r4, r0
 8004702:	e7e4      	b.n	80046ce <__pow5mult+0x5a>
 8004704:	4638      	mov	r0, r7
 8004706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470a:	bf00      	nop
 800470c:	08004df0 	.word	0x08004df0

08004710 <__lshift>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	460c      	mov	r4, r1
 8004716:	4607      	mov	r7, r0
 8004718:	4616      	mov	r6, r2
 800471a:	6923      	ldr	r3, [r4, #16]
 800471c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004720:	eb0a 0903 	add.w	r9, sl, r3
 8004724:	6849      	ldr	r1, [r1, #4]
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	f109 0501 	add.w	r5, r9, #1
 800472c:	42ab      	cmp	r3, r5
 800472e:	db32      	blt.n	8004796 <__lshift+0x86>
 8004730:	4638      	mov	r0, r7
 8004732:	f7ff fdee 	bl	8004312 <_Balloc>
 8004736:	2300      	movs	r3, #0
 8004738:	4680      	mov	r8, r0
 800473a:	461a      	mov	r2, r3
 800473c:	f100 0114 	add.w	r1, r0, #20
 8004740:	4553      	cmp	r3, sl
 8004742:	db2b      	blt.n	800479c <__lshift+0x8c>
 8004744:	6920      	ldr	r0, [r4, #16]
 8004746:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800474a:	f104 0314 	add.w	r3, r4, #20
 800474e:	f016 021f 	ands.w	r2, r6, #31
 8004752:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004756:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800475a:	d025      	beq.n	80047a8 <__lshift+0x98>
 800475c:	2000      	movs	r0, #0
 800475e:	f1c2 0e20 	rsb	lr, r2, #32
 8004762:	468a      	mov	sl, r1
 8004764:	681e      	ldr	r6, [r3, #0]
 8004766:	4096      	lsls	r6, r2
 8004768:	4330      	orrs	r0, r6
 800476a:	f84a 0b04 	str.w	r0, [sl], #4
 800476e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004772:	459c      	cmp	ip, r3
 8004774:	fa20 f00e 	lsr.w	r0, r0, lr
 8004778:	d814      	bhi.n	80047a4 <__lshift+0x94>
 800477a:	6048      	str	r0, [r1, #4]
 800477c:	b108      	cbz	r0, 8004782 <__lshift+0x72>
 800477e:	f109 0502 	add.w	r5, r9, #2
 8004782:	3d01      	subs	r5, #1
 8004784:	4638      	mov	r0, r7
 8004786:	f8c8 5010 	str.w	r5, [r8, #16]
 800478a:	4621      	mov	r1, r4
 800478c:	f7ff fdf5 	bl	800437a <_Bfree>
 8004790:	4640      	mov	r0, r8
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	3101      	adds	r1, #1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	e7c7      	b.n	800472c <__lshift+0x1c>
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80047a0:	3301      	adds	r3, #1
 80047a2:	e7cd      	b.n	8004740 <__lshift+0x30>
 80047a4:	4651      	mov	r1, sl
 80047a6:	e7dc      	b.n	8004762 <__lshift+0x52>
 80047a8:	3904      	subs	r1, #4
 80047aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ae:	459c      	cmp	ip, r3
 80047b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80047b4:	d8f9      	bhi.n	80047aa <__lshift+0x9a>
 80047b6:	e7e4      	b.n	8004782 <__lshift+0x72>

080047b8 <__mcmp>:
 80047b8:	6903      	ldr	r3, [r0, #16]
 80047ba:	690a      	ldr	r2, [r1, #16]
 80047bc:	b530      	push	{r4, r5, lr}
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	d10c      	bne.n	80047dc <__mcmp+0x24>
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	3014      	adds	r0, #20
 80047c6:	3114      	adds	r1, #20
 80047c8:	1884      	adds	r4, r0, r2
 80047ca:	4411      	add	r1, r2
 80047cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80047d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80047d4:	4295      	cmp	r5, r2
 80047d6:	d003      	beq.n	80047e0 <__mcmp+0x28>
 80047d8:	d305      	bcc.n	80047e6 <__mcmp+0x2e>
 80047da:	2301      	movs	r3, #1
 80047dc:	4618      	mov	r0, r3
 80047de:	bd30      	pop	{r4, r5, pc}
 80047e0:	42a0      	cmp	r0, r4
 80047e2:	d3f3      	bcc.n	80047cc <__mcmp+0x14>
 80047e4:	e7fa      	b.n	80047dc <__mcmp+0x24>
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	e7f7      	b.n	80047dc <__mcmp+0x24>

080047ec <__mdiff>:
 80047ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	460d      	mov	r5, r1
 80047f2:	4607      	mov	r7, r0
 80047f4:	4611      	mov	r1, r2
 80047f6:	4628      	mov	r0, r5
 80047f8:	4614      	mov	r4, r2
 80047fa:	f7ff ffdd 	bl	80047b8 <__mcmp>
 80047fe:	1e06      	subs	r6, r0, #0
 8004800:	d108      	bne.n	8004814 <__mdiff+0x28>
 8004802:	4631      	mov	r1, r6
 8004804:	4638      	mov	r0, r7
 8004806:	f7ff fd84 	bl	8004312 <_Balloc>
 800480a:	2301      	movs	r3, #1
 800480c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004814:	bfa4      	itt	ge
 8004816:	4623      	movge	r3, r4
 8004818:	462c      	movge	r4, r5
 800481a:	4638      	mov	r0, r7
 800481c:	6861      	ldr	r1, [r4, #4]
 800481e:	bfa6      	itte	ge
 8004820:	461d      	movge	r5, r3
 8004822:	2600      	movge	r6, #0
 8004824:	2601      	movlt	r6, #1
 8004826:	f7ff fd74 	bl	8004312 <_Balloc>
 800482a:	f04f 0e00 	mov.w	lr, #0
 800482e:	60c6      	str	r6, [r0, #12]
 8004830:	692b      	ldr	r3, [r5, #16]
 8004832:	6926      	ldr	r6, [r4, #16]
 8004834:	f104 0214 	add.w	r2, r4, #20
 8004838:	f105 0914 	add.w	r9, r5, #20
 800483c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004840:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004844:	f100 0114 	add.w	r1, r0, #20
 8004848:	f852 ab04 	ldr.w	sl, [r2], #4
 800484c:	f859 5b04 	ldr.w	r5, [r9], #4
 8004850:	fa1f f38a 	uxth.w	r3, sl
 8004854:	4473      	add	r3, lr
 8004856:	b2ac      	uxth	r4, r5
 8004858:	1b1b      	subs	r3, r3, r4
 800485a:	0c2c      	lsrs	r4, r5, #16
 800485c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004860:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800486a:	45c8      	cmp	r8, r9
 800486c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004870:	4694      	mov	ip, r2
 8004872:	f841 4b04 	str.w	r4, [r1], #4
 8004876:	d8e7      	bhi.n	8004848 <__mdiff+0x5c>
 8004878:	45bc      	cmp	ip, r7
 800487a:	d304      	bcc.n	8004886 <__mdiff+0x9a>
 800487c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004880:	b183      	cbz	r3, 80048a4 <__mdiff+0xb8>
 8004882:	6106      	str	r6, [r0, #16]
 8004884:	e7c4      	b.n	8004810 <__mdiff+0x24>
 8004886:	f85c 4b04 	ldr.w	r4, [ip], #4
 800488a:	b2a2      	uxth	r2, r4
 800488c:	4472      	add	r2, lr
 800488e:	1413      	asrs	r3, r2, #16
 8004890:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004894:	b292      	uxth	r2, r2
 8004896:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800489a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800489e:	f841 2b04 	str.w	r2, [r1], #4
 80048a2:	e7e9      	b.n	8004878 <__mdiff+0x8c>
 80048a4:	3e01      	subs	r6, #1
 80048a6:	e7e9      	b.n	800487c <__mdiff+0x90>

080048a8 <__ulp>:
 80048a8:	4b10      	ldr	r3, [pc, #64]	; (80048ec <__ulp+0x44>)
 80048aa:	400b      	ands	r3, r1
 80048ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	dd02      	ble.n	80048ba <__ulp+0x12>
 80048b4:	2000      	movs	r0, #0
 80048b6:	4619      	mov	r1, r3
 80048b8:	4770      	bx	lr
 80048ba:	425b      	negs	r3, r3
 80048bc:	151b      	asrs	r3, r3, #20
 80048be:	2b13      	cmp	r3, #19
 80048c0:	f04f 0000 	mov.w	r0, #0
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	dc04      	bgt.n	80048d4 <__ulp+0x2c>
 80048ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048ce:	fa42 f103 	asr.w	r1, r2, r3
 80048d2:	4770      	bx	lr
 80048d4:	2201      	movs	r2, #1
 80048d6:	3b14      	subs	r3, #20
 80048d8:	2b1e      	cmp	r3, #30
 80048da:	bfce      	itee	gt
 80048dc:	4613      	movgt	r3, r2
 80048de:	f1c3 031f 	rsble	r3, r3, #31
 80048e2:	fa02 f303 	lslle.w	r3, r2, r3
 80048e6:	4618      	mov	r0, r3
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	7ff00000 	.word	0x7ff00000

080048f0 <__b2d>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	6907      	ldr	r7, [r0, #16]
 80048f6:	f100 0914 	add.w	r9, r0, #20
 80048fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80048fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8004902:	f1a7 0804 	sub.w	r8, r7, #4
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff fdc7 	bl	800449a <__hi0bits>
 800490c:	f1c0 0320 	rsb	r3, r0, #32
 8004910:	280a      	cmp	r0, #10
 8004912:	600b      	str	r3, [r1, #0]
 8004914:	491e      	ldr	r1, [pc, #120]	; (8004990 <__b2d+0xa0>)
 8004916:	dc17      	bgt.n	8004948 <__b2d+0x58>
 8004918:	45c1      	cmp	r9, r8
 800491a:	bf28      	it	cs
 800491c:	2200      	movcs	r2, #0
 800491e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004922:	fa26 f30c 	lsr.w	r3, r6, ip
 8004926:	bf38      	it	cc
 8004928:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800492c:	ea43 0501 	orr.w	r5, r3, r1
 8004930:	f100 0315 	add.w	r3, r0, #21
 8004934:	fa06 f303 	lsl.w	r3, r6, r3
 8004938:	fa22 f20c 	lsr.w	r2, r2, ip
 800493c:	ea43 0402 	orr.w	r4, r3, r2
 8004940:	4620      	mov	r0, r4
 8004942:	4629      	mov	r1, r5
 8004944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004948:	45c1      	cmp	r9, r8
 800494a:	bf3a      	itte	cc
 800494c:	f1a7 0808 	subcc.w	r8, r7, #8
 8004950:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8004954:	2200      	movcs	r2, #0
 8004956:	f1b0 030b 	subs.w	r3, r0, #11
 800495a:	d015      	beq.n	8004988 <__b2d+0x98>
 800495c:	409e      	lsls	r6, r3
 800495e:	f1c3 0720 	rsb	r7, r3, #32
 8004962:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8004966:	fa22 f107 	lsr.w	r1, r2, r7
 800496a:	45c8      	cmp	r8, r9
 800496c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8004970:	ea46 0501 	orr.w	r5, r6, r1
 8004974:	bf94      	ite	ls
 8004976:	2100      	movls	r1, #0
 8004978:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800497c:	fa02 f003 	lsl.w	r0, r2, r3
 8004980:	40f9      	lsrs	r1, r7
 8004982:	ea40 0401 	orr.w	r4, r0, r1
 8004986:	e7db      	b.n	8004940 <__b2d+0x50>
 8004988:	ea46 0501 	orr.w	r5, r6, r1
 800498c:	4614      	mov	r4, r2
 800498e:	e7d7      	b.n	8004940 <__b2d+0x50>
 8004990:	3ff00000 	.word	0x3ff00000

08004994 <__d2b>:
 8004994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004998:	461c      	mov	r4, r3
 800499a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800499e:	2101      	movs	r1, #1
 80049a0:	4690      	mov	r8, r2
 80049a2:	f7ff fcb6 	bl	8004312 <_Balloc>
 80049a6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80049aa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80049ae:	4607      	mov	r7, r0
 80049b0:	bb34      	cbnz	r4, 8004a00 <__d2b+0x6c>
 80049b2:	9201      	str	r2, [sp, #4]
 80049b4:	f1b8 0200 	subs.w	r2, r8, #0
 80049b8:	d027      	beq.n	8004a0a <__d2b+0x76>
 80049ba:	a802      	add	r0, sp, #8
 80049bc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80049c0:	f7ff fd8a 	bl	80044d8 <__lo0bits>
 80049c4:	9900      	ldr	r1, [sp, #0]
 80049c6:	b1f0      	cbz	r0, 8004a06 <__d2b+0x72>
 80049c8:	9a01      	ldr	r2, [sp, #4]
 80049ca:	f1c0 0320 	rsb	r3, r0, #32
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	430b      	orrs	r3, r1
 80049d4:	40c2      	lsrs	r2, r0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	9201      	str	r2, [sp, #4]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bf14      	ite	ne
 80049e0:	2102      	movne	r1, #2
 80049e2:	2101      	moveq	r1, #1
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	6139      	str	r1, [r7, #16]
 80049e8:	b1c4      	cbz	r4, 8004a1c <__d2b+0x88>
 80049ea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80049ee:	4404      	add	r4, r0
 80049f0:	6034      	str	r4, [r6, #0]
 80049f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80049f6:	6028      	str	r0, [r5, #0]
 80049f8:	4638      	mov	r0, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a04:	e7d5      	b.n	80049b2 <__d2b+0x1e>
 8004a06:	6179      	str	r1, [r7, #20]
 8004a08:	e7e7      	b.n	80049da <__d2b+0x46>
 8004a0a:	a801      	add	r0, sp, #4
 8004a0c:	f7ff fd64 	bl	80044d8 <__lo0bits>
 8004a10:	2101      	movs	r1, #1
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	6139      	str	r1, [r7, #16]
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	3020      	adds	r0, #32
 8004a1a:	e7e5      	b.n	80049e8 <__d2b+0x54>
 8004a1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004a24:	6030      	str	r0, [r6, #0]
 8004a26:	6918      	ldr	r0, [r3, #16]
 8004a28:	f7ff fd37 	bl	800449a <__hi0bits>
 8004a2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004a30:	e7e1      	b.n	80049f6 <__d2b+0x62>

08004a32 <__ratio>:
 8004a32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	4688      	mov	r8, r1
 8004a38:	4669      	mov	r1, sp
 8004a3a:	4681      	mov	r9, r0
 8004a3c:	f7ff ff58 	bl	80048f0 <__b2d>
 8004a40:	468b      	mov	fp, r1
 8004a42:	4606      	mov	r6, r0
 8004a44:	460f      	mov	r7, r1
 8004a46:	4640      	mov	r0, r8
 8004a48:	a901      	add	r1, sp, #4
 8004a4a:	f7ff ff51 	bl	80048f0 <__b2d>
 8004a4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004a56:	460d      	mov	r5, r1
 8004a58:	eba3 0c02 	sub.w	ip, r3, r2
 8004a5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfd5      	itete	le
 8004a6a:	460a      	movle	r2, r1
 8004a6c:	463a      	movgt	r2, r7
 8004a6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004a72:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8004a76:	bfd8      	it	le
 8004a78:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4659      	mov	r1, fp
 8004a82:	4630      	mov	r0, r6
 8004a84:	f7fb fe52 	bl	800072c <__aeabi_ddiv>
 8004a88:	b003      	add	sp, #12
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a8e <__copybits>:
 8004a8e:	3901      	subs	r1, #1
 8004a90:	b510      	push	{r4, lr}
 8004a92:	1149      	asrs	r1, r1, #5
 8004a94:	6914      	ldr	r4, [r2, #16]
 8004a96:	3101      	adds	r1, #1
 8004a98:	f102 0314 	add.w	r3, r2, #20
 8004a9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004aa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	d303      	bcc.n	8004ab2 <__copybits+0x24>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	428a      	cmp	r2, r1
 8004aae:	d305      	bcc.n	8004abc <__copybits+0x2e>
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab6:	f840 2b04 	str.w	r2, [r0], #4
 8004aba:	e7f3      	b.n	8004aa4 <__copybits+0x16>
 8004abc:	f842 3b04 	str.w	r3, [r2], #4
 8004ac0:	e7f4      	b.n	8004aac <__copybits+0x1e>

08004ac2 <__any_on>:
 8004ac2:	f100 0214 	add.w	r2, r0, #20
 8004ac6:	6900      	ldr	r0, [r0, #16]
 8004ac8:	114b      	asrs	r3, r1, #5
 8004aca:	4298      	cmp	r0, r3
 8004acc:	b510      	push	{r4, lr}
 8004ace:	db11      	blt.n	8004af4 <__any_on+0x32>
 8004ad0:	dd0a      	ble.n	8004ae8 <__any_on+0x26>
 8004ad2:	f011 011f 	ands.w	r1, r1, #31
 8004ad6:	d007      	beq.n	8004ae8 <__any_on+0x26>
 8004ad8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004adc:	fa24 f001 	lsr.w	r0, r4, r1
 8004ae0:	fa00 f101 	lsl.w	r1, r0, r1
 8004ae4:	428c      	cmp	r4, r1
 8004ae6:	d10b      	bne.n	8004b00 <__any_on+0x3e>
 8004ae8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d803      	bhi.n	8004af8 <__any_on+0x36>
 8004af0:	2000      	movs	r0, #0
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	4603      	mov	r3, r0
 8004af6:	e7f7      	b.n	8004ae8 <__any_on+0x26>
 8004af8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d0f5      	beq.n	8004aec <__any_on+0x2a>
 8004b00:	2001      	movs	r0, #1
 8004b02:	e7f6      	b.n	8004af2 <__any_on+0x30>

08004b04 <_calloc_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	fb02 f401 	mul.w	r4, r2, r1
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	f000 f808 	bl	8004b20 <_malloc_r>
 8004b10:	4605      	mov	r5, r0
 8004b12:	b118      	cbz	r0, 8004b1c <_calloc_r+0x18>
 8004b14:	4622      	mov	r2, r4
 8004b16:	2100      	movs	r1, #0
 8004b18:	f7fe fa76 	bl	8003008 <memset>
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}

08004b20 <_malloc_r>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	1ccd      	adds	r5, r1, #3
 8004b24:	f025 0503 	bic.w	r5, r5, #3
 8004b28:	3508      	adds	r5, #8
 8004b2a:	2d0c      	cmp	r5, #12
 8004b2c:	bf38      	it	cc
 8004b2e:	250c      	movcc	r5, #12
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	4606      	mov	r6, r0
 8004b34:	db01      	blt.n	8004b3a <_malloc_r+0x1a>
 8004b36:	42a9      	cmp	r1, r5
 8004b38:	d903      	bls.n	8004b42 <_malloc_r+0x22>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	bd70      	pop	{r4, r5, r6, pc}
 8004b42:	f000 f87f 	bl	8004c44 <__malloc_lock>
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <_malloc_r+0xac>)
 8004b48:	6814      	ldr	r4, [r2, #0]
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	b991      	cbnz	r1, 8004b74 <_malloc_r+0x54>
 8004b4e:	4c20      	ldr	r4, [pc, #128]	; (8004bd0 <_malloc_r+0xb0>)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	b91b      	cbnz	r3, 8004b5c <_malloc_r+0x3c>
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 f83d 	bl	8004bd4 <_sbrk_r>
 8004b5a:	6020      	str	r0, [r4, #0]
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f000 f838 	bl	8004bd4 <_sbrk_r>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d124      	bne.n	8004bb2 <_malloc_r+0x92>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	f000 f86a 	bl	8004c46 <__malloc_unlock>
 8004b72:	e7e4      	b.n	8004b3e <_malloc_r+0x1e>
 8004b74:	680b      	ldr	r3, [r1, #0]
 8004b76:	1b5b      	subs	r3, r3, r5
 8004b78:	d418      	bmi.n	8004bac <_malloc_r+0x8c>
 8004b7a:	2b0b      	cmp	r3, #11
 8004b7c:	d90f      	bls.n	8004b9e <_malloc_r+0x7e>
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	18cc      	adds	r4, r1, r3
 8004b82:	50cd      	str	r5, [r1, r3]
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f85e 	bl	8004c46 <__malloc_unlock>
 8004b8a:	f104 000b 	add.w	r0, r4, #11
 8004b8e:	1d23      	adds	r3, r4, #4
 8004b90:	f020 0007 	bic.w	r0, r0, #7
 8004b94:	1ac3      	subs	r3, r0, r3
 8004b96:	d0d3      	beq.n	8004b40 <_malloc_r+0x20>
 8004b98:	425a      	negs	r2, r3
 8004b9a:	50e2      	str	r2, [r4, r3]
 8004b9c:	e7d0      	b.n	8004b40 <_malloc_r+0x20>
 8004b9e:	684b      	ldr	r3, [r1, #4]
 8004ba0:	428c      	cmp	r4, r1
 8004ba2:	bf16      	itet	ne
 8004ba4:	6063      	strne	r3, [r4, #4]
 8004ba6:	6013      	streq	r3, [r2, #0]
 8004ba8:	460c      	movne	r4, r1
 8004baa:	e7eb      	b.n	8004b84 <_malloc_r+0x64>
 8004bac:	460c      	mov	r4, r1
 8004bae:	6849      	ldr	r1, [r1, #4]
 8004bb0:	e7cc      	b.n	8004b4c <_malloc_r+0x2c>
 8004bb2:	1cc4      	adds	r4, r0, #3
 8004bb4:	f024 0403 	bic.w	r4, r4, #3
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d005      	beq.n	8004bc8 <_malloc_r+0xa8>
 8004bbc:	1a21      	subs	r1, r4, r0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f000 f808 	bl	8004bd4 <_sbrk_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d0cf      	beq.n	8004b68 <_malloc_r+0x48>
 8004bc8:	6025      	str	r5, [r4, #0]
 8004bca:	e7db      	b.n	8004b84 <_malloc_r+0x64>
 8004bcc:	20000230 	.word	0x20000230
 8004bd0:	20000234 	.word	0x20000234

08004bd4 <_sbrk_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4c05      	ldr	r4, [pc, #20]	; (8004bf0 <_sbrk_r+0x1c>)
 8004bda:	4605      	mov	r5, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	f7fc fb52 	bl	8001288 <_sbrk>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_sbrk_r+0x1a>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_sbrk_r+0x1a>
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200002b0 	.word	0x200002b0

08004bf4 <strncmp>:
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	b16a      	cbz	r2, 8004c14 <strncmp+0x20>
 8004bf8:	3901      	subs	r1, #1
 8004bfa:	1884      	adds	r4, r0, r2
 8004bfc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004c00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <strncmp+0x1c>
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d001      	beq.n	8004c10 <strncmp+0x1c>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f5      	bne.n	8004bfc <strncmp+0x8>
 8004c10:	1a98      	subs	r0, r3, r2
 8004c12:	bd10      	pop	{r4, pc}
 8004c14:	4610      	mov	r0, r2
 8004c16:	e7fc      	b.n	8004c12 <strncmp+0x1e>

08004c18 <__ascii_wctomb>:
 8004c18:	b149      	cbz	r1, 8004c2e <__ascii_wctomb+0x16>
 8004c1a:	2aff      	cmp	r2, #255	; 0xff
 8004c1c:	bf8b      	itete	hi
 8004c1e:	238a      	movhi	r3, #138	; 0x8a
 8004c20:	700a      	strbls	r2, [r1, #0]
 8004c22:	6003      	strhi	r3, [r0, #0]
 8004c24:	2001      	movls	r0, #1
 8004c26:	bf88      	it	hi
 8004c28:	f04f 30ff 	movhi.w	r0, #4294967295
 8004c2c:	4770      	bx	lr
 8004c2e:	4608      	mov	r0, r1
 8004c30:	4770      	bx	lr
	...

08004c34 <malloc>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	; (8004c40 <malloc+0xc>)
 8004c36:	4601      	mov	r1, r0
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f7ff bf71 	b.w	8004b20 <_malloc_r>
 8004c3e:	bf00      	nop
 8004c40:	2000000c 	.word	0x2000000c

08004c44 <__malloc_lock>:
 8004c44:	4770      	bx	lr

08004c46 <__malloc_unlock>:
 8004c46:	4770      	bx	lr

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr
